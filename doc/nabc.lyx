#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
\usepackage{multicol}
\usepackage{tocbibind}
%\usepackage[scaled=.85]{couriers}

\usepackage[font=it]{caption}
\usepackage{indentfirst}
\usepackage{textcomp}
\usepackage{placeins}

% Label subsections
%\newrefformat{subsec}{Subsection \ref{#1}}

% Following to get bold-face typewriter font in LyXCode
\renewenvironment{lyxcode}
  {\begin{list}{}{
    \setlength{\rightmargin}{\leftmargin}
    \raggedright
    \setlength{\itemsep}{0pt}
    \setlength{\parsep}{0pt}
    \normalfont\bfseries\ttfamily}%
    \item[]}
  {\end{list}}

\addtokomafont{labelinglabel}{\texttt}
\end_preamble
\options sort&compress
\use_default_options false
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding iso8859-1
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 90 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 0
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue,citecolor=blue,urlcolor=blue"
\papersize letterpaper
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch advanced
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\branch basic
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\paperwidth 6in
\paperheight 9in
\leftmargin 1.2in
\topmargin 1in
\rightmargin 1in
\bottommargin 1.2in
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "basicstyle={\small\bfseries\ttfamily},frame=single,frameround=tttt,upquote=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
nabc and libsff
\end_layout

\begin_layout Section

\series bold
Introduction
\end_layout

\begin_layout Standard
The NAB language compiler 
\emph on
nab2c
\emph default
 (which converts NAB source code to C, for subsequent compilation) was written
 in the 1990's by Tom Macke.
 The original design idea was to create a 
\begin_inset Quotes eld
\end_inset

molecular awk
\begin_inset Quotes erd
\end_inset

: a scripting language for manipulation of (macro-)molecules that would
 be primarily used to create short scripts to carry out molecular manipulations.
 It was quickly realized that manipulations like force field minimization
 would be useful, and the Amber-compatible molecular mechanics routines
 were added by David Case as 
\emph on
sff
\emph default
, a 
\begin_inset Quotes eld
\end_inset

simple force field
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Over the years, 
\emph on
sff
\emph default
 evolved to keep pace with (and in many cases drive) Amber developments
 involving implicit force fields, including generalized Born, Poisson-Boltzmann
 and RISM approaches.
 In keeping with its original motivation, 
\emph on
sff
\emph default
 concentrated on implicit solvation, leaving explicit solvent and periodic
 simulations to the main Amber programs 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 The 
\emph on
sff
\emph default
 routines were parallelized using both openmp and MPI, and second derivatives
 of the generalized Born model were added by Russ Brown.
\begin_inset CommandInset citation
LatexCommand citep
key "Brown06"
literal "true"

\end_inset

 Apart from the lack of a GPU implementation, the routines in 
\emph on
sff
\emph default
 are the most general and efficient ones in the Amber package.
 In particular, 
\emph on
sff
\emph default
 excels at generalized Born simulations on large systems, benefitting from
 an advanced nonbonded list builder, and from the hierarchical charge partition
 model described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:hcp"

\end_inset

.
\end_layout

\begin_layout Standard
As a first step, we have prepared sample files in 
\family typewriter
$AMBERHOME/AmberTools/test/nabc
\family default
, which illustrate how to use most of the 
\emph on
sff
\emph default
 functionality directly from a stand-alone C driver.
 The 
\emph on
Makefile
\emph default
 in this directory can guide you through running several sample calculations.
 Looking at the code, and its comments, along with the header file (
\family typewriter
$AMBERHOME/include/sff.h
\family default
) should go a long way towards allowing direct integration into C codes,
 without any reference to the NAB compiler.
 The rest of this chapter has documentation for 
\emph on
libsff
\emph default
.
\end_layout

\begin_layout Section

\series bold
Basic molecular mechanics routines
\begin_inset CommandInset label
LatexCommand label
name "sec:NAB-Basic-molecular-mechanics"

\end_inset


\end_layout

\begin_layout LyX-Code

\family sans
int readparm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
readparm
\end_layout

\end_inset

( molecule m, string parmfile );
\end_layout

\begin_layout LyX-Code

\family sans
int mme_init
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

init
\end_layout

\end_inset

( molecule mol, string aexp, string aexp2, point xyz_ref[], string filename
 );
\end_layout

\begin_layout LyX-Code

\family sans
int mm_options
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mm
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

options
\end_layout

\end_inset

( string opts );
\end_layout

\begin_layout LyX-Code

\family sans
float mme
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme
\end_layout

\end_inset

( point xyz[], point grad[], int iter );
\end_layout

\begin_layout LyX-Code

\family sans
float mme_rattle
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

rattle
\end_layout

\end_inset

( point xyz[], point grad[], int iter );
\end_layout

\begin_layout LyX-Code

\family sans
int conjgrad
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
conjgrad
\end_layout

\end_inset

( float x[], int n, float fret, float func(), float rmsgrad, 
\begin_inset Newline newline
\end_inset

           float dfpred, int maxiter );
\end_layout

\begin_layout LyX-Code

\family sans
int md
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
md
\end_layout

\end_inset

( int n, int maxstep, point xyz[], point f[], float v[], float func );
\end_layout

\begin_layout LyX-Code

\family sans
int getxv
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getxv
\end_layout

\end_inset

( string filename, int natom, float start_time, float x[], float v[] );
\end_layout

\begin_layout LyX-Code

\family sans
int putxv
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putxv
\end_layout

\end_inset

( string filename, string title, int natom, float start_time, 
\begin_inset Newline newline
\end_inset

           float x[], float v[] );
\end_layout

\begin_layout LyX-Code

\family sans
void mm_set_checkpoint
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mm
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

set
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

checkpoint
\end_layout

\end_inset

( string filename );
\end_layout

\begin_layout Standard

\family sans
readparm
\family default
 reads an AMBER parameter-topology file, created by 
\family sans
tleap
\family default
 or with other AMBER programs, and sets up a data structure which we call
 a "parmstruct".
 This is part of the molecule, but is not directly accessible (yet) to 
\family sans
nab
\family default
 programs.
 You would use this command as an alternative to
\family sans
 getpdb_prm()
\family default
.
 You need to be sure that the molecule used in the 
\family sans
readparm()
\family default
 call has been created by calling 
\family sans
getpdb()
\family default
 with a PDB file that has been created by tleap itself (i.e., that has exactly
 the Amber atoms in the correct order).
 As noted above, the 
\family sans
readparm()
\family default
 routine is primarily intended for cases where 
\family sans
getpdb_prm()
\family default
 fails (i.e., when you need to run 
\shape italic
tleap
\shape default
 by hand).
\end_layout

\begin_layout Standard

\family sans
setxyz_from_mol()
\family default
 copies the atomic coordinates of 
\family sans
mol
\family default
 to the array 
\family sans
xyz
\family default
.
 
\family sans
setmol_from_xyz()
\family default
 replaces the atomic coordinates of 
\family sans
mol
\family default
 with the contents of 
\family sans
xyz
\family default
.
 Both return the number of atoms copied with a 
\family sans
0
\family default
 indicating an error occurred.
\end_layout

\begin_layout Standard
The 
\family sans
getxv()
\family default
 and 
\family sans
putxv()
\family default
 routines read and write non-periodic Amber-style restart files.
 Velocities are read if present.
 
\end_layout

\begin_layout Standard
The 
\family sans
getxyz()
\family default
 and 
\family sans
putxyz()
\family default
 routines are used in conjunction with the 
\family sans
mm_set_checkpoint()
\family default
 routine to write checkpoint or restart files.
 The coordinates are written at higher precision than to an AMBER restart
 file, i.e., with sufficiently high precision to restart even a Newton-Raphson
 minimization where the error in coordinates may be on the order of
\begin_inset Formula $10^{-12}$
\end_inset

 .
 The checkpoint files are written at iteration intervals that are specified
 by the 
\shape italic
nchk
\shape default
 or 
\shape italic
nchk2
\shape default
 parameters to the 
\family sans
mm_options()
\family default
 routine (see below).
 The checkpoint file names are determined by the filename string that is
 passed to 
\family sans
mm_set_checkpoint()
\family default
.
 If filename contains one or more %d format specifiers, then the file name
 will be a modification of filename wherein the leftmost %d of filename
 is replaced by the iteration count.
 If filename contains no %d format specifier, then the file name will be
 filename with the iteration count appended on the right.
\end_layout

\begin_layout Standard
The 
\family sans
mme_init()
\family default
 function must be called after 
\family sans
mm_options()
\family default
 and before calls to 
\family sans
mme().

\family default
 It sets up parameters for future force field evaluations, and takes as
 input an 
\family sans
nab
\family default
 molecule.
 The string 
\family sans
aexp
\family default
 is an atom expression that indicates which atoms are to be allowed to move
 in minimization or dynamics: atoms that do not match 
\family sans
aexp
\family default
 will have their positions in the gradient vector set to zero.
 A 
\family sans
NULL
\family default
 atom expression will allow all atoms to move.
 The second string, 
\family sans
aexp2
\family default
 identifies atoms whose positions are to be restrained to the positions
 in the array 
\family sans
xyz_ref
\family default
.
 The strength of this restraint will be given by the 
\family sans
wcons
\family default
 variable set in 
\family sans
mm_options()
\family default
.
 A 
\family sans
NULL
\family default
 value for 
\family sans
aexp2
\family default
 will cause all atoms to be constrained.
 The last parameter to 
\family sans
mme_init()
\family default
 is a file name without extension for the output trajectory file.
 This should be NULL if no output file is desired.
 NAB writes trajectories in the 
\emph on
netCDF
\emph default
 format, which can be read by 
\emph on
cpptraj
\emph default
, and either analyzed, or converted to another format.
 The default netCDF extension of .nc is automatically added to the file name.
\end_layout

\begin_layout Standard

\family sans
mm_options()
\family default
 is used to set parameters
\family sans
, and
\family default
 must be called before 
\family sans
mme_init()
\family default
; if you change options through a call to 
\family sans
mm_options()
\family default
 without a subsequent call to 
\family sans
mme_init()
\family default
 you may get incorrect calculations with no error messages.
 Beware.
 The 
\family sans
opts
\family default
 string contains keyword/value pairs of the form 
\family sans
keyword=value
\family default
 separated by white space or commas.
 Allowed values are shown in the following table.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="40" columns="3">
<features islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntpr
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ntpr
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency of printing of the energy and its components.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
e_debug
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
e
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

debug
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero printout additional components of the energy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gb_debug
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gb
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

debug 
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero printout information about Born first derivatives.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gb2_debug
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gb2
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

debug
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero printout information about Born second derivatives.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nchk
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nchk
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency of writing checkpoint file during first derivative calculation,
 i.e., in the mme() routine.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nchk2
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nchk2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency of writing checkpoint file during second derivative calculation,
 i.e., in the mme2() routine.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nsnb
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nsnb
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency at which the non-bonded list is updated.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ns
\family default
cm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nscm
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If > 0, remove translational and rotational center-of-mass (COM) motion
 after every nscm steps.
 For Langevin dynamics (gamma_ln>0) without HCP (hcp=0), the position of
 the COM is reset to zero every nscm steps, but the velocities are not affected.
 With HCP (hcp>0) COM translation and rotation are also removed, with or
 without Langevin dynamics.
\end_layout

\begin_layout Plain Layout
It is strongly recommended that this option be used whenever HCP is used.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cut
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-bonded cutoff, in angstroms.
 This parameter is ignored if hcp > 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
wcons
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wcons
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Restraint weight for keeping atoms close to their positions in 
\family sans
xyz_ref
\family default
 (see 
\shape italic
mme_init
\shape default
).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dim
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dim
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of spatial dimensions; supported values are 3 and 4.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
k4d
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
k4d
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Force constant for squeezing out the fourth dimensional coordinate, if dim=4.
 If this is nonzero, a penalty function will be added to the bounds-violation
 energy, which is equal to 0.5 * 
\shape italic
k4d * w * w
\shape default
, where 
\begin_inset Formula $w$
\end_inset

 is the value of the fourth dimensional coordinate.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.001 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time step, ps.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
t
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
t 
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial time, ps.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rattle
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rattle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 1, bond lengths will be constrained to their equilibrium values,
 for dynamics; if set to 2, bonds to hydrogens will be constrained; default
 is not to include such constraints.
 Note: if you want to use rattle (effectively "shake") for minimization,
 you do not need to set this parameter; rather, pass the 
\family sans
mme_rattle()
\family default
 function to 
\shape italic
conjgrad()
\shape default
.

\family sans
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tautp
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tautp
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
999999.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Temperature coupling parameter, in ps.
 The time constant determines the strength of the weak-coupling ("Berendsen")
 temperature bath.
\begin_inset CommandInset citation
LatexCommand cite
key "Berendsen84"
literal "true"

\end_inset

 Set 
\shape italic
tautp
\shape default
 to a very large value (e.g.
 9999999.) in order to turn off coupling and revert to Newtonian dynamics.
 This variable only has an effect if 
\shape italic
gamma_ln
\shape default
 remains at its default value of zero; if 
\shape italic
gamma_ln
\shape default
 is not zero, Langevin dynamics is assumed, as discussed below.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gamma_ln
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gamma
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

ln
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collision frequency for Langevin dynamics, in
\begin_inset Formula $ps^{-1}$
\end_inset

 .
 Values in the range 2-5
\begin_inset Formula $ps^{-1}$
\end_inset

 often give acceptable temperature control, while allowing transitions to
 take place.
\begin_inset CommandInset citation
LatexCommand cite
key "Loncharich92"
literal "true"

\end_inset

 Values near 50
\begin_inset Formula $ps^{-1}$
\end_inset

 correspond to the collision frequency for liquid water, and may be useful
 if rough physical time scales for motion are desired.
 The so-called BBK integrator is used here.
\begin_inset CommandInset citation
LatexCommand cite
key "Brooks85"
literal "true"

\end_inset


\family sans
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
temp0
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
temp0
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
300.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Target temperature, K.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
vlimit
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
vlimit
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum absolute value of any component of the velocity vector.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntpr_md
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ntpr
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

md
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printing frequency for dynamics information to stdout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntwx
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ntwx
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency for dumping coordinates to traj_file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
zerov
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
zerov
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero, then the initial velocities will be set to zero.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tempi
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tempi
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\shape italic
zerov
\shape default
=0 and 
\shape italic
tempi
\shape default

\begin_inset Formula $>$
\end_inset

0, then the initial velocities will be randomly chosen for this temperature.
 If both 
\shape italic
zerov
\shape default
 and 
\shape italic
tempi
\shape default
 are zero, the velocities passed into the md() function will be used as
 the initial velocities; this combination is useful to continue an existing
 trajectory.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
genmass
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
genmass
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The general mass to use for MD if individual masses are not read from a
 prmtop file; value in amu.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
diel
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
diel
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code for the dielectric model.
 "C" gives a dielectric constant of 1; "R" makes the dielectric constant
 equal to distance in angstroms; "RL" uses the sigmoidal function of Ramstein
 & Lavery, PNAS 
\series bold
85
\series default
, 7231 (1988); "RL94" is the same thing, but speeded up assuming one is
 using the Cornell 
\shape italic
et al
\shape default
 force field; "R94" is a distance-dependent dielectric, again with speedups
 that assume the Cornell 
\shape italic
et al.

\shape default
 force field.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dielc
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dielc
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This is the dielectric constant used for 
\shape italic
non-GB
\shape default
 simulations.
 It is implemented in routine 
\family sans
mme_init()
\family default
 by scaling all of the charges by 
\family sans
sqrt(dielc)
\family default
.
 This means that you need to set this (if desired) in 
\family sans
mm_options()
\family default
 before calling 
\family sans
mme_init()
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gb
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gb
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "nab_gb"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 0 then GB is off.
 Setting gb=1 turns on the Hawkins, Cramer, Truhlar (HCT) form of pairwise
 generalized Born model for solvation.
 See ref 
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui01"
literal "true"

\end_inset

 for details of the implementation; this is equivalent to the 
\shape italic
igb=1
\shape default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 Set diel to "C" if you use this option.
 Setting gb=2 turns on the Onufriev, Bashford, Case (OBC) variant of GB,
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00,Onufriev04"
literal "true"

\end_inset

 with 
\begin_inset Formula $\alpha$
\end_inset

=0.8, 
\begin_inset Formula $\beta$
\end_inset

=0.0 and 
\begin_inset Formula $\gamma$
\end_inset

=2.909.
 This is equivalent to the 
\shape italic
igb=2
\shape default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 Setting gb=5 just changes the values of 
\begin_inset Formula $\alpha$
\end_inset

, 
\begin_inset Formula $\beta$
\end_inset

 and 
\begin_inset Formula $\gamma$
\end_inset

 to 1.0, 0.8, and 4.85, respectively, corresponding to the 
\shape italic
igb=5
\shape default
 option in 
\emph on
sander
\emph default
.
 Setting gb=7 turns on the GB Neck variant of GB,
\begin_inset CommandInset citation
LatexCommand citep
key "Mongan07"
literal "true"

\end_inset

 corresponding to the 
\emph on
igb=7
\emph default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 Setting gb=8 turns on the updated GB Neck variant of GB, corresponding
 to the 
\emph on
igb=8
\emph default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rgbmax
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rgbmax
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
999.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A maximum value for considering pairs of atoms to contribute to the calculation
 of the effective Born radii.
 The default value means that there is effectively no cutoff.
 Calculations will be sped up by using smaller values, say around 15.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 or so.
 This parameter is ignored if hcp > 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gbsa
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gbsa
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 1, add a surface-area dependent energy equal to surfen*SASA, where
 surften is discussed below, and SASA is an approximate surface area term.
 NAB uses the "LCPO" approximation developed by Weiser, Shenkin, and Still.
\begin_inset CommandInset citation
LatexCommand cite
key "Weiser99"
literal "true"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
surften
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
surften
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Surface tension (see 
\shape italic
gbsa
\shape default
, above) in kcal/mol/
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset


\begin_inset Formula $^{2}$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
epsext
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
epsext
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
78.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exterior dielectric for generalized Born; interior dielectric is always
 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
kappa
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
kappa
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inverse of the Debye-Hueckel length, if gb is turned on, in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset


\begin_inset Formula $^{-1}$
\end_inset

.
 This parameter is related to the ionic strength as 
\begin_inset Formula $\kappa=[8\pi\beta I/\varepsilon]^{1/2}$
\end_inset

, where 
\begin_inset Formula $I$
\end_inset

 is the ionic strength (same as the salt concentration for a 1-1 salt).
 For 
\begin_inset Formula $T$
\end_inset

=298.15 and 
\begin_inset Formula $\varepsilon$
\end_inset

=78.5, 
\begin_inset Formula $\kappa=(0.10806\,I)^{1/2}$
\end_inset

, where 
\begin_inset Formula $I$
\end_inset

 is in [M].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
static_arrays
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
static_arrays
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 1, do not allocate dynamic arrays for each call to the 
\family sans
mme()
\family default
 and 
\family sans
mme2()
\family default
 functions.
 The default value of 1 reduces computation time by avoiding array allocation.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
blocksize
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
blocksize
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The granularity with which loop iterations are assigned to OpenMP threads
 or MPI processes.
 For MPI, a 
\family sans
blocksize
\family default
 as small as 1 results in better load balancing during parallel execution.
 For OpenMP, 
\family sans
blocksize
\family default
 should not be smaller than the number of floating-point numbers that fit
 into one cache line in order to avoid performance degradation through 'false
 sharing'.
 For ScaLAPACK, the optimum 
\family sans
blocksize
\family default
 is not know, although a value of 1 is probably too small.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
hcp
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hcp
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use the GB-HCP model: 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

0 No GB-HCP.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 1-charge approximation.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 2-charge approximation.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 2-charge based on optimal point charge approximation (recommended for
 GB-HCP).
\end_layout

\begin_layout Plain Layout
See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:hcp"

\end_inset

 for detailed instructions on using the GB-HCP.
 It is strongly recommended that the NSCM option above be used whenever
 GB-HCP is used.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dhcp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Adjusts the separation between the charges used to approximate uncharged
 components for hcp=4.
 dhcp is empirically determined so that the RMS error in force, compared
 to GB without further approximation, is minimized.
 Our testing on various structures suggests that the optimal value for dhcp
 can be found within the range of 0.1 and 0.4.
 See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:hcp"

\end_inset

 for details.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hcp_h1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GB-HCP level 1 threshold distance.
 The recommended level 1 threshold distance for amino acids is 15A.
 For structures with nucleic acids the recommended level 1 threshold distance
 is 21A.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hcp_h2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GB-HCP level 2 threshold distance.
 The recommended level 2 threshold distance for proteins is 50A.
 For structures with nucleic acids the recommended level 2 threshold distance
 is 90A.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hcp_h3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GB-HCP level 3 threshold distance.
 The recommended level 3 threshold distance for amino acids is 150A.
 For structures with nucleic acids the recommended level 1 threshold distance
 is 169A.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The 
\family sans
mme()
\family default
 function takes a coordinate set and returns the energy in the function
 value and the gradient of the energy in 
\family sans
grad
\family default
.
 The input parameter 
\shape italic
iter
\shape default
 is used to control printing (see the 
\shape italic
ntpr
\shape default
 variable) and non-bonded updates (see 
\shape italic
nsnb
\shape default
).
 The 
\family sans
mme_rattle()
\family default
 function has the same interface, but constrains the bond lengths and returns
 a corrected gradient.
 If you want to minimize with constrained bond lengths, pass 
\shape italic
mme_rattle
\shape default
 and not 
\shape italic
mme
\shape default
 to the 
\shape italic
conjgrad
\shape default
 routine.
\end_layout

\begin_layout Standard
The 
\family sans
conjgrad()
\family default
 function will carry out conjugate gradient minimization of the function
 
\family sans
func
\family default
 that depends upon 
\family sans
n
\family default
 parameters, whose initial values are in the 
\family sans
x
\family default
 array.
 The function 
\family sans
func
\family default
 must be of the form 
\family sans
func( x[], g[], iter )
\family default
, where 
\family sans
x
\family default
 contains the input values, and the function value is returned through the
 function call, and its gradient with respect to 
\family sans
x
\family default
 through the 
\family sans
g
\family default
 array.
 The iteration number is passed through 
\family sans
iter
\family default
, which 
\family sans
func
\family default
 can use for whatever purpose it wants; a typical use would just be to determine
 when to print results.
 The input parameter 
\family sans
dfpred
\family default
 is the expected drop in the function value on the first iteration; generally
 only a rough estimate is needed.
 The minimization will proceed until 
\family sans
maxiter
\family default
 steps have been performed, or until the root-mean-square of the components
 of the gradient is less than 
\family sans
rmsgrad.

\family default
 The value of the function at the end of the minimization is returned in
 the variable 
\family sans
fret
\family default
.
 
\family sans
conjgrad
\family default
 can return a variety of exit codes: 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
Return codes for conjgrad routine
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $>$
\end_inset

0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
minimization converged; gives number of final iteration 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bad line search; probably an error in the relation of the function to its
 gradient (perhaps from round-off if you push too hard on the minimization).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
search direction was uphill
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exceeded the maximum number of iterations
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
could not further reduce function value 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Finally, the 
\family sans
md
\family default
 function will run 
\family sans
maxstep
\family default
 steps of molecular dynamics, using 
\family sans
func
\family default
 as the force field (this would typically be set to a function like 
\family sans
mme
\family default
.) The number of dynamical variables is given as input parameter 
\family sans
n
\family default
: this would be 3 times the number of atoms for ordinary cases, but might
 be different for other force fields or functions.
 The arrays 
\family sans
x[], f[]
\family default
 and 
\family sans
v[]
\family default
 hold the coordinates, gradient of the potential, and velocities, respectively,
 and are updated as the simulation progresses.
 The method of temperature regulation (if any) is specified by the variables
 
\shape italic
tautp
\shape default
 and 
\shape italic
gamma_ln
\shape default
 that are set in 
\shape italic
mm_options()
\shape default
.
\end_layout

\begin_layout Standard

\series bold
Note:
\series default
 In versions of NAB up to 4.5.2, there was an additional input variable to
 
\family sans
md()
\family default
 called 
\shape italic
minv
\shape default
 that reserved space for the inverse of the masses of the particles; this
 has now been removed.
 This change is not backwards compatible: you must modify existing NAB scripts
 that call 
\family sans
md()
\family default
 to remove this variable.
\end_layout

\begin_layout Section
NetCDF read/write routines
\end_layout

\begin_layout Standard
NAB has several routines for reading/writing Amber NetCDF trajectory and
 restart files.
 All of the routines except netcdfGetNextFrame() return a 1 on error, 0
 on success.
 The netcdfGetNextFrame() routine returns 0 on error, 1 on success to make
 it easier to use in loops.
 For an example of how to use NetCDF files in NAB see the NAB script in
 
\series bold
'$AMBERHOME/AmberTools/test/nab/tnetcdf.nab'
\series default
.
\end_layout

\begin_layout Subsection
struct AmberNetcdf
\end_layout

\begin_layout Standard
An AmberNetcdf struct must be used to interface with the netcdf commands
 in NAB (except netcdfWriteRestart()).
 It contains many fields, but the following are the ones commonly needed
 by users:
\end_layout

\begin_layout Description
temp0 Temperature of current frame (if temperature is present).
\end_layout

\begin_layout Description
restartTime Simulation time if NetCDF restart.
\end_layout

\begin_layout Description
isNCrestart 0 if trajectory, 1 if restart.
\end_layout

\begin_layout Description
ncframe Number of frames in the file.
\end_layout

\begin_layout Description
currentFrame Current frame number.
\end_layout

\begin_layout Description
ncatom Number of atoms.
\end_layout

\begin_layout Description
ncatom3 Number of coordinates (ncatom * 3).
\end_layout

\begin_layout Description
velocityVID If not -1, velocity information is present.
\end_layout

\begin_layout Description
TempVID If not -1, temperature information is present.
\end_layout

\begin_layout Standard
In order to use it, you must include nab_netcdf.h and declare it as a struct,
 e.g.:
\end_layout

\begin_layout LyX-Code
#include 
\begin_inset Quotes eld
\end_inset

nab_netcdf.h
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
struct AmberNetcdf NC;
\end_layout

\begin_layout Subsection
netcdfClose
\end_layout

\begin_layout LyX-Code
int netcdfClose(struct AmberNetcdf NC)
\end_layout

\begin_layout Standard
Close NetCDF file associated with 
\series bold
NC
\series default
.
\end_layout

\begin_layout Subsection
netcdfCreate
\end_layout

\begin_layout LyX-Code
int netcdfCreate(struct AmberNetcdf NC, string filename, int natom, int
 isBox)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct to set up.
\end_layout

\begin_layout Description
filename Name of file to create.
\end_layout

\begin_layout Description
natom Number of atoms in file.
\end_layout

\begin_layout Description
isBox 0 = No box coordinates, 1 = Has box coordinates.
\end_layout

\end_deeper
\begin_layout Standard
Create NetCDF trajectory file and associate with struct 
\series bold
NC
\series default
.
 For writing NetCDF restarts, use netcdfWriteRestart().
\end_layout

\begin_layout Subsection
netcdfDebug
\end_layout

\begin_layout LyX-Code
int netcdfDebug(struct AmberNetcdf NC)
\end_layout

\begin_layout Standard
Print debug information for NetCDF file associated with 
\series bold
NC
\series default
.
\end_layout

\begin_layout Subsection
netcdfGetFrame
\end_layout

\begin_layout LyX-Code
int netcdfGetFrame(struct AmberNetcdf NC, int set, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
set Frame number to read.
\end_layout

\begin_layout Description
X Array to store coordinates (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of dimension 6 to store box coordinates if present (X Y Z ALPHA
 BETA GAMMA); can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Get coordinates at frame 
\series bold
set
\series default
 (starting from 0).
\end_layout

\begin_layout Subsection
netcdfGetNextFrame
\end_layout

\begin_layout LyX-Code
int netcdfGetNextFrame(struct AmberNetcdf NC, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
X Array to store coordinates (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of size 6 to store box coordinates if present (X Y Z ALPHA BETA
 GAMMA); can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Get the coordinates at frame 
\series bold
NC.currentFrame
\series default
 and increment 
\series bold
NC.currentFrame
\series default
 by one.
 Unlike the other netcdf routines, this returns 1 on success and 0 on error
 to make it easy to use in loops.
\end_layout

\begin_layout Subsection
netcdfGetVelocity
\end_layout

\begin_layout LyX-Code
int netcdfGetVelocity(struct AmberNetcdf NC, int set, float V[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
set Frame number to read.
\end_layout

\begin_layout Description
V Array to store velocities (dimension NC.ncatom3).
\end_layout

\end_deeper
\begin_layout Standard
Get velocities at frame 
\series bold
set
\series default
 (starting from 0).
 
\end_layout

\begin_layout Subsection
netcdfInfo
\end_layout

\begin_layout LyX-Code
int netcdfInfo(struct AmberNetcdf NC)
\end_layout

\begin_layout Standard
Print information for 
\series bold
NC
\series default
, including file type, presence of velocity/box/temperature info, and number
 of atoms, coordinates, and frames present.
\end_layout

\begin_layout Subsection
netcdfLoad
\end_layout

\begin_layout LyX-Code
int netcdfLoad(struct AmberNetcdf NC, string filename)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct to set up.
\end_layout

\begin_layout Description
filename Name of NetCDF file to load.
\end_layout

\end_deeper
\begin_layout Standard
Load NetCDF file filename and set up the AmberNetcdf structure 
\series bold
NC
\series default
 for reading.
 The file type is automatically detected.
\end_layout

\begin_layout Subsection
netcdfWriteFrame
\end_layout

\begin_layout LyX-Code
int netcdfWriteFrame(struct AmberNetcdf NC, int set, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
set Frame number to write.
\end_layout

\begin_layout Description
X Array of coordinates to write (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of size 6 of box coordinates to write (X Y Z ALPHA BETA GAMMA);
 can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Write to NetCDF trajectory at frame 
\series bold
set
\series default
 (starting from 0).
 NOTE: This routine is for writing NetCDF trajectories only; to write NetCDF
 restarts use netcdfWriteRestart().
\end_layout

\begin_layout Subsection
netcdfWriteNextFrame
\end_layout

\begin_layout LyX-Code
int netcdfWriteNextFrame(struct AmberNetcdf NC, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
X Array of coordinates to write (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of size 6 of box coordinates to write (X Y Z ALPHA BETA GAMMA);
 can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Write coordinates to frame 
\series bold
NC.currentFrame
\series default
 and increment 
\series bold
NC.currentFrame
\series default
 by one.
 NOTE: This routine is for writing NetCDF trajectories only; to write NetCDF
 restarts use netcdfWriteRestart().
\end_layout

\begin_layout Subsection
netcdfWriteRestart
\end_layout

\begin_layout LyX-Code
int netcdfWriteRestart(string filename, int natom, float X[], float V[],
 
\end_layout

\begin_layout LyX-Code
                       float box[], float time, float temperature)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
filename Name of NetCDF restart file to create.
\end_layout

\begin_layout Description
natom Number of atoms in netcdf restart file.
\end_layout

\begin_layout Description
X Array of coordinates to write (dimension natom*3).
\end_layout

\begin_layout Description
V Array of velocities to write (dimension natom*3); can be NULL.
\end_layout

\begin_layout Description
box Array of size 6 of box coordinates to write (X Y Z ALPHA BETA GAMMA);
 can be NULL.
\end_layout

\begin_layout Description
time Restart time in ps.
\end_layout

\begin_layout Description
temperature Restart temperature; if < 0 no temperature will be written.
\end_layout

\end_deeper
\begin_layout Section

\series bold
Second derivatives and normal modes
\end_layout

\begin_layout Standard
Russ Brown has contributed codes that compute analytically the second derivative
s of the Amber functions, including the generalized Born terms.
\begin_inset CommandInset citation
LatexCommand citep
key "Brown06"
literal "true"

\end_inset

 This capability resides in the three functions described here.
\end_layout

\begin_layout LyX-Code

\family sans
int newton
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newton
\end_layout

\end_inset

( float x[], int n, float fret, float func1(), float func2(), float rms,
 
\begin_inset Newline newline
\end_inset

                float nradd, int maxiter );
\end_layout

\begin_layout LyX-Code

\family sans
float nmode
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nmode
\end_layout

\end_inset

( float x[], int n, float func(), int eigp, int ntrun, float eta, float
 hrmax, int ioseen );
\end_layout

\begin_layout Standard
These routines construct and manipulate a Hessian (second derivative matrix),
 allowing one (for now) to carry out Newton-Raphson minimization and normal
 mode calculations.
 The 
\family sans
mme2()
\family default
 routine takes as input a 
\shape italic
3*natom
\shape default
 vector of coordinates 
\family sans
x[]
\family default
, and returns a gradient vector 
\family sans
g[]
\family default
, a Hessian matrix, stored columnwise in a 
\shape italic
3*natom x 3*natom
\shape default
 vector 
\family sans
h[]
\family default
, and the masses of the system, in a vector 
\family sans
m[]
\family default
 of length 
\shape italic
natom
\shape default
.
 The iteration variable 
\family sans
iter
\family default
 is just used to control printing.
 At present, these routines only work for 
\shape italic
gb
\shape default
 = 0 or 1.
\end_layout

\begin_layout Standard
Users cannot call 
\family sans
mme2()
\family default
 directly, but will pass this as an argument to one of the next two routines.
\end_layout

\begin_layout Standard
The 
\family sans
newton()
\family default
 routine takes a input coordinates 
\family sans
x[]
\family default
 and a size parameter 
\family sans
n
\family default
 (must be set to 
\shape italic
3*natom
\shape default
).
 It performs Newton-Raphson optimization until the root-mean-square of the
 gradient vector is less than 
\family sans
rms
\family default
, or until 
\family sans
maxiter
\family default
 steps have been taken.
 For now, the input function 
\family sans
func1()
\family default
 must be 
\family sans
mme()
\family default
 and 
\family sans
func2()
\family default
 must be 
\family sans
mme2()
\family default
.
 The value 
\family sans
nradd
\family default
 will be added to the diagonal of the Hessian before the step equations
 are solved; this is generally set to zero, but can be set something else
 under particular circumstances, which we do not discuss here.
\begin_inset CommandInset citation
LatexCommand cite
key "Nguyen85"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
Generally, you only want to try Newton-Raphson minimization (which can be
 very expensive) after you have optimized structures with 
\family sans
conjgrad()
\family default
 to an rms gradient of 10 -3 or so.
 In most cases, it should only take a small number of iterations then to
 go down to an rms gradient of about 10 -12 or so, which is somewhere near
 the precision limit.
\end_layout

\begin_layout Standard
Once a good minimum has been found, you can use the nmode() function to
 compute normal/Langevin modes and thermochemical parameters.
 The first three arguments are the same as for newton(), the next two integers
 give the number of eigenvectors to compute and the type of run, respectively.
 The last three arguments (only used for Langevin modes) are the viscosity
 in centipoise, the value for the hydrodynamic radius, and the type of hydrodyna
mic interactions.
 Several techniques are available for diagonalizing the Hessian depending
 on the number of modes required and the amount of memory available.
\end_layout

\begin_layout Standard
In all cases the modes are written to an Amber-compatible "vecs" file for
 normal modes or "lmodevecs" file for Langevin modes.
 There are currently no nab routines that use this format.
 The Langevin modes will also generate an output file called "lmode" that
 can be read by the Amber module 
\emph on
lmanal
\emph default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ntrun
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
0: The dsyev routine is used to diagonalize the Hessian 
\end_layout

\begin_layout Description
1: The dsyevd routine is used to diagonalize the Hessian 
\end_layout

\begin_layout Description
2: The ARPACK package (shift invert technique) is used to obtain a small
 number of eigenvalues
\end_layout

\begin_layout Description
3: The Langevin modes are computed with the viscosity and hydrodynamic radius
 provided 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
hrmax Hydrodynamic radius for the atom with largest area exposed to solvent.
 If a file named "expfile" is provided then the relative exposed areas are
 read from this file.
 If "expfile" is not present all atoms are assigned a hydrodynamic radius
 of hrmax or 0.2 for the hydrogen atoms.
 The "expfile" can be generated with the ms (molecular surface) program.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ioseen 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
0: Stokes Law is used for the hydrodynamic interaction 
\end_layout

\begin_layout Description
1: Oseen interaction included 
\end_layout

\begin_layout Description
2: Rotne-Prager correction included 
\end_layout

\end_deeper
\begin_layout Standard
Here is a typical calling sequence: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

float x[4000], fret;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb_prm( "mymolecule.pdb", "leaprc.protein.ff14SB", "", 0 );
\end_layout

\begin_layout Plain Layout

mm_options( "cut=999., ntpr=50, nsnb=99999, diel=C, gb=1, dielc=1.0" );
\end_layout

\begin_layout Plain Layout

mme_init( m, NULL, "::Z", x, NULL);
\end_layout

\begin_layout Plain Layout

setxyz_from_mol( m, NULL, x );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  conjugate gradient minimization
\end_layout

\begin_layout Plain Layout

conjgrad(x, 3*m.natoms, fret, mme, 0.1, 0.001, 2000 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  Newton-Raphson minimization
\backslash
fP
\end_layout

\begin_layout Plain Layout

mm_options( "ntpr=1" );
\end_layout

\begin_layout Plain Layout

newton( x, 3*m.natoms, fret, mme, mme2, 0.00000001, 0.0, 6 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// get the normal modes:
\end_layout

\begin_layout Plain Layout

nmode( x, 3*m.natoms, mme2, 0, 0, 0.0, 0.0, 0); 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:lmod"

\end_inset


\series bold
Low-MODe (LMOD) optimization methods
\end_layout

\begin_layout Standard
Istv
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
'{a}
\end_layout

\end_inset

n Kolossv
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
'{a}
\end_layout

\end_inset

ry has contributed functions, which implement the LMOD methods for minimization,
 conformational searching, and flexible docking.
\begin_inset CommandInset citation
LatexCommand cite
key "Kolossvary96,Kolossvary99,Kolossvary01,Keseru01"
literal "true"

\end_inset

 The centerpiece of LMOD is a conformational search algorithm based on eigenvect
or following of low-frequency vibrational modes.
 It has been applied to a spectrum of computational chemistry domains including
 protein loop optimization and flexible active site docking.
 The search method is implemented without explicit computation of a Hessian
 matrix and utilizes the Arnoldi package (ARPACK, 
\shape italic
http://www.caam.rice.edu/software/ARPACK/
\shape default
) for computing the low-frequency modes.
 LMOD optimization can be thought of as an advanced minimization method.
 LMOD can not only energy minimize a molecular structure in the local sense,
 but can generate a series of very low energy conformations.
 The LMOD capability resides in a single, top-level calling function 
\shape italic
lmod()
\shape default
, which uses fast local minimization techniques, collectively termed XMIN
 that can also be accessed directly through the function 
\shape italic
xmin().
\end_layout

\begin_layout Standard
There are now 
\series bold
four 
\begin_inset Quotes eld
\end_inset

real-life
\begin_inset Quotes erd
\end_inset

 examples
\series default
 of carrying out LMOD searches: look in 
\emph on
$AMBERHOME/AmberTools/examples/nab/lmod_*
\emph default
.
 Each directory has a README file that give more information.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod1"

\end_inset

LMOD conformational searching
\end_layout

\begin_layout Standard
The LMOD conformational search procedure is based on gentle, but very effective
 structural perturbations applied to molecular systems in order to explore
 their conformational space.
 LMOD perturbations are derived from low-frequency vibrational modes representin
g large-amplitude, concerted atomic movements.
 Unlike essential dynamics where such low modes are derived from long molecular
 dynamics simulations, LMOD calculates the modes directly and utilizes them
 to improve Monte Carlo sampling.
\end_layout

\begin_layout Standard
LMOD has been developed primarily for macromolecules, with its main focus
 on protein loop optimization.
 However, it can be applied to any kind of molecular systems, including
 complexes and flexible docking where it has found widespread use.
 The LMOD procedure starts with an initial molecular model, which is energy
 minimized.
 The minimized structure is then subjected to an ARPACK calculation to find
 a user-specified number of low-mode eigenvectors of the Hessian matrix.
 The Hessian matrix is never computed; ARPACK makes only implicit reference
 to it through its product with a series of vectors.
 Hv, where v is an arbitrary unit vector, is calculated via a finite-difference
 formula as follows,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Hv=\left[\nabla(x_{min}+h)-\nabla(x_{min})\right]/h\label{eq:lmod1}
\end{equation}

\end_inset

where 
\begin_inset Formula $x_{min}$
\end_inset

 is the coordinate vector at the energy minimized conformation and 
\begin_inset Formula $h$
\end_inset

 denotes machine precision.
 The computational cost of Eq.
 1 requires a single gradient calculation at the energy minimum point and
 one additional gradient calculation for each new vector.
 Note that 
\begin_inset Formula $\bigtriangledown x$
\end_inset

 is never 0, because minimization is stopped at a finite gradient RMS, which
 is typically set to 0.1-1.0 kcal/mol-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 in most calculations.
\end_layout

\begin_layout Standard
The low-mode eigenvectors of the Hessian matrix are stored and can be re-used
 throughout the LMOD search.
 Note that although ARPACK is very fast in relative terms, a single ARPACK
 calculation may take up to a few hours on an absolute CPU time scale with
 a large protein structure.
 Therefore, it would be impractical to recalculate the low-mode eigenvectors
 for each new structure.
 Visual inspection of the low-frequency vibrational modes of different,
 randomly generated conformations of protein molecules showed very similar,
 collective motions clearly suggesting that low-modes of one particular
 conformation were transferable to other conformations for LMOD use.
 This important finding implies that the time limiting factor in LMOD optimizati
on, even for relatively small molecules, is energy minimization, not the
 eigenvector calculation.
 This is the reason for employing XMIN for local minimization instead of
 NAB's standard minimization techniques.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod2"

\end_inset

LMOD procedure
\end_layout

\begin_layout Standard
Given the energy-minimized structure of an initial protein model, protein-
 ligand complex, or any other molecular system and its low-mode Hessian
 eigenvectors, LMOD proceeds as follows.
 For each of the first n low-modes repeat steps 1-3 until convergence:
\end_layout

\begin_layout Enumerate
Perturb the energy-minimized starting structure by moving along the ith
 (i =1-n) Hessian eigenvector in either of the two opposite directions to
 a certain distance.
 The 3N-dimensional (N is equal to the number of atoms) travel distance
 along the eigenvector is scaled to move the fastest moving atom of the
 selected mode in 3-dimensional space to a randomly chosen distance between
 a user-specified minimum and maximum value.
\begin_inset Newline newline
\end_inset


\emph on
Note
\emph default
: A single LMOD move inherently involves excessive bond stretching and bond
 angle bending in Cartesian space.
 Therefore the primarily torsional trajectory drawn by the low-modes of
 vibration on the PES is severely contaminated by this naive, linear approximati
on and, therefore, the actual Cartesian LMOD trajectory often misses its
 target by climbing walls rather than crossing over into neighboring valleys
 at not too high altitudes.
 The current implementation of LMOD employs a so-called ZIG-ZAG algorithm,
 which consists of a series of alternating short LMOD moves along the low-mode
 eigenvector (ZIG) followed by a few steps of minimization (ZAG), which
 has been found to relax excessive stretches and bends more than reversing
 the torsional move.
 Therefore, it is expected that such a ZIG- ZAG trajectory will eventually
 be dominated by concerted torsional movements and will carry the molecule
 over the energy barrier in a way that is not too different from finding
 a saddle point and crossing over into the next valley like passing through
 a mountain pass.
\begin_inset Newline newline
\end_inset


\emph on
Barrier crossing check:
\emph default
 The LMOD algorithm checks barrier crossing by evaluating the following
 criterion: IF the current endpoint of the zigzag trajectory is lower than
 the energy of the starting structure, OR, the endpoint is at least lower
 than it was in the previous ZIG-ZAG iteration step AND the molecule has
 also moved farther away from the starting structure in terms of all-atom
 superposition RMS than at the previous position THEN it is assumed that
 the LMOD ZIG-ZAG trajectory has crossed an energy barrier.
\end_layout

\begin_layout Enumerate
Energy-minimize the perturbed structure at the endpoint of the ZIG- ZAG
 trajectory.
\end_layout

\begin_layout Enumerate
Save the new minimum-energy structure and return to step 1.
 Note that LMOD saves only low-energy structures within a user-specified
 energy window above the then current global minimum of the ongoing search.
\end_layout

\begin_layout Standard
After exploring the modes of a single structure, LMOD goes on to the next
 starting structure, which is selected from the set of previously found
 low- energy structures.
 The selection is based on either the Metropolis criterion, or simply the
 than lowest energy structure is used.
 LMOD terminates when the user-defined number of steps has been completed
 or when the user-defined number of low-energy conformations has been collected.
\end_layout

\begin_layout Standard
Note that for flexible docking calculations LMOD applies explicit translations
 and rotations of the ligand(s) on top of the low-mode perturbations.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:xmin"

\end_inset

XMIN
\end_layout

\begin_layout LyX-Code
float xmin
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

( float func(), int natm, float x[], float g[], 
\end_layout

\begin_layout LyX-Code
               float ene, float grms_out, struct xmod_opt xo);
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
Parameter list for xmin() 
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
func
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the function that computes the function value and gradient of
 the objective function to be minimized.
 
\shape italic
func()
\shape default
 must have the following argument list: 
\family typewriter
float func( float x[], float g[], int i)
\family default
where 
\family typewriter
x[]
\family default
 is the vector of the iterate, 
\family typewriter
g[]
\family default
 is the gradient and 
\family typewriter
i
\family default
 is currently ignored except when 
\family typewriter
func
\family default
 =
\family typewriter
 mme
\family default
 where 
\family typewriter
i
\family default
 is handled internally.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
natm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of atoms.
 
\series bold
NOTE:
\series default
 if 
\family typewriter
func
\family default
 is other than 
\family typewriter
mme
\family default
, 
\family typewriter
natm
\family default
 is used to pass the total number of variables of the objective function
 to be minimized.
 However, 
\family typewriter
natm
\family default
 retains its original meaning in case 
\family typewriter
func
\family default
 is a user-defined energy function for 3-dimensional (molecular) structure
 optimization.
 Make sure that the meaning of 
\family typewriter
natm
\family default
 is compatible with the setting of 
\family typewriter
mol_struct_opt
\family default
 below.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
x[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coordinate vector.
 User has to allocate memory in calling program and fill x[] with initial
 coordinates using, e.g., the setxyz_from_mol function (see sample program
 below).
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
g[] 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gradient vector.
 User has to allocate memory in calling program.
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ene
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On output, ene stores the minimized energy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
grms_out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On output, grms_out stores the gradient RMS achieved by XMIN.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:xmin"

\end_inset

Arguments for xmin().
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
Parameter list for xmin_opt
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
mol_struct_opt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
1=
\shape default
 3-dimensional molecular structure optimization.
 Any other value means general function optimization.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
maxiter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of iteration steps allowed for XMIN.
 A value of zero means single point energy calculation, no minimization.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
grms_tol 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gradient RMS threshold below which XMIN should minimize the input structure.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimization algorithm.
 See text for description.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
numdiff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Finite difference method used in TNCG for approximating the product of the
 Hessian matrix and some vector in the conjugate gradient iteration (the
 same approximation is used in LMOD, see Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:lmod1"

\end_inset

 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod1"

\end_inset

).
 1= Forward difference.
 2=Central difference.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m_lbfgs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size of the L-BFGS memory used in either L-BFGS minimization or L-BFGS precondit
ioning for TNCG.
 The value zero turns off preconditioning.
 It usually makes little sense to set the value 
\begin_inset Formula $>$
\end_inset

10.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
print_level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Amount of debugging printout.
 0= No output.
 1= Minimization details.
 2= Minimization (including conjugate gradient iteration in case of TNCG)
 and line search details.
 If 
\emph on
print_level 
\emph default
> 2, print minimization output every 
\emph on
print_level
\emph default
 steps
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
iter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 The total number of iteration steps completed by XMIN.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
xmin_time 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 CPU time in seconds used by XMIN.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
1=
\shape default
 modified Armijo 
\begin_inset CommandInset citation
LatexCommand cite
key "Shi05"
literal "true"

\end_inset

(not recommended, primarily used for testing).
\end_layout

\begin_layout Plain Layout

\shape italic
2=
\shape default
 Wolfe (after J.
 J.
 More' and D.
 J.
 Thuente).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_maxiter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of line search steps per single minimization step.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_maxatmov
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum (co-ordinate) movement per degree of freedom allowed in line search,
 range 
\shape italic
> 0
\shape default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
beta_armijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armijo beta parameter, range (0, 1).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
c_armijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armijo c parameter, range (0, 0.5).

\shape italic
 Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
mu_armijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armijo mu parameter, range [0, 2).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ftol_wolfe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.0001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wolfe ftol parameter, range (0, 0.5).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gtol_wolfe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wolfe gtol parameter, range (ftol_wolfe, 1).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_iter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 The total number of line search steps completed by XMIN.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
error_flag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 A nonzero value indicates an error.
 In case of an error XMIN will always print a descriptive error message.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:xmin-1"

\end_inset

Options for xmin_opt.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At a glance: The 
\shape italic
xmin()
\shape default
 function minimizes the energy of a molecular structure with initial coordinates
 given in the x[] array.
 On output, 
\shape italic
xmin()
\shape default
 returns the minimized energy as the function value and the coordinates
 in x[] will be updated to the minimum-energy conformation.
 The arguments to xmin() are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:xmin"

\end_inset

; the parameters in the xmin_opt structure are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:xmin-1"

\end_inset

; these should be preceded by 
\family typewriter

\begin_inset Quotes eld
\end_inset

xo.
\begin_inset Quotes erd
\end_inset


\family default
, since they are members of an 
\emph on
xmod_opt
\emph default
 struct with that name; see the sample program below to see how this works.
 
\end_layout

\begin_layout Standard
There are three types of minimizers that can be used, specified by the 
\emph on
method
\emph default
 parameter:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
method
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description

\emph on
1: 
\emph default
PRCG Polak-Ribiere conjugate gradient method, similar to the 
\shape italic
conjgrad()
\shape default
 function 
\begin_inset CommandInset citation
LatexCommand cite
key "Press89"
literal "true"

\end_inset

.
\end_layout

\begin_layout Description

\emph on
2:
\emph default
 L-BFGS Limited-memory Broyden-Fletcher-Goldfarb-Shanno quasi-Newton algorithm
 
\begin_inset CommandInset citation
LatexCommand cite
key "Liu89"
literal "true"

\end_inset

.
 L-BFGS is 2-3 times faster than PRCG mainly, because it requires significantly
 fewer line search steps than PRCG.
\end_layout

\begin_layout Description

\emph on
3:
\emph default
 lbfgs-TNCG L-BFGS preconditioned truncated Newton conjugate gradient algorithm
 
\begin_inset CommandInset citation
LatexCommand cite
key "Press89,Nocedal00"
literal "true"

\end_inset

.
 Sophisticated technique that can minimize molecular structures to lower
 energy and gradient than PRCG and L-BFGS and requires an order of magnitude
 fewer minimization steps, but L-BFGS can sometimes be faster in terms of
 total CPU time.
\end_layout

\begin_layout Description
4: Debugging option; printing analytical and numerical derivatives for compariso
n.
 Almost all failures with 
\emph on
xmin
\emph default
 can be attributed to inaccurate analytical derivatives, e.g., when SCF hasn't
 converged with a quantum based Hamiltonian.
\end_layout

\end_deeper
\begin_layout Standard
NOTE: The xmin routine can be utilized for minimizing arbitrary, user-defined
 objective functions.
 The function must be defined in a user NAB program or in any other user
 library that is linked in.
 The name of the function is passed to 
\shape italic
xmin()
\shape default
 via the 
\shape italic
func 
\shape default
argument.
\end_layout

\begin_layout Subsection

\series bold
Sample XMIN program
\end_layout

\begin_layout Standard
The following sample program, which is based on the test program txmin.nab,
 reads a molecular structure from a PDB file, minimizes it, and saves the
 minimized structure in another PDB file.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

//   XMIN reverse communication external minimization package.
\end_layout

\begin_layout Plain Layout

//   Written by Istvan Kolossvary.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "xmin_opt.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// M A I N  P R O G R A M  to carry out XMIN minimization on a molecule:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct xmin_opt xo;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule mol;
\end_layout

\begin_layout Plain Layout

int natm;
\end_layout

\begin_layout Plain Layout

float xyz[ dynamic ], grad[ dynamic ];
\end_layout

\begin_layout Plain Layout

float energy, grms;
\end_layout

\begin_layout Plain Layout

point dummy;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    xmin_opt_init( xo );  //  set up defaults (shown here)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // xo.mol_struct_opt = 1;
\end_layout

\begin_layout Plain Layout

    // xo.maxiter        = 1000;
\end_layout

\begin_layout Plain Layout

    // xo.grms_tol       = 0.05;
\end_layout

\begin_layout Plain Layout

    // xo.method         = 3;
\end_layout

\begin_layout Plain Layout

    // xo.numdiff        = 1;
\end_layout

\begin_layout Plain Layout

    // xo.m_lbfgs        = 3;
\end_layout

\begin_layout Plain Layout

    //    xo.ls_method   = 2;
\end_layout

\begin_layout Plain Layout

    //    xo.ls_maxiter  = 20;
\end_layout

\begin_layout Plain Layout

    //    xo.maxatmov    = 0.5;
\end_layout

\begin_layout Plain Layout

    //    xo.beta_armijo = 0.5;
\end_layout

\begin_layout Plain Layout

    //    xo.c_armijo    = 0.4;
\end_layout

\begin_layout Plain Layout

    //    xo.mu_armijo   = 1.0;
\end_layout

\begin_layout Plain Layout

    //    xo.ftol_wolfe  = 0.0001;
\end_layout

\begin_layout Plain Layout

    //    xo.gtol_wolfe  = 0.9;
\end_layout

\begin_layout Plain Layout

    // xo.print_level    = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    xo.maxiter     = 10;  //  non-defaults are here
\end_layout

\begin_layout Plain Layout

    xo.grms_tol    = 0.001;
\end_layout

\begin_layout Plain Layout

    xo.method      = 3;
\end_layout

\begin_layout Plain Layout

    xo.ls_maxatmov = 0.15;
\end_layout

\begin_layout Plain Layout

    xo.print_level = 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mol = getpdb( "gbrna.pdb" );
\end_layout

\begin_layout Plain Layout

    readparm( mol, "gbrna.prmtop" );
\end_layout

\begin_layout Plain Layout

    natm = mol.natoms;
\end_layout

\begin_layout Plain Layout

    allocate xyz[ 3*natm ]; allocate grad[ 3*natm ];
\end_layout

\begin_layout Plain Layout

    setxyz_from_mol( mol, NULL, xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mm_options( "ntpr=1, gb=1, kappa=0.10395, rgbmax=99., cut=99.0, diel=C
 ");
\end_layout

\begin_layout Plain Layout

    mme_init( mol, NULL, "::ZZZ", dummy, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    energy = mme( xyz, grad, 0 );
\end_layout

\begin_layout Plain Layout

    energy = xmin( mme, natm, xyz, grad, energy, grms, xo );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// E N D  M A I N
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The corresponding screen output should look similar to this.
 Note that this is fairly technical, debugging information; normally print_level
 is set to zero.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

Reading parm file (gbrna.prmtop)
\end_layout

\begin_layout Plain Layout

title:
\end_layout

\begin_layout Plain Layout

PDB 5DNB, Dickerson decamer
\end_layout

\begin_layout Plain Layout

old prmtop format => using old algorithm for GB parms
\end_layout

\begin_layout Plain Layout

      mm_options:  ntpr=99
\end_layout

\begin_layout Plain Layout

      mm_options:  gb=1
\end_layout

\begin_layout Plain Layout

      mm_options:  kappa=0.10395
\end_layout

\begin_layout Plain Layout

      mm_options:  rgbmax=99.
\end_layout

\begin_layout Plain Layout

      mm_options:  cut=99.0
\end_layout

\begin_layout Plain Layout

      mm_options:  diel=C
\end_layout

\begin_layout Plain Layout

    iter    Total    bad         vdW     elect.
     cons.
   genBorn   frms
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff:   0  -4107.50    906.22   -192.79   -137.96      0.00  -4682.97 1.93e+01
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

________________________________________________________________
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 MIN:                          It=    0  E=   -4107.50 ( 19.289)
\end_layout

\begin_layout Plain Layout

  CG:   It=    3 (  0.310)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.94735  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    1  E=   -4423.34 (  5.719)
\end_layout

\begin_layout Plain Layout

  CG:   It=    4 (  0.499)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.91413  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    2  E=   -4499.43 (  2.674)
\end_layout

\begin_layout Plain Layout

  CG:   It=    9 (  0.498)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.86829  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    3  E=   -4531.20 (  1.543)
\end_layout

\begin_layout Plain Layout

  CG:   It=    8 (  0.499)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.95556  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    4  E=   -4547.59 (  1.111)
\end_layout

\begin_layout Plain Layout

  CG:   It=    9 (  0.491)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.77247  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    5  E=   -4556.35 (  1.068)
\end_layout

\begin_layout Plain Layout

  CG:   It=    8 (  0.361)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.75150  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    6  E=   -4562.95 (  1.042)
\end_layout

\begin_layout Plain Layout

  CG:   It=    8 (  0.273)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.79565  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    7  E=   -4568.59 (  0.997)
\end_layout

\begin_layout Plain Layout

  CG:   It=    5 (  0.401)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.86051  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    8  E=   -4572.93 (  0.786)
\end_layout

\begin_layout Plain Layout

  CG:   It=    4 (  0.335)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.88096  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    9  E=   -4575.25 (  0.551)
\end_layout

\begin_layout Plain Layout

  CG:   It=   64 (  0.475)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.95860  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=   10  E=   -4579.19 (  0.515)
\end_layout

\begin_layout Plain Layout

----------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 FIN:             :-)                    E=   -4579.19 (  0.515)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first few lines are typical NAB output from mm_init() and mme().
 The output below the horizontal line comes from XMIN.
 The MIN/CG/LS blocks contain the following pieces of information.
 The MIN: line shows the current iteration count, energy and gradient RMS
 (in parentheses).
 The CG: line shows the CG iteration count and the residual in parentheses.
 The happy face :-) means convergence whereas :-( indicates that CG iteration
 encountered negative curvature and had to abort.
 The latter situation is not a serious problem, minimization can continue.
 This is just a safeguard against uphill moves.
 The LS: line shows line search information.
 "step" is the relative step with respect to the initial guess of the line
 search step.
 "it" tells the number of line search steps taken and "info" is an error
 code.
 "info" = 1 means that line searching converged with respect to sufficient
 decrease and curvature criteria whereas a non- zero value indicates an
 error condition.
 Again, an error in line searching doesn't mean that minimization necessarily
 failed, it just cannot proceed any further because of some numerical dead
 end.
 The FIN: line shows the final result with a happy face :-) if either the
 grms_tol criterion has been met or when the number of iteration steps reached
 the maxiter value.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod3"

\end_inset

LMOD
\end_layout

\begin_layout LyX-Code
float lmod
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
lmod
\end_layout

\end_inset

( int natm, float x[], float g[], float ene, float conflib[], 
\end_layout

\begin_layout LyX-Code
       float lmod_traj[], int lig_start[], int lig_end[], int lig_cent[],
 
\end_layout

\begin_layout LyX-Code
       float tr_min[], float tr_max[], float rot_min[], float rot_max[],
 
\end_layout

\begin_layout LyX-Code
       struct xmin_opt, struct xmin_opt, struct lmod_opt);
\end_layout

\begin_layout Standard
At a glance: The 
\shape italic
lmod()
\shape default
 function is similar to 
\shape italic
xmin()
\shape default
 in that it optimizes the energy of a molecular structure with initial coordinat
es given in the x[] array.
 However, the optimization goes beyond local minimization, it is a sophisticated
 conformational search procedure.
 On output, 
\shape italic
lmod()
\shape default
 returns the global minimum energy of the LMOD conformational search as
 the function value and the coordinates in x[] will be updated to the global
 minimum-energy conformation.
 Moreover, a set of the best low-energy conformations is also returned in
 the array conflib[].
 Coordinates, energy, and gradient are in NAB units.
 The parameters are given in the table below; items above the line are passed
 as parameters; the rest of the parameters are all preceded by 
\family typewriter

\begin_inset Quotes eld
\end_inset

lo.
\begin_inset Quotes erd
\end_inset


\family default
, because they are members of an 
\emph on
lmod_opt
\emph default
 struct with that name; see the sample program below to see how this works.
\end_layout

\begin_layout Standard
Also note that 
\shape italic
xmin()
\shape default
's 
\shape italic
xmin_opt
\shape default
 struct is passed to 
\shape italic
lmod()
\shape default
 as well.
 
\shape italic
lmod()
\shape default
 changes the default values of some of the 
\family typewriter

\begin_inset Quotes eld
\end_inset

xo.
\begin_inset Quotes erd
\end_inset


\family default
 parameters via the call to 
\shape italic
lmod_opt_int()
\shape default
 relative to a call to 
\shape italic
xmin_opt_init()
\shape default
, which means that in a more complex NAB program with multiple calls to
 
\shape italic
xmin()
\shape default
 and 
\shape italic
lmod()
\shape default
; make sure to always initialize and set user parameters for each and every
 XMIN and LMOD search via, respectively calling 
\shape italic
xmin_opt_init()
\shape default
 and 
\shape italic
lmod_opt_init()
\shape default
 just before the calls to 
\shape italic
xmin()
\shape default
 and 
\shape italic
lmod()
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="39" columns="3">
<features islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
natm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of atoms.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
x[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coordinate vector.
 User has to allocate memory in calling program and fill x[] with initial
 coordinates using, e.g., the setxyz_from_mol function (see sample program
 below).
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
g[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gradient vector.
 User has to allocate memory in calling program.
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ene
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On output, ene stores the global minimum energy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
conflib[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User allocated storage array where LMOD stores low-energy conformations.
 Array size = 3*natm*nconf.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_traj[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User allocated storage array where LMOD stores snapshots of the pseudo trajector
y drawn by LMOD on the potential energy surface.
 Array size = 3*natom * (nconf + 1).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lig_start[] 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The serial number(s) of the first/last atom(s) of the ligand(s).
 The number(s) should correspond to the numbering in the NAB input files.
 Note that the ligand(s) can be anywhere in the atom list, however, a single
 ligand must have continuous numbering between the corresponding lig_start
 and lig_end values.
 The arrays should be allocated in the calling program.
 Array size = nlig, but in case nlig=0 there is no need for allocating memory.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lig_end[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lig_cent[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Similar array in all respects to lig_start/end, but the serial number(s)
 define the center of rotation.
 The value zero means that the center of rotation will be the geometric
 center of gravity of the ligand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tr_min[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The range of random translation/rotation applied to individual ligand(s).
 Rotation is carried out about the origin defined by the corresponding lig_cent
 value(s).
 The angle is given in +/- degrees and the distance in angstroms.
 The particular angles and distances are randomly chosen from their respective
 ranges.
 The arrays should be allocated in the calling program.
 Array size = 
\shape italic
nlig
\shape default
, but in case 
\shape italic
nlig=0
\shape default
 there is no need to allocate memory.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tr_max[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See tr_min[], above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rot_min[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See tr_min[], above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rot_max[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See tr_min[], above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
niter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of LMOD iterations.
 Note that a single LMOD iteration involves a number of different computations
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.).
 A value of zero results in a single local minimization; like a call to
 xmin.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nmod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of low-frequency modes computed by LMOD every time such
 computation is requested.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
minim_grms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The gradient RMS convergence criterion of structure minimization.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
kmod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The definite number of randomly selected low-modes used to drive LMOD moves
 at each LMOD iteration step.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nrotran_dof
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of rotational and translational degrees of freedom.
 This is related to the number of frozen or tethered atoms in the system:
 0 atoms dof=6, 1 atom dof=3, 2 atoms dof=1, 
\begin_inset Formula $>$
\end_inset

=3 atoms dof=0.
 Default is 6, no frozen or tethered atoms.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod5"

\end_inset

, note (5).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nconf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The maximum number of low-energy conformations stored in conflib[].
 Note that the calling program is responsible for allocating memory for
 conflib[].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
energy_window
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
50.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The energy window for conformation storage; the energy of a stored structure
 will be in the interval [global_min, global_min + energy_window].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
eig_recalc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The frequency, measured in LMOD iterations, of the recalculation of eigenvectors.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ndim_arnoldi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The dimension of the ARPACK Arnoldi factorization.
 The default, zero, specifies the whole space, that is, three times the
 number of atoms.
 See note below.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_restart
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The frequency, in LMOD iterations, of updating the conflib storage, that
 is, discarding structures outside the energy window, and restarting LMOD
 with a randomly chosen structure from the low-energy pool defined by n_best_str
uct below.
 A value 
\begin_inset Formula $>$
\end_inset

maxiter will prevent LMOD from doing any restarts.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
n_best_struct
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of the lowest-energy structures found so far at a particular LMOD
 restart point.
 The structure to be used for the restart will be chosen randomly from this
 pool.
 n_best_struct = 1 allows the user to explore the neighborhood of the then
 current global minimum.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
mc_option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The Monte Carlo method.
\begin_inset Newline newline
\end_inset

1= Metropolis Monte Carlo (see rtemp below).
\begin_inset Newline newline
\end_inset

2= "Total_Quench", which means that the LMOD trajectory always proceeds
 towards the lowest lying neighbor of a particular energy well found after
 exhaustive search along all of the randomly selected kmod low-modes.
\begin_inset Newline newline
\end_inset

3= "Quick_Quench", which means that the LMOD trajectory proceeds towards
 the first neighbor found, which is lower in energy than the current point
 on the path, without exploring the remaining modes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rtemp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of RT in NAB energy units.
 This is utilized in the Metropolis criterion.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_step_size_min
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The minimum length of a single LMOD ZIG move in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_step_size_max
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
5.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The maximum length of a single LMOD ZIG move in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nof_lmod_steps
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of LMOD ZIG-ZAG moves.
 The default, zero, means that the number of ZIG-ZAG moves is not pre-defined,
 instead LMOD will attempt to cross the barrier in as many ZIG-ZAG moves
 as it is necessary.
 The criterion of crossing an energy barrier is stated above in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
 nof_lmod_steps 
\begin_inset Formula $>$
\end_inset

 0 means that multiple barriers may be crossed and LMOD can carry the molecule
 to a large distance on the potential energy surface without severely distorting
 the geometry.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_relax_grms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The gradient RMS convergence criterion of structure relaxation, see ZAG
 move in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nlig
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of ligands considered for flexible docking.
 The default, zero, means no docking.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
apply_rigdock
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The frequency, measured in LMOD iterations, of the application of rigid-body
 rotational and translational motions to the ligand(s).
 At each apply_rigdock-th LMOD iteration nof_pose_to-try rotations and translati
ons are applied to the ligand(s).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nof_poses_to_try
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of rigid-body rotational and translational motions applied to
 the ligand(s).
 Such applications occur at each apply_rigdock-th LMOD iteration.
 In case nof_pose_to_try 
\begin_inset Formula $>$
\end_inset

 1, it is always the lowest energy pose that is kept, all other poses are
 discarded.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
random_seed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
314159
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The seed of the random number generator.
 A value of zero requests hardware seeding based on the system clock.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
print_level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Amount of debugging printout.
 0= No output.
 1= Basic output.
 2= Detailed output.
 3= Copious debugging output including ARPACK details.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU time in seconds used by LMOD itself.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
aux_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU time in seconds used by auxiliary routines.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
error_flag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A nonzero value indicates an error.
 In case of an error LMOD will always print a descriptive error message.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Notes on the 
\emph on
ndim_arnoldi
\emph default
 parameter: Basically, the ARPACK package used for the eigenvector calculations
 solves multiple "small" eigenvalue problems instead of a single "large"
 problem, which is the diagonalization of the three times the number of
 atoms by three times the number of atoms Hessian matrix.
 This parameter is the user specified dimension of the "small" problem.
 The allowed range is nmod + 1 
\begin_inset Formula $<$
\end_inset

= ndim_arnoldi 
\begin_inset Formula $<$
\end_inset

= 3*natm.
 The default means that the "small" problem and the "large" problem are
 identical.
 This is the preferred, i.e., fastest, calculation for small to medium size
 systems, because ARPACK is guaranteed to converge in a single iteration.
 The ARPACK calculation scales with three times the number of atoms times
 the Arnoldi dimension squared and, therefore, for larger molecules there
 is an optimal ndim_arnoldi much less than three times the number of atoms
 that converges much faster in multiple iterations (possibly thousands or
 tens of thousands of iterations).
 The key to good performance is to select ndim_arnoldi such that all the
 ARPACK storage fits in memory.
 For proteins, ndim_arnoldi =1000 is generally a good value, but often a
 very small 
\begin_inset Formula $\sim$
\end_inset

50-100 Arnoldi dimension provides the fastest net computational cost with
 very many iterations.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod4"

\end_inset

Sample LMOD program
\end_layout

\begin_layout Standard
The following sample program, which is based on the test program tlmod.nab,
 reads a molecular structure from a PDB file, runs a short LMOD search,
 and saves the low-energy conformations in PDB files.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

//   LMOD reverse communication external minimization package.
\end_layout

\begin_layout Plain Layout

//   Written by Istvan Kolossvary.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "xmin_opt.h"
\end_layout

\begin_layout Plain Layout

#include "lmod_opt.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// M A I N  P R O G R A M  to carry out LMOD simulation on a molecule/complex:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct xmin_opt xo;
\end_layout

\begin_layout Plain Layout

struct lmod_opt lo;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule mol;
\end_layout

\begin_layout Plain Layout

int   natm;
\end_layout

\begin_layout Plain Layout

float energy;
\end_layout

\begin_layout Plain Layout

int lig_start[ dynamic ], lig_end[ dynamic ], lig_cent[ dynamic ];
\end_layout

\begin_layout Plain Layout

float xyz[ dynamic ], grad[ dynamic ], conflib[ dynamic ], lmod_trajectory[
 dynamic ];
\end_layout

\begin_layout Plain Layout

float tr_min[ dynamic ], tr_max[ dynamic ], rot_min[ dynamic ], rot_max[
 dynamic ];
\end_layout

\begin_layout Plain Layout

float glob_min_energy;
\end_layout

\begin_layout Plain Layout

point dummy;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    lmod_opt_init( lo, xo );   //  set up defaults
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    lo.niter          = 3;     //  non-default options are here
\end_layout

\begin_layout Plain Layout

    lo.mc_option      = 2;
\end_layout

\begin_layout Plain Layout

    lo.nof_lmod_steps = 5;
\end_layout

\begin_layout Plain Layout

    lo.random_seed    = 99;
\end_layout

\begin_layout Plain Layout

    lo.print_level    = 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    xo.ls_maxatmov    = 0.15;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mol = getpdb( "trpcage.pdb" );
\end_layout

\begin_layout Plain Layout

    readparm( mol, "trpcage.top" );
\end_layout

\begin_layout Plain Layout

    natm = mol.natoms;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    allocate xyz[ 3*natm ]; allocate grad[ 3*natm ];
\end_layout

\begin_layout Plain Layout

    allocate conflib[ lo.nconf * 3*natm ];
\end_layout

\begin_layout Plain Layout

    allocate lmod_trajectory[ (lo.niter+1) * 3*natm ];
\end_layout

\begin_layout Plain Layout

    setxyz_from_mol( mol, NULL, xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mm_options( "ntpr=5000, gb=0, cut=999.0, nsnb=9999, diel=R ");
\end_layout

\begin_layout Plain Layout

    mme_init( mol, NULL, "::ZZZ", dummy, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mme( xyz, grad, 1 );
\end_layout

\begin_layout Plain Layout

    glob_min_energy = lmod( natm, xyz, grad, energy,
\end_layout

\begin_layout Plain Layout

          conflib, lmod_trajectory, lig_start, lig_end, lig_cent,
\end_layout

\begin_layout Plain Layout

          tr_min, tr_max, rot_min, rot_max, xo, lo );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    printf( "
\backslash
nGlob.
 min.
 E         = %12.3lf kcal/mol
\backslash
n", glob_min_energy );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// E N D  M A I N
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The corresponding screen output should look similar to this.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

Reading parm file (trpcage.top)
\end_layout

\begin_layout Plain Layout

title:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      mm_options:  ntpr=5000
\end_layout

\begin_layout Plain Layout

      mm_options:  gb=0
\end_layout

\begin_layout Plain Layout

      mm_options:  cut=999.0
\end_layout

\begin_layout Plain Layout

      mm_options:  nsnb=9999
\end_layout

\begin_layout Plain Layout

      mm_options:  diel=R
\end_layout

\begin_layout Plain Layout

________________________________________________________________
\end_layout

\begin_layout Plain Layout

                  Low-Mode Simulation
\end_layout

\begin_layout Plain Layout

---------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

     1    E =     -118.117 ( 0.054)  Rg =    5.440
\end_layout

\begin_layout Plain Layout

  1  / 6  E =     -89.2057 ( 0.090)  Rg =    2.625  rmsd=  8.240  p= 0.0000
\end_layout

\begin_layout Plain Layout

  1  / 8  E =      -51.682 ( 0.097)  Rg =    5.399  rmsd=  8.217  p= 0.0000
\end_layout

\begin_layout Plain Layout

  3  /12  E =     -120.978 ( 0.091)  Rg =    3.410  rmsd=  7.248  p= 1.0000
\end_layout

\begin_layout Plain Layout

  3  /10  E =     -106.292 ( 0.099)  Rg =    5.916  rmsd=  4.829  p= 0.0004
\end_layout

\begin_layout Plain Layout

  4  / 6  E =     -106.788 ( 0.095)  Rg =    4.802  rmsd=  3.391  p= 0.0005
\end_layout

\begin_layout Plain Layout

  4  / 3  E =     -111.501 ( 0.097)  Rg =    5.238  rmsd=  2.553  p= 0.0121
\end_layout

\begin_layout Plain Layout

---------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

     2    E =     -120.978 ( 0.091)  Rg =    3.410
\end_layout

\begin_layout Plain Layout

  1  / 4  E =     -137.867 ( 0.097)  Rg =    2.842  rmsd=  5.581  p= 1.0000
\end_layout

\begin_layout Plain Layout

  1  / 9  E =     -130.025 ( 0.100)  Rg =    4.282  rmsd=  5.342  p= 1.0000
\end_layout

\begin_layout Plain Layout

  4  / 3  E =     -123.559 ( 0.089)  Rg =    3.451  rmsd=  1.285  p= 1.0000
\end_layout

\begin_layout Plain Layout

  4  / 4  E =     -107.253 ( 0.095)  Rg =    3.437  rmsd=  2.680  p= 0.0001
\end_layout

\begin_layout Plain Layout

  5  / 5  E =     -113.119 ( 0.096)  Rg =    3.136  rmsd=  2.074  p= 0.0053
\end_layout

\begin_layout Plain Layout

  5  / 4  E =       -134.1 ( 0.091)  Rg =    3.141  rmsd=  2.820  p= 1.0000
\end_layout

\begin_layout Plain Layout

---------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

     3    E =     -130.025 ( 0.100)  Rg =    4.282
\end_layout

\begin_layout Plain Layout

  1  / 8  E =     -150.556 ( 0.093)  Rg =    3.347  rmsd=  5.287  p= 1.0000
\end_layout

\begin_layout Plain Layout

  1  / 4  E =     -123.738 ( 0.079)  Rg =    4.218  rmsd=  1.487  p= 0.0151
\end_layout

\begin_layout Plain Layout

  2  / 8  E =     -118.254 ( 0.095)  Rg =    3.093  rmsd=  5.296  p= 0.0004
\end_layout

\begin_layout Plain Layout

  2  / 7  E =     -115.027 ( 0.090)  Rg =    4.871  rmsd=  4.234  p= 0.0000
\end_layout

\begin_layout Plain Layout

  4  / 7  E =     -128.905 ( 0.099)  Rg =    4.171  rmsd=  2.113  p= 0.4739
\end_layout

\begin_layout Plain Layout

  4  /11  E =      -133.85 ( 0.099)  Rg =    3.290  rmsd=  4.464  p= 1.0000
\end_layout

\begin_layout Plain Layout

__________________________________________________
\end_layout

\begin_layout Plain Layout

 Full list:
\end_layout

\begin_layout Plain Layout

       1  E =     -150.556 / 1  Rg =    3.347
\end_layout

\begin_layout Plain Layout

       2  E =     -137.867 / 1  Rg =    2.842
\end_layout

\begin_layout Plain Layout

       3  E =       -134.1 / 1  Rg =    3.141
\end_layout

\begin_layout Plain Layout

       4  E =      -133.85 / 1  Rg =    3.290
\end_layout

\begin_layout Plain Layout

       5  E =     -130.025 / 1  Rg =    4.282
\end_layout

\begin_layout Plain Layout

       6  E =     -128.905 / 1  Rg =    4.171
\end_layout

\begin_layout Plain Layout

       7  E =     -123.738 / 1  Rg =    4.218
\end_layout

\begin_layout Plain Layout

       8  E =     -123.559 / 1  Rg =    3.451
\end_layout

\begin_layout Plain Layout

       9  E =     -120.978 / 1  Rg =    3.410
\end_layout

\begin_layout Plain Layout

      10  E =     -118.254 / 1  Rg =    3.093
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Glob.
 min.
 E         =     -150.556 kcal/mol
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first few lines come from 
\shape italic
mm_init()
\shape default
 and 
\shape italic
mme()
\shape default
.
 The screen output below the horizontal line originates from LMOD.
 Each LMOD-iteration is represented by a multi-line block of data numbered
 in the upper left corner by the iteration count.
 Within each block, the first line displays the energy and, in parentheses,
 the gradient RMS as well as the radius of gyration (assigning unit mass
 to each atom), of the current structure along the LMOD pseudo simulation-path.
 The successive lines within the block provide information about the LMOD
 ZIG-ZAG moves (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

).
 The number of lines is equal to 2 times kmod (2x3 in this example).
 Each selected mode is explored in both directions, shown in two separate
 lines.
 The leftmost number is the serial number of the mode (randomly selected
 from the set of nmod modes) and the number after the slash character gives
 the number of ZIG-ZAG moves taken.
 This is followed by, respectively, the minimized energy and gradient RMS,
 the radius of gyration, the RMSD distance from the base structure, and
 the Boltzmann probability with respect to the energy of the base structure
 and rtemp, of the minimized structure at the end of the ZIG-ZAG path.
 Note that exploring the same mode along both directions can result in two
 quite different structures.
 Also note that the number of ZIG-ZAG moves required to cross the energy
 barrier (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

) in different directions can vary quite a bit, too.
 Occasionally, an exclamation mark next to the energy (!E = ...) denotes a
 structure that could not be fully minimized.
\end_layout

\begin_layout Standard
After finishing all the computation within a block, the corresponding LMOD
 step is completed by selecting one of the ZIG-ZAG endpoint structures as
 the base structure of the next LMOD iteration.
 The selection is based on the 
\shape italic
mc_option
\shape default
 and the Boltzmann probability.
 The LMOD pseudo simulation-path is defined by the series of these 
\shape italic
mc_option
\shape default
-selected structures and it is stored in 
\shape italic
lmod_traj[]
\shape default
.
 Note that the sample program saves these structures in a multi- PDB disk
 file called 
\shape italic
lmod_trajectory.pdb
\shape default
.
 The final section of the screen output lists the nconf lowest energy structures
 found during the LMOD search.
 Note that some of the lowest energy structures are not necessarily included
 in the 
\shape italic
lmod_traj[]
\shape default
 list, as it depends on the 
\shape italic
mc_option
\shape default
 selection.
 The list displays the energy, the number of times a particular conformation
 was found (increasing numbers are somewhat indicative of a more complete
 search), and the radius of gyration.
 The glob.
 min.
 energy is printed from the sample NAB program, not from LMOD.
 The sample program in 
\emph on
$AMBERHOME/AmberTools/examples/nab/lmod_dock
\emph default
 shows how one could write the top ten low-energy structures in separate,
 numbered PDB files.
 
\end_layout

\begin_layout Standard
As a final note, it is instructive to be aware of a simple safeguard that
 LMOD applies .
 A copy of the 
\shape italic
conflib[]
\shape default
 array is saved periodically in a binary disk file called 
\shape italic
conflib.dat
\shape default
.
 Since LMOD searches might run for a long time, in case of a crash low-energy
 structures can be recovered from this file.
 The format of 
\shape italic
conflib.dat
\shape default
 is as follows.
 Each conformation is represented by 3 numbers (double energy, double radius
 of gyration, and int number of times found), followed by the double (x,
 y, z) coordinates of the atoms.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod5"

\end_inset

Tricks of the trade of running LMOD searches
\end_layout

\begin_layout Enumerate
The AMBER atom types HO, HW, and ho all have zero van der Waals parameters
 in all of the AMBER (and some other) force fields.
 Corresponding Aij and Bij coefficients in the PRMTOP file are set to zero.
 This means there is no repulsive wall to prevent two oppositely charged
 atoms, one being of type HO, HW or ho, to fuse as a result of the ever
 decreasing electrostatic energy as they come closer and closer to each
 other.
 This potential problem is rarely manifest in molecular dynamics simulations,
 but it presents a nuisance when running LMOD searches.
 The problem is local minimization, especially "aggressive" TNCG minimization
 (XMIN xo.method=3) that can easily result in atom fusion.
 Therefore, before running an LMOD simulation, the PRMTOP file (let's call
 it prmtop.in) must be processed by running the script "lmodprmtop prmtop.in
 prmtop.out".
 This script will replace all the repulsive Aij coefficients set to zero
 in prmtop.in with a high value of 1e03 in prmtop.out in order to re-create
 the van der Waals wall.
 It is understood that this procedure is parameter fudging; however, note
 that the primary goal of using LMOD is the quick generation of approximate,
 low-energy structures that can be further refined by high-accuracy MD.
\end_layout

\begin_layout Enumerate
LMOD requires that the potential energy surface is continuous everywhere
 to a great degree.
 Therefore, always use a distance dependent dielectric constant in mm_options
 when running searches in vacuo, or use GB solvation (note that GB calculations
 will be slow), and always apply a large cut-off.
 It does make sense to run quick and dirty LMOD searches in vacuo to generate
 low-energy starting structures for MD runs.
 Note that the most likely symptom of discontinuities causing a problem
 is when your NAB program utilizing LMOD is grabbing CPU time, but the LMOD
 search does not seem to progress.
 This is the result of NaN's that often can be seen when print_level is
 set to 
\begin_inset Formula $>$
\end_inset

 0.
\end_layout

\begin_layout Enumerate
LMOD is NOT INTENDED to be used with explicit water models and periodic
 boundary conditions.
 Although explicit-water solvation representation is not recommended, LMOD
 docking can be readily used with crystallographic water molecules as ligands.
\end_layout

\begin_layout Enumerate
Conformations in the conflib and lmod_trajectory files can have very different
 orientations.
 One trick to keep them in a common orientation is to restrain the position
 of, e.g., a single benzene ring.
 This will ensure that the molecule cannot be translated or rotated as a
 whole.
 However, when applying this trick you should set nrotran_dof = 0.
\end_layout

\begin_layout Enumerate
A subset of the atoms of a molecular system can be frozen or tethered/restrained
 in NAB by two different methods.
 Atoms can either be frozen by using the first atom expression argument
 in 
\emph on
mme_init()
\emph default
 or restrained by using the second atom expression argument and the reference
 coordinate array in 
\emph on
mme_init()
\emph default
 along with the 
\emph on
wcons
\emph default
 option in mm_options.
 LMOD searches, especially docking calculations can be run much faster if
 parts of the molecular system can be frozen, because the effective degrees
 of freedom is determined by the size of the flexible part of the system.
 Application of frozen atoms means that a much smaller number of moving
 atoms are moving in the fixed, external potential of the frozen atoms.
 The tethered atom model is expected to give similar results to the frozen
 atom model, but note that the number of degrees of freedom and, therefore,
 the computational cost of a tethered calculation is comparable to that
 of a fully unrestrained system.
 However, the eigenvector calculations are likely to converge faster with
 the tethered systems.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:hcp"

\end_inset

The Generalized Born with Hierarchical Charge Partitioning (GB-HCP)
\end_layout

\begin_layout Standard
GB-HCP (and its latest version, GB-HCPO
\begin_inset CommandInset citation
LatexCommand citep
key "IzadiHCPO"
literal "true"

\end_inset

 ) is a multi-scale, yet fully atomistic, approach to perform MD simulations
 based on the generalized Born model, mainly intended for large and very
 large structures.
 For example, it was used to refine a 1.1M atom structure of 30nm chromatin
 fiber
\begin_inset CommandInset citation
LatexCommand citep
key "IzadiHCPO"
literal "true"

\end_inset

.
 Compared to the reference GB model without further approximations, GB-HCP
 can deliver up to 3 orders of magnitude speedup, depending on structure
 size.
 In contrast to cutoff GB that completely ignores the effect of long range
 electrostatic interactions beyond a certain distance, which can lead to
 serious artifacts under many circumstances such as for highly charged systems,
 GB-HCP takes into account the long range electrostatic interactions by
 using N log N Hierarchical Charge Partitioning (HCP) approximation 
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan2010Nlogn,Anandakrishnan2011Nlogn"
literal "true"

\end_inset

.
 Based on this method, structures are partitioned into multiple hierarchical
 levels of components using the natural organization of the biomolecular
 structures - atoms, groups, chains, and complexes.
 The charge distribution for each of these components is approximated by
 1 (hcp=1) or 2 (hcp=2 and hcp=4) charges.
 Setting hcp=4 (strongly recommended) uses GB-HCPO, which takes advantage
 of the Optimal Point Charge Approximation approach for placing the approximate
 point charges
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan13"
literal "true"

\end_inset

: two point charges are placed so that the three lowest order multipole
 moments of the reference charge distribution are optimally reproduced.
 The approximate charges are then used for computing electrostatic interactions
 with distant components while the full set of atomic charges are used for
 nearby components (Figure 40.1).
 The HCP can be used for generalized Born (gb=1-8) simulations, for gas
 phase (dielec=C) and distant dependent dielectric (dielec=R/RL), with or
 without Langevin dynamics (gamma_ln>0).
\end_layout

\begin_layout Standard
The usage of the new feature (hcp=4) requires that the separation between
 the two charges used to approximate the uncharged components is specified
 by dhcp.
 The value of dhcp is empirically adjusted so that the RMS error in force,
 compared to the GB without further approximation, is minimized.
 Our testing on a various set of structures suggests that dhcp=0.25 is optimal
 for many systems.
 However, if further accuracy is desired for specific systems, the value
 for dhcp can be further optimized within the range of 0.1 and 0.4 following
 the steps below.
 To find the optimal value for hcp, one time step simulation for the starting
 configuration of the structure can be performed using the GB model without
 approximation (hcp=0), and with e_debug=1setting, that automatically prints
 out the forces on each atom into a text file called reference.frc.
 Rename reference.frc to exact.frc.
 Then, run one step of the starting configuration of the structure using
 the GB-HCP (hcp=4) by setting the dhcp parameter within the range of 0.1
 and 0.4 in increments of 0.05.
 The reference.frc file produced for each value of dhcp can be compared to
 the exact.frc to compute the RMS error in force.
 The following command line computes the RMS error:
\end_layout

\begin_layout LyX-Code

\size footnotesize
paste exact.frc reference.frc | awk '{x+=($9-$20)^2+($10-$21)^2+($11-$22)^2}END{pr
int sqrt(x/NR)}'
\end_layout

\begin_layout Standard
The optimal value for dhcp is the one that results in minimum RMS error
 in the force.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fighcp"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
The HCP threshold distance.
 For the level 1 approximation shown here, groups within the threshold distance
 are treated exactly using atomic charges, while groups beyond the threshold
 distance are approximated by a small number of charges, e.g.
 1 charge for hcp=1 shown here.
\end_layout

\end_inset


\begin_inset Graphics
	filename illust_hcp.eps
	width 12cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Level 1 HCP approximation
\end_layout

\begin_layout Standard
The HCP option can now be used with one level of approximation (groups)
 using NAB molecular dynamics scripts.
 No additional manipulation of the input structure files is required for
 one level of approximation.
 For an example see AmberTools/examples/hcp/2trx.nab.
 The level 1 approximation is recommended for single domain and small (<
 10,000 atoms) multi-domain structures.
 Speedups of 2x-10x can be realized using the level 1 approximation, depending
 on structure size.
 
\end_layout

\begin_layout Subsection
Level 2 and 3 HCP approximation
\end_layout

\begin_layout Standard
For larger multi-domain structures higher levels of approximations (chains
 and complexes) can be used to achieve up to 3 orders of magnitude speedups,
 depending on structure size.
 The following additional steps are required to include information about
 these higher level components in the prmtop file.
 For an example see AmberTools/examples/hcp/1kx5.nab.
 A fully working example (including the MD run scripts) of a 3 level partitionin
g of a giant structure, one million atom chromatin fiber, can be found at
 http://people.cs.vt.edu/onufriev/software.php.
 
\end_layout

\begin_layout Enumerate
Ensure the pdb file identifies the higher level structures: Chains (level
 2) separated by TER, and Complexes (level 3) separated by REMARK END-OF-COMPLEX
: 
\begin_inset Newline newline
\end_inset

...
 
\begin_inset Newline newline
\end_inset

ATOM ...
 
\begin_inset Newline newline
\end_inset

TER (end of chain) 
\begin_inset Newline newline
\end_inset

ATOM ...
\begin_inset Newline newline
\end_inset

...
\begin_inset Newline newline
\end_inset

ATOM ...
\begin_inset Newline newline
\end_inset

TER (end of chain) 
\begin_inset Newline newline
\end_inset

REMARK END-OF-COMPLEX 
\begin_inset Newline newline
\end_inset

ATOM ...
\end_layout

\begin_layout Enumerate
Execute hcp_getpdb to generate prmtop entries for HCP: hcp_getpdb pdb-filename
 hcp-prmtop
\end_layout

\begin_layout Enumerate
Concatenate the HCP prmtop entries to the end of the standard prmtop file
 generated by LEaP: cat prmtop-file hcp-prmtop > new-prmtop
\end_layout

\begin_layout Enumerate
Use this new prmtop file in the NAB molecular dynamics scripts instead of
 the prmtop file generated by LEaP
\end_layout

\begin_layout Chapter

\series bold
NAB: Introduction
\end_layout

\begin_layout Standard
Nucleic acid builder (
\family sans
nab
\family default
) is a high-level language that facilitates manipulations of macromolecules
 and their fragments.
 
\family sans
nab
\family default
 uses a C-like syntax for variables, expressions and control structures
 (
\family sans
if
\family default
, 
\family sans
for
\family default
, 
\family sans
while
\family default
) and has extensions for operating on molecules (new types and a large number
 of builtins for providing the necessary operations).
 We expect 
\family sans
nab
\family default
 to be useful in model building and coordinate manipulation of proteins
 and nucleic acids, ranging in size from fairly small systems to the largest
 systems for which an atomic level of description makes good computational
 sense.
 As a programming language, it is not a solution or program in itself, but
 rather provides an environment that eases many of the bookkeeping tasks
 involved in writing programs that manipulate three-dimensional structural
 models.
\end_layout

\begin_layout Standard
The current implementation incorporates the following main features:
\end_layout

\begin_layout Enumerate
Objects such as points, atoms, residues, strands and molecules can be referenced
 and manipulated as named objects.
 The internal manipulations involved in operations like merging several
 strands into a single molecule are carried out automatically; in most cases
 the programmer need not be concerned about the internal data structures
 involved.
\end_layout

\begin_layout Enumerate
Rigid body transformations of molecules or parts of molecules can be specified
 with a fairly high-level set of routines.
 This functionality includes rotations and translations about particular
 axis systems, least-squares atomic superposition, and manipulations of
 coordinate frames that can be attached to particular atomic fragments.
\end_layout

\begin_layout Enumerate
Additional coordinate manipulation is achieved by a tight interface to distance
 geometry methods.
 This allows allows relationships that can be defined in terms of internal
 distance constraints to be realized in three-dimensional structural models.
 
\family sans
nab
\family default
 includes subroutines to manipulate distance bounds in a convenient fashion,
 in order to carry out tasks such as working with fragments within a molecule
 or establishing bounds based on model structures.
\end_layout

\begin_layout Enumerate
Force field calculations (
\begin_inset Formula $e.g.$
\end_inset

 molecular dynamics and minimization) can be carried out with an implementation
 of the AMBER force field.
 This works in both three and four dimensions, but periodic simulations
 are not (yet) supported.
 However, the generalized Born models implemented in Amber are also implemented
 here, which allows many interesting simulations to be carried out without
 requiring periodic boundary conditions.
 The force field can be used to carry out minimization, molecular dynamics,
 or normal mode calculations.
 Conformational searching and docking can be carried out using a "low-mode"
 (LMOD) procedure that performs sampling exploring the potential energy
 surface along low-frequency vibrational directions.
\end_layout

\begin_layout Enumerate

\family sans
nab
\family default
 also implements a form of regular expressions that we call 
\shape italic
atom regular expressions
\shape default
, which provide a uniform and convenient method for working on parts of
 molecules.
\end_layout

\begin_layout Enumerate
Many of the general programming features of the 
\shape italic
awk
\shape default
 language have been incorporated in 
\family sans
nab
\family default
.
 These include regular expression pattern matching, 
\shape italic
hashedarrays
\shape default
 
\shape italic
\emph on
(i.e., arrays with strings as indices), the splitting of strings into fields,
 and simplified string manipulations.
\end_layout

\begin_layout Enumerate
There are built-in procedures for linking 
\family sans
nab
\family default
 routines to other routines written in C or Fortran, including access to
 most library routines normally available in system math libraries.
\end_layout

\begin_layout Standard
Our hope is that 
\family sans
nab
\family default
 will serve to formalize the step-by-step process that is used to build
 complex model structures, and will facilitate the management and use of
 higher level symbolic constraints.
 Writing a program to create a structure forces more of the model's assumptions
 to be explicit in the program itself.
 And an 
\family sans
nab
\family default
 description can serve as a way to show a model's salient features, much
 like helical parameters are used to characterize duplexes.
\end_layout

\begin_layout Standard
This chapters introduces the language through a series of sample programs,
 and illustrate the programming interfaces provided.
 The examples are chosen not only to show the syntax of the language, but
 also to illustrate potential approaches to the construction of some unusual
 nucleic acids, including DNA double- and triple-helices, RNA pseudoknots,
 four-arm junctions, and DNA-protein interactions.
 Subsequent chapters give a more formal and careful description of the requireme
nts of the language itself.
\end_layout

\begin_layout Standard
The basic literature reference for the code is T.
 Macke and D.A.
 Case.
 Modeling unusual nucleic acid structures.
 In 
\shape italic
Molecular Modeling of Nucleic Acids
\shape default
, N.B.
 Leontes and J.
 SantaLucia, Jr., eds.
 (Washington, DC: American Chemical Society, 1998), pp.
 379-393.
 Users are requested to include this citation in papers that make use of
 NAB.
\end_layout

\begin_layout Standard
The authors thank Jarrod Smith, Garry Gippert, Paul Beroza, Walter Chazin,
 Doree Sitkoff and Vickie Tsui for advice and encouragement.
 Special thanks to Neill White (who helped in updating documentation, in
 preparing the distance geometry database, and in testing and porting portions
 of the code), and to Will Briggs (who wrote the fiber-diffraction routines).
 Thanks also to Chris Putnam and M.L.
 Dodson for bug reports.
\end_layout

\begin_layout Section

\series bold
Background
\end_layout

\begin_layout Standard
Using a computer language to model polynucleotides follows logically from
 the fundamental nature of nucleic acids, which can be described as 
\begin_inset Quotes eld
\end_inset

conflicted
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

contradictory
\begin_inset Quotes erd
\end_inset

 molecules.
 Each repeating unit contains seven rotatable bonds (creating a very flexible
 backbone), but also contains a rigid, planar base which can participate
 in a limited number of regular interactions, such as base pairing and stacking.
 The result of these opposing tendencies is a family of molecules that have
 the potential to adopt a virtually unlimited number of conformations, yet
 have very strong preferences for regular helical structures and for certain
 types of loops.
\end_layout

\begin_layout Standard
The controlled flexibility of nucleic acids makes them difficult to model.
 On one hand, the limited range of regular interactions for the bases permits
 the use of simplified and more abstract geometric representations.
 The most common of these is the replacement of each base by a plane, reducing
 the representation of a molecule to the set of transformations that relate
 the planes to each other.
 On the other hand, the flexible backbone makes it likely that there are
 entire families of nucleic acid structures that satisfy the constraints
 of any particular modeling problem.
 Families of structures must be created and compared to the model's constraints.
 From this we can see that modeling nucleic acids involves not just chemical
 knowledge but also three processes-abstraction, iteration and testing-that
 are the basis of programming.
\end_layout

\begin_layout Standard
Molecular computation languages are not a new idea.
 Here we briefly describe some past approaches to nucleic acid modeling,
 to provide a context for 
\family sans
nab.
\end_layout

\begin_layout Subsection

\series bold
Conformation build-up procedures
\end_layout

\begin_layout Standard
MC-SYM
\begin_inset CommandInset citation
LatexCommand citep
key "Major91,Gautheret93,Turcotte95"
literal "true"

\end_inset

 is a high level molecular description language used to describe single
 stranded RNA molecules in terms of functional constraints.
 It then uses those constraints to generate structures that are consistent
 with that description.
 MC-SYM structures are created from a small library of conformers for each
 of the four nucleotides, along with transformation matrices for each base.
 Building up conformers from these starting blocks can quickly generate
 a very large tree of structures.
 The key to MC-SYM's success is its ability to prune this tree, and the
 user has considerable flexibility in designing this pruning process.
\end_layout

\begin_layout Standard
In a related approach, Erie 
\shape italic
et al.
\shape default

\begin_inset CommandInset citation
LatexCommand cite
key "Erie93"
literal "true"

\end_inset

 used a Monte-Carlo build-up procedure based on sets of low energy dinucleotide
 conformers to construct longer low energy single stranded sequences that
 would be suitable for incorporation into larger structures.
 Sets of low energy dinucleotide conformers were created by selecting one
 value from each of the sterically allowed ranges for the six backbone torsion
 angles and 
\begin_inset Formula $\chi$
\end_inset

.
 Instead of an exhaustive build- up search over a small set of conformers,
 this method samples a much larger region of conformational space by randomly
 combining members of a larger set of initial conformers.
 Unlike strict build-up procedures, any member of the initial set is allowed
 to follow any other member, even if their corresponding torsion angles
 do not exactly match, a concession to the extreme flexibility of the nucleic
 acid backbone.
 A key feature determined the probabilities of the initial conformers so
 that the probability of each created structure accurately reflected its
 energy.
\end_layout

\begin_layout Standard
Tung and Carter
\begin_inset CommandInset citation
LatexCommand citep
key "Tung94,Carter96"
literal "true"

\end_inset

 have used a reduced coordinate system in the 
\family sans
NAMOT
\family default
 (nucleic acid modeling tool) program to rotation matrices that build up
 nucleic acids from simplified descriptions.
 Special procedures allow base-pairs to be preserved during deformations.
 This procedure allows simple algorithmic descriptions to be constructed
 for non-regular structures like intercalation sites, hairpins, pseudoknots
 and bent helices.
\end_layout

\begin_layout Subsection

\series bold
Base-first strategies
\end_layout

\begin_layout Standard
An alternative approach that works well for some problems is the "base-first"
 strategy, which lays out the bases in desired locations, and attempts to
 find conformations of the sugar-phosphate backbone to connect them.
 Rigid-body transformations often provide a good way to place the bases.
 One solution to the backbone problem would be to determine the relationship
 between the helicoidal parameters of the bases and the associated backbone/suga
r torsions.
 Work along these lines suggests that the relationship is complicated and
 non-linear.
\begin_inset CommandInset citation
LatexCommand cite
key "Zhurkin78"
literal "true"

\end_inset

 However, considerable simplification can be achieved if instead of using
 the complete relationship between all the helicoidal parameters and the
 entire backbone, the problem is limited to describing the relationship
 between the helicoidal parameters and the backbone/sugar torsion angles
 of single nucleotides and then using this information to drive a constraint
 minimizer that tries to connect adjacent nucleotides.
 This is the approach used in JUMNA,
\begin_inset CommandInset citation
LatexCommand citep
key "Lavery95"
literal "true"

\end_inset

 which decomposes the problem of building a model nucleic acid structure
 into the constraint satisfaction problem of connecting adjacent flexible
 nucleotides.
 The sequence is decomposed into 3'-nucleotide monophosphates.
 Each nucleotide has as independent variables its six helicoidal parameters,
 its glycosidic torsion angle, three sugar angles, two sugar torsions and
 two backbone torsions.
 JUMNA seeks to adjust these independent variables to satisfy the constraints
 involving sugar ring and backbone closure.
\end_layout

\begin_layout Standard
Even constructing the base locations can be a non-trivial modeling task,
 especially for non-standard structures.
 Recognizing that coordinate frames should be chosen to provide a simple
 description of the transformations to be used, Gabarro-Arpa 
\shape italic
et al.
\shape default

\begin_inset CommandInset citation
LatexCommand citep
key "Gabarro-Arpa92"
literal "true"

\end_inset

 devised 
\begin_inset Quotes eld
\end_inset

Object Command Language
\begin_inset Quotes erd
\end_inset

 (OCL), a small computer language that is used to associate parts of molecules
 called objects, with arbitrary coordinate frames defined by sets of their
 atoms or numerical points.
 OCL can 
\begin_inset Quotes eld
\end_inset

link
\begin_inset Quotes erd
\end_inset

 objects, allowing other objects' positions and orientations to be described
 in the frame of some reference object.
 Information describing these frames and links is written out and used by
 the program MORCAD
\begin_inset CommandInset citation
LatexCommand citep
key "LeBret91"
literal "true"

\end_inset

 which does the actual object transformations.
\end_layout

\begin_layout Standard
OCL contains several elements of a molecular modeling language.
 Users can create and operate on sets of atoms called objects.
 Objects are built by naming their component atoms and to simplify creation
 of larger objects, expressions, 
\family sans
IF
\family default
 statements, an iterated 
\family sans
FOR
\family default
 loop and limited I/O are provided.
 Another nice feature is the equivalence between a literal 3-D point and
 the position represented by an atom's name.
 OCL includes numerous built-in functions on 3-vectors like the dot and
 cross products as well as specialized molecular modeling functions like
 creating a vector that is normal to an object.
 However, OCL is limited because these language elements can only be assembled
 into functions that define coordinate frames for molecules that will be
 operated on by MORCAD.
 Functions producing values of other data types and stand-alone OCL programs
 are not possible.
\end_layout

\begin_layout Section

\series bold
Methods for structure creation
\end_layout

\begin_layout Standard
As a structure-generating tool, 
\family sans
nab
\family default
 provides three methods for building models.
 They are rigid-body transformations, metric matrix distance geometry, and
 molecular mechanics.
 The first two methods are good initial methods, but almost always create
 structures with some distortion that must be removed.
 On the other hand, molecular mechanics is a poor initial method but very
 good at refinement.
 Thus the three methods work well together.
\end_layout

\begin_layout Subsection

\shape italic
\emph on
Rigid-body transformations
\end_layout

\begin_layout Standard
Rigid-body transformations create model structures by applying coordinate
 transformations to members of a set of standard residues to move them to
 new positions and orientations where they are incorporated into the growing
 model structure.
 The method is especially suited to helical nucleic acid molecules with
 their highly regular structures.
 It is less satisfactory for more irregular structures where internal rearrangem
ent is required to remove bad covalent or non-bonded geometry, or where
 it may not be obvious how to place the bases.
 Details are given in Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:NABrigid"

\end_inset

.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses the 
\family sans
matrix
\family default
 type to hold a 4
\begin_inset Formula $\times$
\end_inset

4 transformation matrix.
 Transformations are applied to residues and molecules to move them into
 new orientations or positions.
 
\family sans
nab
\family default
 does 
\shape italic
not
\shape default
 require that transformations applied to parts of residues or molecules
 be chemically valid.
 It simply transforms the coordinates of the selected atoms leaving it to
 the user to correct (or ignore) any chemically incorrect geometry caused
 by the transformation.
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule includes a frame, or 
\begin_inset Quotes eld
\end_inset

handle
\begin_inset Quotes erd
\end_inset

 that can be used to position two molecules in a generalization of superimpositi
on.
 Traditionally, when a molecule is superimposed on a reference molecule,
 the user first forms a correspondence between a set of atoms in the first
 molecule and another set of atoms in the reference molecule.
 The superimposition algorithm then determines the transformation that will
 minimize the rmsd between corresponding atoms.
 Because superimposition is based on actual atom positions, it requires
 that the two molecules have a common substructure, and it can only place
 one molecule on top of another and not at an arbitrary point in space.
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 frame is a way around these limitations.
 A frame is composed of three orthonormal vectors originally aligned along
 the axes of a right handed coordinate frame centered on the origin.
 
\family sans
nab
\family default
 provides two builtin functions 
\family sans
setframe()
\family default
 and 
\family sans
setframep()
\family default
 that are used to reposition this frame based on vectors defined by atom
 expressions or arbitrary 3-D points, respectively.
 To position two molecules via their frames, the user moves the frames so
 that when they are superimposed via the 
\family sans
nab
\family default
 builtin 
\family sans
alignframe()
\family default
, the two molecules have the desired orientation.
 This is a generalization of the methods described above for OCL.
\end_layout

\begin_layout Subsection

\shape italic
\emph on
Distance geometry
\end_layout

\begin_layout Standard

\family sans
nab
\family default
's second initial structure-creation method is 
\shape italic
metric matrix distance geometry,
\begin_inset CommandInset citation
LatexCommand cite
key "Crippen88,Spellmeyer97"
literal "true"

\end_inset


\shape default
 which can be a very powerful method of creating initial structures.
 It has two main strengths.
 First, since it uses internal coordinates, the initial position of atoms
 about which nothing is known may be left unspecified.
 This has the effect that distance geometry models use only the information
 the modeler considers valid.
 No assumptions are required concerning the positions of unspecified atoms.
 The second advantage is that much structural information is in the form
 of distances.
 These include constraints from NMR or fluorescence energy transfer experiments,
 implied propinquities from chemical probing and footprinting, and tertiary
 interactions inferred from sequence analysis.
 Distance geometry provides a way to formally incorporate this information,
 or other assumptions, into the model-building process.
 Details are given in Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:NABdistance"

\end_inset

.
\end_layout

\begin_layout Standard
Distance geometry converts a molecule represented as a set of interatomic
 distances into a 3-D structure.
 
\family sans
nab
\family default
 has several builtin functions that are used together to provide metric
 matrix distance geometry.
 A 
\family sans
bounds
\family default
 object contains the molecule's interatomic distance bounds matrix and a
 list of its chiral centers and their volumes.
 The function 
\family sans
newbounds()
\family default
 creates a 
\family sans
bounds
\family default
 object containing a distance bounds matrix containing initial upper and
 lower bounds for every pair of atoms, and a list of the molecule's chiral
 centers and their volumes.
 Distance bounds for pairs of atoms involving only a single residue are
 derived from that residue's coordinates.
 The 1,2 and 1,3 distance bounds are set to the actual distance between
 the atoms.
 The 1,4 distance lower bound is set to the larger of the sum of the two
 atoms van der Waals radii or their 
\shape italic
syn
\shape default
 (torsion angle = 0o) distance, and the upper bound is set to their 
\shape italic
anti
\shape default
 (torsion angle = 180o) distance.
 
\family sans
newbounds()
\family default
 also initializes the list of the molecule's chiral centers.
 Each chiral center is an ordered list of four atoms and the volume of the
 tetrahedron those four atoms enclose.
 Each entry in a 
\family sans
nab
\family default
 residue library contains a list of the chiral centers composed entirely
 of atoms in that residue.
\end_layout

\begin_layout Standard
Once a 
\family sans
bounds
\family default
 object has been initialized, the modeler can use functions to tighten,
 loosen or set other distance bounds and chiralities that correspond to
 experimental measurements or parts of the model's hypothesis.
 The functions 
\family sans
andbounds()
\family default
 and 
\family sans
orbounds()
\family default
 allow logical manipulation of bounds.
 
\family sans
setbounds_from_db()
\family default
 Allows distance information from a model structure or a database to be
 incorporated into a part of the current molecule's 
\family sans
bounds
\family default
 object, facilitating transfer of information between partially-built structures.
\end_layout

\begin_layout Standard
These primitive functions can be incorporated into higher-level routines.
 For example the functions 
\family sans
stack()
\family default
 and 
\family sans
watsoncrick()
\family default
 set the bounds between the two specified bases to what they would be if
 they were stacked in a strand or base-paired in a standard Watson/Crick
 duplex, with ranges of allowed distances derived from an analysis of structures
 in the Nucleic Acid Database.
\end_layout

\begin_layout Standard
After all experimental and model constraints have been entered into the
 
\family sans
bounds
\family default
 object, the function 
\family sans
tsmooth()
\family default
 applies 
\begin_inset Quotes eld
\end_inset

triangle smoothing
\begin_inset Quotes erd
\end_inset

 to pull in the large upper bounds, since the maximum distance between two
 atoms can not exceed the sum of the upper bounds of the shortest path between
 them.
 Random pairwise metrization
\begin_inset CommandInset citation
LatexCommand cite
key "Hodsdon96"
literal "true"

\end_inset

 can also be used to help ensure consistency of the bounds and to improve
 the sampling of conformational space.
 The function 
\family sans
embed()
\family default
 finally takes the smoothed bounds and converts them into a 3-D object.
 The newly embedded coordinates are subject to conjugate gradient refinement
 against the distance and chirality information contained in 
\family sans
bounds
\family default
.
 The call to 
\family sans
embed()
\family default
 is usually placed in a loop to explore the diversity of the structures
 the bounds represent.
\end_layout

\begin_layout Subsection

\shape italic
\emph on
Molecular mechanics
\end_layout

\begin_layout Standard
The final structure creation method that 
\family sans
nab
\family default
 offers is 
\shape italic
molecular mechanics
\shape default
.
 This includes both energy minimization and molecular dynamics - simulated
 annealing.
 Since this method requires a good estimate of the initial position of every
 atom in a structure, it is not suitable for creating initial structures.
 However, given a reasonable initial structure, it can be used to remove
 bad initial geometry and to explore the conformational space around the
 initial structure.
 This makes it a good method for refining structures created either by rigid
 body transformations or distance geometry.
 
\family sans
nab
\family default
 has its own 3-D/4-D molecular mechanics package that implements several
 AMBER force fields and reads AMBER parameter and topology files.
 Solvation effects can also be modelled with generalized Born continuum
 models.
 Details are given in Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:NABmm"

\end_inset

.
\end_layout

\begin_layout Standard
Our hope is that 
\family sans
nab
\family default
 will serve to formalize the step-by-step process that is used to build
 complex model structures.
 It will facilitate the management and use of higher level symbolic constraints.
 Writing a program to create a structure forces one to make explicit more
 of the model's assumptions in the program itself.
 And an nab description can serve as a way to exhibit a model's salient
 features, much like helical parameters are used to characterize duplexes.
 So far, nab has been used to construct models for synthetic Holliday junctions,
\begin_inset CommandInset citation
LatexCommand cite
key "Macke92"
literal "true"

\end_inset

 calcyclin dimers,
\begin_inset CommandInset citation
LatexCommand cite
key "Potts95"
literal "true"

\end_inset

 HMG-protein/DNA complexes,
\begin_inset CommandInset citation
LatexCommand cite
key "Love95"
literal "true"

\end_inset

 active sites of Rieske iron-sulfur proteins,
\begin_inset CommandInset citation
LatexCommand cite
key "Gurbiel96"
literal "true"

\end_inset

 and supercoiled DNA.
\begin_inset CommandInset citation
LatexCommand cite
key "Macke96"
literal "true"

\end_inset

 The Examples chapter below provides a number of other sample applications.
\end_layout

\begin_layout Section

\series bold
Compiling nab Programs
\end_layout

\begin_layout Standard
Compiling 
\family sans
nab
\family default
 programs is very similar to compiling other high-level language programs,
 such as C and Fortran.
 The command line syntax is
\end_layout

\begin_layout LyX-Code

\size small
nab [-O] [-c] [-v] [-noassert] [-nodebug] [-o file] [-Dstring] 
\shape italic
file(s)
\end_layout

\begin_layout Standard
where
\end_layout

\begin_layout LyX-Code

\size small
-O optimizes the object code
\end_layout

\begin_layout LyX-Code

\size small
-c suppresses the linking stage with ld and produces a .o file
\end_layout

\begin_layout LyX-Code

\size small
-v verbosely reports on the compile process
\end_layout

\begin_layout LyX-Code

\size small
-noassert causes the compiler to ignore assert statements
\end_layout

\begin_layout LyX-Code

\size small
-nodebug causes the compiler to ignore debug statements
\end_layout

\begin_layout LyX-Code

\size small
-o 
\shape italic
file
\shape default
 names the output file (deafult is 
\begin_inset Quotes eld
\end_inset

a.out
\begin_inset Quotes erd
\end_inset

 on most operating systems)
\end_layout

\begin_layout LyX-Code

\size small
-D
\shape italic
string
\shape default
 defines 
\shape italic
string
\shape default
 to the C preprocessor
\end_layout

\begin_layout Standard
Linking Fortran and C object code with 
\family sans
nab
\family default
 is accomplished simply by including the source files on the command line
 with the 
\family sans
nab
\family default
 file.
 For instance, if a 
\family sans
nab
\family default
 program 
\shape italic
bar.nab
\shape default
 uses a C function defined in the file 
\shape italic
foo.c
\shape default
, compiling and linking 
\family sans
nab
\family default
 code would be accomplished by
\end_layout

\begin_layout LyX-Code

\size small
nab -o bar bar.nab foo.c
\end_layout

\begin_layout Standard
The result is an executable 
\family sans
bar
\family default
 file.
 To run the program, type:
\end_layout

\begin_layout LyX-Code
./bar <command line options needed go here>
\end_layout

\begin_layout Section

\series bold
Parallel Execution
\begin_inset CommandInset label
LatexCommand label
name "sec:nab-parallel"

\end_inset


\end_layout

\begin_layout Standard
The generalized Born energy routines (for both first and second derivatives)
 include directives that will allow for parallel execution on machines that
 support this option.
 Once you have some level of comfort and experience with the single-CPU
 version, you can enable parallel execution by supplying one of several
 parallelization options (
\shape italic
-openmp, -mpi
\shape default
 or 
\shape italic
-scalapack
\shape default
) to configure, by re-building the NAB compiler and by recompiling your
 NAB program.
\end_layout

\begin_layout Standard
The 
\shape italic
-openmp
\shape default
 option enables parallel execution under OpenMP on shared- memory machines.
 To enable OpenMP execution, add the 
\shape italic
-openmp
\shape default
 option to configure, re-build the NAB compiler and re-compile your NAB
 program.
 Then, if you set the OMP_NUM_THREADS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
OMP
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

NUM
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

THREADS
\end_layout

\end_inset

 environment variable to the number of threads that you wish to perform
 parallel execution, the Born energy computation will execute in parallel.
\end_layout

\begin_layout Standard
The 
\shape italic
-mpi
\shape default
 option enables parallel execution under MPI
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MPI
\end_layout

\end_inset

 on either clusters or shared-memory machines.
 To enable MPI execution, add the 
\shape italic
-mpi
\shape default
 option to configure and re-build the NAB compiler.
 You will not need to modify your NAB programs; just execute them with an
 
\family typewriter
mpirun
\family default
 command.
 
\end_layout

\begin_layout Standard
The 
\shape italic
-scalapack
\shape default
 option enables parallel execution under MPI on either clusters or shared-memory
 machines, and in addition uses the Scalable LAPACK (ScaLAPACK
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ScaLAPACK
\end_layout

\end_inset

) library for parallel linear algebra computation that is required to calculate
 the second derivatives of the generalized Born energy, to perform Newton-Raphso
n minimization or to perform normal mode analysis.
 For computations that do not involve linear algebra (such as conjugate
 gradients minimization or molecular dynamics) the 
\shape italic
-scalapack
\shape default
 option functions in the same manner as the 
\shape italic
-mpi
\shape default
 option.
 Do not use the 
\shape italic
-mpi
\shape default
 and 
\shape italic
-scalapack
\shape default
 options simultaneously.
 Use the 
\shape italic
-scalapack
\shape default
 option only when ScaLAPACK has been installed on your cluster or shared-memory
 machine.
\end_layout

\begin_layout Standard
In order that the 
\shape italic
-mpi
\shape default
 or 
\shape italic
-scalapack
\shape default
 options result in a correct build of the NAB compiler, the configure script
 must specify linking of the MPI library, or ScaLAPACK and BLACS libraries,
 as part of that build.
 These libraries are specified for Sun machines in the solaris_cc section
 of the configure script.
 If you want to use MPI or ScaLAPACK on a machine other than a Sun machine,
 you will need to modify the configure script to link these libraries in
 a manner analogous to what occurs in the solaris_cc section of the script.
\end_layout

\begin_layout Standard
There are three options to specify the manner in which NAB supports linear
 algebra computation.
 The 
\shape italic
-scalapack
\shape default
 option discussed above specifies ScaLAPACK.
 The 
\shape italic
-perflib
\shape default
 option specifies Sun TM Performance Library TM , a multi-threaded implementatio
n of LAPACK.
 If neither 
\shape italic
-scalapack
\shape default
 nor 
\shape italic
-perflib
\shape default
 is specified, then linear algebra computation will be performed by a single
 CPU using LAPACK.
 In this last case, the Intel MKL library will be used if the 
\family typewriter
MKL_HOME
\family default
 environment variable is set at configure time.
 Absent that, if a 
\family typewriter
GOTO
\family default
 environment variable is found, the GotoBLAS libraries will be used.
\end_layout

\begin_layout Standard
The parallel execution capability of NAB was developed primarily on Sun
 machines, and has also been tested on the SGI Altix platform.
 But it has been much less widely-used than have other parts of NAB, so
 you should certainly run some tests with your system to ensure that single-CPU
 and parallel runs give the same results.
\end_layout

\begin_layout Standard
The 
\emph on
$AMBERHOME/benchmarks/nab
\emph default
 directory has a series of timing benchmarks that can be helpful in assessing
 performance.
 See the README file there for more information.
\end_layout

\begin_layout Section

\series bold
First Examples
\end_layout

\begin_layout Standard
This section introduces 
\family sans
nab
\family default
 via three simple examples.
 All 
\family sans
nab
\family default
 programs in this user manual are set in Courier, a typewriter style font.
 The line numbers at the beginning of each line are not parts of the programs
 but have been added to make it easier to refer to specific program sections.
\end_layout

\begin_layout Subsection

\series bold
B-form DNA duplex
\end_layout

\begin_layout Standard
One of the goals of 
\family sans
nab
\family default
 was that simple models should require simple programs.
 Here is an 
\family sans
nab
\family default
 program that creates a model of a B-form DNA duplex and saves it as a PDB
 file.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,numberstyle={\tiny}"
inline false
status collapsed

\begin_layout Plain Layout

// Program 1 - Average B-form DNA duplex
\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = bdna( "gcgttaacgc" );
\end_layout

\begin_layout Plain Layout

putpdb( "gcg10.pdb", m );
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line 2 is a declaration used to tell the 
\family sans
nab
\family default
 compiler that the name 
\family sans
m
\family default
 is a molecule variable, something 
\family sans
nab
\family default
 programs use to hold structures.
 Line 4 creates the actual model using the predefined function 
\family sans
bdna()
\family default
.
 This function's argument is a literal string which represents the sequence
 of the duplex that is to be created.
 Here's how 
\family sans
bdna()
\family default
 converts this string into a molecule.
 Each letter stands for one of the four standard bases: 
\family sans
a
\family default
 for adenine, 
\family sans
c
\family default
 for cytosine, 
\family sans
g
\family default
 for guanine and 
\family sans
t
\family default
 for thymine.
 In a standard DNA duplex every adenine is paired with thymine and every
 cytosine with guanine in an antiparallel double helix.
 Thus only one strand of the double helix has to be specified.
 As 
\family sans
bdna()
\family default
 reads the string from left to right, it creates one strand from 5' to 3'
 (5'-
\family sans
gcgttaacgc
\family default
 -3'), automatically creating the other antiparallel strand using Watson/Crick
 pairing.
 It uses a uniform helical step of 3.38 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 rise and 36.0o twist.
 Naturally, 
\family sans
nab
\family default
 has other ways to create helical molecules with arbitrary helical parameters
 and even mismatched base pairs, but if you need some 
\begin_inset Quotes eld
\end_inset

average
\begin_inset Quotes erd
\end_inset

 DNA, you should be able to get it without having to specify every detail.
 The last line uses the 
\family sans
nab
\family default
 builtin 
\family sans
putpdb()
\family default
 to write the newly created duplex to the file 
\family sans
gcg10.pdb
\family default
.
\end_layout

\begin_layout Standard
Program 1 is about the smallest 
\family sans
nab
\family default
 program that does any real work.
 Even so, it contains several elements common to almost all 
\family sans
nab
\family default
 programs.
 The two consecutive forward slashes in line 1 introduce a comment which
 tells the 
\family sans
nab
\family default
 compiler to ignore all characters between them and the end of the line.
 This particular comment begins in column 1, but that is not required as
 comments may begin in any column.
 Line 3 is blank.
 It serves no purpose other than to visually separate the declaration part
 from the action part.
 
\family sans
nab
\family default
 input is free format.
 Runs of white space characters—spaces, tabs, blank lines and page breaks—act
 like a single space which is required only to separate reserved words like
 
\family sans
molecule
\family default
 from identifiers like 
\family sans
m
\family default
.
 Thus white space can be used to increase readability.
\end_layout

\begin_layout Subsection

\series bold
Superimpose two molecules
\end_layout

\begin_layout Standard
Here is another simple 
\family sans
nab
\family default
 program.
 It reads two DNA molecules and superimposes them using a rotation matrix
 made from a correspondence between their 
\family sans
C1'
\family default
 atoms.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

 // Program 2 - Superimpose two DNA duplexes
\end_layout

\begin_layout Plain Layout

molecule m, mr;
\end_layout

\begin_layout Plain Layout

float r;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( "test.pdb" );
\end_layout

\begin_layout Plain Layout

mr = getpdb( "gcg10.pdb" );
\end_layout

\begin_layout Plain Layout

superimpose( m, "::C1'", mr, "::C1'" );
\end_layout

\begin_layout Plain Layout

putpdb( "test.sup.pdb", m );
\end_layout

\begin_layout Plain Layout

rmsd( m, "::C1'", mr, "::C1'", r );
\end_layout

\begin_layout Plain Layout

printf( "rmsd = %8.3fn", r );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This program uses three variables—two molecules, 
\family sans
m
\family default
 and 
\family sans
mr
\family default
 and one float, 
\family sans
r
\family default
.
 An 
\family sans
nab
\family default
 declaration can include any number of variables of the same type, but variables
 of different types must be in separate declarations.
 The builtin function 
\family sans
getpdb()
\family default
 reads two molecules in PDB format from the files 
\family sans
test.pdb
\family default
 and 
\family sans
gcg10.pdb
\family default
 into the variables 
\family sans
m
\family default
 and 
\family sans
mr
\family default
.
 The superimposition is done with the builtin function 
\family sans
superimpose()
\family default
.
 The arguments to 
\family sans
superimpose()
\family default
 are two molecules and two 
\begin_inset Quotes eld
\end_inset

atom expressions
\begin_inset Quotes erd
\end_inset

.
 
\family sans
nab
\family default
 uses atom expressions as a compact way of specifying sets of atoms.
 Atom expressions and atom names are discussed in more detail below but
 for now an atom expression is a pattern that selects one or more of the
 atoms in a molecule.
 In this example, they select all atoms with names 
\family sans
C1'
\family default
.
\end_layout

\begin_layout Standard

\family sans
superimpose()
\family default
 uses the two atom expressions to associate the corresponding 
\family sans
C1'
\family default
 carbons in the two molecules.
 It uses these correspondences to create a rotation matrix that when applied
 to 
\family sans
m
\family default
 will minimize the root mean square deviation between the pairs.
 It applies this matrix to 
\family sans
m
\family default
, 
\begin_inset Quotes eld
\end_inset

moving
\begin_inset Quotes erd
\end_inset

 it on to 
\family sans
mr
\family default
.
 The transformed molecule 
\family sans
m
\family default
 is written out to the file 
\family sans
test.sup.pdb
\family default
 in PDB format using the builtin function 
\family sans
putpdb()
\family default
.
 Finally the builtin function 
\family sans
rmsd()
\family default
 is used to compute the actual root mean square deviation between corresponding
 atoms in the two superimposed molecules.
 It returns the result in 
\family sans
r
\family default
, which is written out using the C-like I/O function 
\family sans
printf()
\family default
.
 
\family sans
rmsd()
\family default
 also uses two atom expressions to select the corresponding pairs.
 In this example, they are the same pairs that were used in the superimposition,
 but any set of pairs would have been acceptable.
 An example of how this might be used would be to use different subsets
 of corresponding atoms to compute trial superimpositions and then use 
\family sans
rmsd()
\family default
 over all atoms of both molecules to determine which subset did the best
 job.
\end_layout

\begin_layout Subsection

\series bold
Place residues in a standard orientation
\end_layout

\begin_layout Standard
This is the last of the introductory examples.
 It places nucleic acid monomers in an orientation that is useful for building
 Watson/Crick base pairs.
 It uses several atom expressions to create a frame or handle attached to
 an 
\family sans
nab
\family default
 molecule that permits easy movement along important 
\begin_inset Quotes eld
\end_inset

molecular directions
\begin_inset Quotes erd
\end_inset

.
 In a standard Watson/Crick base pair the 
\family sans
C4
\family default
 and 
\family sans
N1
\family default
 atoms of the purine base and the 
\family sans
H3
\family default
, 
\family sans
N3
\family default
 and 
\family sans
C6
\family default
 atoms of the pyrimidine base are colinear.
 Such a line is obviously an important molecular direction and would make
 a good coordinate axis.
 Program 3 aligns these monomers so that this hydrogen bond is along the
 Y-axis.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 3 - orient nucleic acid monomers
\end_layout

\begin_layout Plain Layout

molecule m; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( "ADE.pdb" );
\end_layout

\begin_layout Plain Layout

setframe( 2, m, // also for GUA
\end_layout

\begin_layout Plain Layout

          "::C4",
\end_layout

\begin_layout Plain Layout

          "::C5", "::N3", 
\end_layout

\begin_layout Plain Layout

          "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

alignframe( m, NULL );
\end_layout

\begin_layout Plain Layout

putpdb( "ADE.std.pdb", m );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( "THY.pdb" ); 
\end_layout

\begin_layout Plain Layout

setframe( 2, m, // also for CYT & URA 
\end_layout

\begin_layout Plain Layout

          "::C6", 
\end_layout

\begin_layout Plain Layout

          "::C5", "::N1", 
\end_layout

\begin_layout Plain Layout

          "::C6", "::N3" ); 
\end_layout

\begin_layout Plain Layout

alignframe( m, NULL ); 
\end_layout

\begin_layout Plain Layout

putpdb( "THY.std.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ADE.THY.eps
	lyxscale 60
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.frame1"

\end_inset

ADE and THY after execution of Program 3.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This program uses only one variable, the molecule 
\family sans
m
\family default
.
 Execution begins on line 4 where the builtin 
\family sans
getpdb()
\family default
 is used to read in the coordinates of an adenine (created elsewhere) from
 the file 
\family sans
ADE.pdb
\family default
.
 The 
\family sans
nab
\family default
 builtin 
\family sans
setframe()
\family default
 creates a coordinate frame for this molecule using vectors defined by some
 of its atoms as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.frame1"

\end_inset

.
 The first atom expression (line 6) sets the origin of this coordinate frame
 to be the coordinates of the 
\family sans
C4
\family default
 atom.
 The two atom expressions on line 7 set the X direction from the coordinates
 of the 
\family sans
C5
\family default
 to the coordinates of the 
\family sans
N3
\family default
.
 The last two atom expressions set the Y direction from the 
\family sans
C4
\family default
 to the 
\family sans
N1
\family default
.
 The Z-axis is created by the cross product X
\begin_inset Formula $\times$
\end_inset

Y.
 Frames are thus like sets of local coordinates that can be attached to
 molecules and used to facilitate defining transformations; a more complete
 discussion is given in the section 
\series bold
Frames
\series default
 below.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 requires that the coordinate axes of all frames be orthogonal, and while
 the X and Y axes as specified here are close, they are not quite exact.
 
\family sans
setframe()
\family default
 uses its first parameter to specify which of the original two axes is to
 be used as a formal axis.
 If this parameter is 
\family sans
1
\family default
, then the specified X axis becomes the formal X axis and Y is recreated
 from Z
\begin_inset Formula $\times$
\end_inset

X; if the value is 
\family sans
2
\family default
, then the specified Y axis becomes the formal Y axis and X is recreated
 from Y
\begin_inset Formula $\times$
\end_inset

Z.
 In this example the specified Y axis is used and X is recreated.
 The builtin 
\family sans
alignframe()
\family default
 transforms the molecule so that the X, Y and Z axes of the newly created
 coordinate frame point along the standard X, Y and Z directions and that
 the origin is at (0,0,0).
 The transformed molecule is written to the file 
\family sans
ADE.std.pdb
\family default
.
 A similar procedure is performed on a thymine residue with the result that
 the hydrogen bond between the 
\family sans
H3
\family default
 of thymine and the 
\family sans
N1
\family default
 of adenine in a Watson Crick pair is now along the Y axis of these two
 residues.
\end_layout

\begin_layout Section

\series bold
Molecules, Residues and Atoms
\end_layout

\begin_layout Standard
We now turn to a discussion of ways of describing and manipulating molecules.
 In addition to the general-purpose variable types like 
\family sans
float
\family default
, 
\family sans
int
\family default
 and 
\family sans
string
\family default
, 
\family sans
nab
\family default
 has three types for working with molecules: 
\family sans
molecule
\family default
, 
\family sans
residue
\family default
 and 
\family sans
atom
\family default
.
 Like their chemical counterparts, 
\family sans
nab
\family default
 molecules are composed of residues which are in turn composed of atoms.
 The residues in an 
\family sans
nab
\family default
 molecule are organized into one or more named, ordered lists called strands.
 Residues in a strand are usually bonded so that the 
\begin_inset Quotes eld
\end_inset

exiting
\begin_inset Quotes erd
\end_inset

 atom of residue 
\begin_inset Formula $i$
\end_inset

 is connected to the 
\begin_inset Quotes eld
\end_inset

entering
\begin_inset Quotes erd
\end_inset

 atom of residue 
\begin_inset Formula $i+1$
\end_inset

.
 The residues in a strand need not be bonded; however, only residues in
 the same strand can be bonded.
\end_layout

\begin_layout Standard
Each of the three molecular types has a complex internal structure, only
 some of which is directly accessible at the 
\family sans
nab
\family default
 level.
 Simple elements of these types, like the number of atoms in a molecule
 or the X coordinate of an atom are accessed via attributes—a suffix attached
 to a molecule, residue or atom variable.
 Attributes behave almost like 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 variables; the only exception being that some attributes are read only
 with values that can t be changed.
 More complex operations on these types such as adding a residue to a molecule
 or merging two strands into one are handled with builtin functions.
 A complete list of 
\family sans
nab
\family default
 builtin functions and molecule attributes can be found in the 
\family sans
nab
\family default
 Language Reference.
\end_layout

\begin_layout Section

\series bold
Creating Molecules
\end_layout

\begin_layout Standard
The following functions are used to create molecules.
 Only an overview is given here; more details are in chapter 3.
\end_layout

\begin_layout LyX-Code

\size small
molecule newmolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newmolecule
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\size small
int addstrand
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addstrand
\end_layout

\end_inset

( molecule m, string str );
\end_layout

\begin_layout LyX-Code

\size small
residue getresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getresidue
\end_layout

\end_inset

( string rname, string rlib );
\end_layout

\begin_layout LyX-Code

\size small
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue res, string aex );
\end_layout

\begin_layout LyX-Code

\size small
int addresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addresidue
\end_layout

\end_inset

( molecule m, string str, residue res );
\end_layout

\begin_layout LyX-Code

\size small
int connectres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
connectres
\end_layout

\end_inset

( molecule m, string str,
\end_layout

\begin_layout LyX-Code

\size small
       int rn1, string atm1, int rn2, string atm2 );
\end_layout

\begin_layout LyX-Code

\size small
int mergestr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mergestr
\end_layout

\end_inset

( molecule m1, string str1, string end1,
\end_layout

\begin_layout LyX-Code

\size small
       molecule m2, string str2, string end2 );
\end_layout

\begin_layout Standard
The general strategy for creating molecules with 
\family sans
nab
\family default
 is to create a new (empty) molecule then build it one residue at a time.
 Each residue is fetched from a residue library, transformed to properly
 position it and added to a growing strand.
 A template showing this strategy is shown below.
 
\family sans
mat
\family default
, 
\family sans
m
\family default
 and 
\family sans
res
\family default
 are respectively a 
\family sans
matrix
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
residue
\family default
 variable declared elsewhere.
 Words in italics indicate general instances of things that would be filled
 in according to actual application.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

m = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m, 
\backslash
fIstr-1
\backslash
fC );
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

for( ...
 ){
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

res = getresidue( 
\backslash
fIres-name
\backslash
fC, 
\backslash
fIres-lib
\backslash
fC );
\end_layout

\begin_layout Plain Layout

res = transformres( mat, res, NULL );
\end_layout

\begin_layout Plain Layout

addresidue( m, 
\backslash
fIstr-name
\backslash
fC, res );
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In line 2, the function 
\family sans
newmolecule()
\family default
 creates a molecule and stores it in 
\family sans
m
\family default
.
 The new molecule is empty—no strands, residues or atoms.
 Next 
\family sans
addstrand()
\family default
 is used to add a strand named 
\shape italic
str-1
\shape default
.
 Strand names may be up to 255 characters in length and can include any
 characters except white space.
 Each strand in a molecule must have a unique name.
 There is no limit on the number of strands a molecule may have.
\end_layout

\begin_layout Standard
The actual structure would be created in the loop on lines 5-11.
 Each time around the loop, the function 
\family sans
getresidue()
\family default
 is used to extract the next residue with the name 
\shape italic
res-name
\shape default
 from some residue library 
\shape italic
res-lib
\shape default
 and stores it in the 
\family sans
residue
\family default
 variable 
\family sans
res
\family default
.
 Next the function 
\family sans
transformres()
\family default
 applies a transformation matrix, held in the 
\family sans
matrix
\family default
 variable 
\family sans
mat
\family default
 to the residue in 
\family sans
res
\family default
, which places it in the orientation and position it will have in the new
 molecule.
 Finally, the function 
\family sans
addresidue()
\family default
 appends the transformed residue to the end of the chain of residues in
 the strand 
\shape italic
str-name
\shape default
 of the new molecule.
\end_layout

\begin_layout Standard
Residues in each strand are numbered from 1 to 
\begin_inset Formula $N$
\end_inset

, where 
\begin_inset Formula $N$
\end_inset

 is the number of residues in that strand.
 The residue order is the order in which they were inserted with 
\family sans
addresidue()
\family default
.
 While 
\family sans
nab
\family default
 does not require it, nucleic acid chains are usually numbered from 5' to
 3' and proteins chains from the N-terminus to the C-terminus.
 The residues in nucleic acid strands and protein chains are usually bonded
 with the outgoing end of residue 
\begin_inset Formula $i$
\end_inset

 bonded to the incoming end of residue 
\begin_inset Formula $i$
\end_inset

+1.
 However, as this is not always the case, 
\family sans
nab
\family default
 requires the user to explicitly make all interresidue bonds with the builtin
 
\family sans
connectres()
\family default
.
\end_layout

\begin_layout Standard

\family sans
connectres()
\family default
 makes bonds between two atoms in different residues of the same strand
 of a molecule.
 Only residues in the same strand can be bonded.
 
\family sans
connectres()
\family default
 takes six arguments.
 They are a molecule, the name of the strand containing the residues to
 be bonded, and two pairs each of a residue number and the name of an atom
 in that residue.
 As an example, this call to 
\family sans
connectres()
\family default
,
\end_layout

\begin_layout LyX-Code
connectres( m, "sense", i, "O3'", i+1, "P" );
\end_layout

\begin_layout Standard
connects an atom named 
\family sans
"O3'"
\family default
 in residue 
\family sans
i
\family default
 to an atom named 
\family sans
"P"
\family default
 in residue 
\family sans
i+1
\family default
, creating the phosphate bond that joins two nucleic acid monomers.
\end_layout

\begin_layout Standard
The function 
\family sans
mergestr()
\family default
 is used to either move or copy the residues in one strand into another
 strand.
 Details are provided in chapter 3.
\end_layout

\begin_layout Section

\series bold
Residues and Residue Libraries
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 programs build molecules from residues that are parts of residue libraries,
 which are exactly those distributed with the Amber molecular mechanics
 programs (see 
\family sans
http://ambermd.org/
\family default
).
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for working with residues.
 All return a valid residue on success and 
\family sans
NULL
\family default
 on failure.
 The function 
\family sans
getres()
\family default
 is written in 
\family sans
nab
\family default
 and it source is shown below.
 
\family sans
transformres()
\family default
 which applies a coordinate transformation to a residue and is discussed
 under the section 
\series bold
Matrices and Transformations
\series default
.
\end_layout

\begin_layout LyX-Code

\size small
residue getresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getresidue
\end_layout

\end_inset

( string resname, string reslib );
\end_layout

\begin_layout LyX-Code

\size small
residue getres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getres
\end_layout

\end_inset

( string resname, string reslib );
\end_layout

\begin_layout LyX-Code

\size small
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue res, string aexp );
\end_layout

\begin_layout Standard
getresidue() extracts the residue with name 
\family sans
resname
\family default
 from the residue library 
\family sans
reslib
\family default
.
 
\family sans
reslib
\family default
 is the name of a file that either contains the residue information or contains
 names of other files that contain it.
 
\family sans
reslib
\family default
 is assumed to be in the directory 
\family sans
$AMBERHOME/dat/reslib
\family default
 unless it begins with a slash (
\family sans
/
\family default
)
\end_layout

\begin_layout Standard
A common task of many 
\family sans
nab
\family default
 programs is the translation of a string of characters into a structure
 where each letter in the string represents a residue.
 Generally, some mapping of one or two character names into actual residue
 names is required.
 
\family sans
nab
\family default
 supplies the function 
\family sans
getres()
\family default
 that maps the single character names 
\family sans
a
\family default
, 
\family sans
c
\family default
, 
\family sans
g
\family default
, 
\family sans
t
\family default
 and 
\family sans
u
\family default
 and their 5' and 3' terminal analogues into the residues 
\family sans
ADE
\family default
, 
\family sans
CYT
\family default
, 
\family sans
GUA
\family default
, 
\family sans
THY
\family default
 and 
\family sans
URA
\family default
.
 Here is its source: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// getres() - map 1 letter names into 3 letter names
\end_layout

\begin_layout Plain Layout

residue getres( string rname, string rlib )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    residue res;
\end_layout

\begin_layout Plain Layout

    string map1to3[ hashed ];          // convert residue names
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    map1to3["A"] = "ADE";     map1to3["C"] = "CYT";
\end_layout

\begin_layout Plain Layout

    map1to3["G"] = "GUA";     map1to3["T"] = "THY";
\end_layout

\begin_layout Plain Layout

    map1to3["U"] = "URA";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    map1to3["a"] = "ADE";     map1to3["c"] = "CYT";
\end_layout

\begin_layout Plain Layout

    map1to3["g"] = "GUA";     map1to3["t"] = "THY";
\end_layout

\begin_layout Plain Layout

    map1to3["u"] = "URA";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( r in map1to3 ) {
\end_layout

\begin_layout Plain Layout

        res = getresidue( map1to3[ r ], rlib );
\end_layout

\begin_layout Plain Layout

    }else{
\end_layout

\begin_layout Plain Layout

        fprintf( stderr, "undefined residue %s
\backslash

\backslash
n", r );
\end_layout

\begin_layout Plain Layout

        exit( 1 );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return( res );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
getres()
\family default
 is the first of several 
\family sans
nab
\family default
 functions that are discussed in this User Manual.
 The following explanation will cover not just 
\family sans
getres()
\family default
 but will serve as an introduction to user defined 
\family sans
nab
\family default
 functions in general.
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 function is a named group of declarations and statements that is executed
 as a unit by using the function's name in an expression.
 
\family sans
nab
\family default
 functions can have special variables called parameters that allow the same
 function to operate on different data.
 A function definition begins with a header that describes the function,
 followed by the function body which is a list of statements and declarations
 enclosed in braces (
\family sans
{}
\family default
) and ends with a semicolon.
 The header to 
\family sans
getres()
\family default
 is on line 2 and the body is on lines 3 to 22.
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 function header begins with the reserved word that specifies its type,
 followed by the function's name followed by its parameters (if any) enclosed
 in parentheses.
 The parentheses are always required, even if the function does not have
 parameters.
 
\family sans
nab
\family default
 functions may return a single value of any of the 10 
\family sans
nab
\family default
 types.
 
\family sans
nab
\family default
 functions can not return arrays.
 In symbolic terms every 
\family sans
nab
\family default
 function header uses this template:
\end_layout

\begin_layout LyX-Code

\shape italic
type name
\family sans
\shape default
(
\family default
 
\shape italic
parameters?
\shape default
 
\family sans
)
\end_layout

\begin_layout Standard
The parameters (if present) to an 
\family sans
nab
\family default
 function are a comma separated list of type variable pairs:
\end_layout

\begin_layout LyX-Code

\shape italic
type1 variable1
\family sans
\shape default
,
\family default
 
\shape italic
type2 variable2
\family sans
\shape default
, ...
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 function may have any number of parameters, including none.
 Parameters may of any of the 10 
\family sans
nab
\family default
 types, but unlike function values, parameters can be arrays, including
 
\shape italic
hashed
\shape default
 arrays.
 The function 
\family sans
getres()
\family default
 has two parameters, the two 
\family sans
string
\family default
 variables 
\family sans
resname
\family default
 and 
\family sans
reslib
\family default
.
\end_layout

\begin_layout Standard
Parameters to 
\family sans
nab
\family default
 functions are 
\begin_inset Quotes eld
\end_inset

called by reference
\begin_inset Quotes erd
\end_inset

 which means that they contain the actual data—not copies of it—that the
 function was called with.
 When an 
\family sans
nab
\family default
 function parameter is assigned, the actual data in the calling function
 is changed.
 The only exception is when an expression is passed as a parameter to an
 
\family sans
nab
\family default
 function.
 In this case, the 
\family sans
nab
\family default
 compiler evaluates the expression into a temporary (and invisible to the
 
\family sans
nab
\family default
 programmer) variable and then operates on its contents.
\end_layout

\begin_layout Standard
Immediately following the function header is the function body.
 It is a list of declarations followed by a list of statements enclosed
 in braces.
 The list of declarations, the list of statements or both may be empty.
 
\family sans
getres()
\family default
 has several statements, and a single declaration, the variable 
\family sans
res
\family default
.
 This variable is a 
\shape italic
local variables
\shape default
.
 Local variables are defined only when the function is active.
 If a local variable has the same name as variable defined outside of a
 it the local variable hides the global one.
 Local variables can not be parameters.
\end_layout

\begin_layout Standard
The statement part of 
\family sans
getres()
\family default
 begins on line 6.
 It consists of several 
\family sans
if
\family default
 statements organized into a decision tree.
 The action of this tree is to translate one of the strings 
\family sans
A
\family default
, , , 
\family sans
T
\family default
, etc., or their lower case equivalents into the corresponding three letter
 standard nucleic acid residue name and then extract that residue from 
\family sans
reslib
\family default
 using the low level residue library function 
\family sans
getresidue()
\family default
.
 The value returned by 
\family sans
getresidue()
\family default
 is stored in the local variable 
\family sans
res
\family default
, except when the input string is not one of those listed above.
 In that case, 
\family sans
getres()
\family default
 writes a message to 
\family sans
stderr
\family default
 indicating that it can not translate the input string and sets 
\family sans
res
\family default
 to the value 
\family sans
NULL
\family default
.
 
\family sans
nab
\family default
 uses 
\family sans
NULL
\family default
 to represent non-existent values of the types 
\family sans
string
\family default
, 
\family sans
file
\family default
, 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
.
 A value of 
\family sans
NULL
\family default
 generally means that a variable is uninitialized or that an error occurred
 in creating it.
\end_layout

\begin_layout Standard
A function returns a value by executing a 
\family sans
return
\family default
 statement, which is the reserved word 
\family sans
return
\family default
 followed by an expression.
 The 
\family sans
return
\family default
 statement evaluates the expression, sets the function value to it and returns
 control to the point just after the call.
 The expression is optional but if present the type of the expression must
 be the same as the type of the function or both must be numeric (
\family sans
int
\family default
, 
\family sans
float
\family default
).
 If the expression is missing, the function still returns, but its value
 is undefined.
 
\family sans
getres()
\family default
 includes one 
\family sans
return
\family default
 statements on line 20.
 A function also returns with an undefined value when it "runs off the bottom",
 i.e., executes the last statement before the closing brace and that statement
 is not a 
\family sans
return
\family default
.
\end_layout

\begin_layout Section

\series bold
Atom Names and Atom Expressions
\end_layout

\begin_layout Standard
Every atom in an 
\family sans
nab
\family default
 molecule has a name.
 This name is composed of the strand name, the residue 
\shape italic
number
\shape default
 and the atom name.
 As both PDB and off formats require that all atoms in a residue have distinct
 names, the combination of strand name, residue number and atom name is
 unique for each atom in a single molecule.
 Atoms in different molecules, however, may have the same name.
\end_layout

\begin_layout Standard
Many 
\family sans
nab
\family default
 builtins require the user to specify exactly which atoms are to be covered
 by the operation.
 
\family sans
nab
\family default
 does this with special strings called 
\shape italic
atom expressions
\shape default
.
 An atom expression is a pattern that matches one or more atom names in
 the specified molecule or residue.
 An atom expression consists of three parts—a strand part, a residue part
 and an atom part.
 The parts are separated by colons (
\family sans
:
\family default
).
 Not all three parts are required.
 An atom expression with no colons consists of only a strand part; it selects
 
\shape italic
all
\shape default
 atoms in the selected strands.
 An atom expression with one colon consists of a strand part and a residue
 part; it selects 
\shape italic
all
\shape default
 atoms in the selected residues in the selected strands.
 An empty part selects all strands, residues or atoms depending on which
 parts are empty.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 patterns specify the 
\shape italic
entire
\shape default
 string to be matched.
 For example, the atom pattern 
\family sans
C
\family default
 matches only atoms named 
\family sans
C
\family default
 , and not those named 
\family sans
CA
\family default
, 
\family sans
HC
\family default
, etc.
 To match any name that begins with 
\family sans
C
\family default
, use 
\family sans
C*
\family default
, to match any name ending with 
\family sans
C
\family default
, use 
\family sans
*C
\family default
 and to match a 
\family sans
C
\family default
 in any position use 
\family sans
*C*
\family default
.
 An atom expression is first parsed into its parts.
 The strand part is evaluated selecting one or more strands in a molecule.
 Next the residue part is evaluated.
 Only residues in selected strands can be selected.
 Finally the atom part is evaluated and only atoms in selected residues
 are selected.
 Here are some typical atom expressions and the atoms they match.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
:ADE:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select all atoms in any residue named 
\family sans
ADE
\family default
.
 All three parts are present but both the strand and atom parts are empty.
 The atom expression 
\family sans
:ADE
\family default
 selects the same set of atoms.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::C,CA,N
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select all atoms with names 
\family sans
C
\family default
, 
\family sans
CA
\family default
 or 
\family sans
N
\family default
 in all residues in all strands—typically the peptide backbone.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
A:1-10,13,URA:C1'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select atoms named 
\family sans
C1'
\family default
 (the glycosyl-carbons) in residues 1 to 10 and 13 and in any residues named
 
\family sans
URA
\family default
 in the strand named 
\family sans
A
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::C*[^']
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select all non-sugar carbons.
 The
\family sans
 [^']
\family default
 is an example of a negated character class.
 It matches any character in the last position except 
\family sans
'
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::P,O?P,C[3-5]?,O[35]?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The nucleic acid backbone.
 This 
\family sans
P
\family default
 selects phosphorous atoms.
 The 
\family sans
O?P
\family default
 matches phosphate oxygens that have various second letters 
\family sans
O1P
\family default
, 
\family sans
O2P
\family default
 or 
\family sans
OAP
\family default
 or 
\family sans
OBP
\family default
.
 The 
\family sans
C[3-5]?
\family default
 matches the backbone carbons, 
\family sans
C3'
\family default
, 
\family sans
C4'
\family default
, 
\family sans
C5'
\family default
 or 
\family sans
C3*
\family default
, 
\family sans
C4*
\family default
, 
\family sans
C5*
\family default
.
 And the 
\family sans
O[35]?
\family default
 matches the backbone oxygens 
\family sans
O3'
\family default
, 
\family sans
O5'
\family default
 or 
\family sans
O3*
\family default
, 
\family sans
O5*
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::
\family default
 or 
\family sans
:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select all atoms in the molecule.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
An important property of 
\family sans
nab
\family default
 atom expressions is that the order in which the strands, residues, and
 atoms are listed is unimportant.
 That is, the atom expression 
\family sans
"2,1:5,2,3:N1,C1'"
\family default
 is the exact same atom expression as 
\family sans
"1,2:3,2,5:C1',N1"
\family default
.
 All atom expressions are reordered, internal to 
\family sans
nab
\family default
, in increasing atom number.
 So, in the above example, the selected atoms will be selected in the following
 sequence:
\end_layout

\begin_layout LyX-Code
1:2:N1, 1:2:C1', 1:3:N1, 1:3:C1', 1:5:N1, 1:5:C1', 2:2:N1, 2:2:C1',
\begin_inset Newline newline
\end_inset

2:3:N1, 2:3:C1', 2:5:N1, 2:5:C1'
\end_layout

\begin_layout Standard
The order in which atoms are selected internal to a specific residue are
 the order in which they appear in a 
\family sans
nab
\family default
 PDB file.
 As seen in the above example, 
\family sans
N1
\family default
 appears before 
\family sans
C1'
\family default
 in all 
\family sans
nab
\family default
 nucleic acid residues and PDB files.
\end_layout

\begin_layout Section

\series bold
Looping over atoms in molecules
\end_layout

\begin_layout Standard
Another thing that many 
\family sans
nab
\family default
 programs have to do is visit every atom of a molecule.
 
\family sans
nab
\family default
 provides a special form of its 
\family sans
for
\family default
-loop for accomplishing this task.
 These loops have this form:
\end_layout

\begin_layout LyX-Code

\size small
for( 
\begin_inset Formula $a$
\end_inset

 in 
\begin_inset Formula $m$
\end_inset

 ) 
\shape italic
stmt
\shape default
;
\end_layout

\begin_layout Standard
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

 represent an 
\family sans
atom
\family default
 and a 
\family sans
molecule
\family default
 variable.
 The action of the loop is to set 
\begin_inset Formula $a$
\end_inset

 to each atom in 
\begin_inset Formula $m$
\end_inset

 in this order.
 The first atom is the first atom of the first residue of the first strand.
 This is followed by the rest of the atoms of this residue, followed by
 the atoms of the second residue, etc until all the atoms in the first strand
 have been visited.
 The process is then repeated on the second and subsequent strands in 
\begin_inset Formula $m$
\end_inset

 until 
\begin_inset Formula $a$
\end_inset

 has been set to every atom in 
\begin_inset Formula $m$
\end_inset

.
 The order of the strands in a molecule is the order in which they were
 created with 
\family sans
addstrand()
\family default
, the order of the residues in a strand is the order in which they were
 added with 
\family sans
addresidue()
\family default
 and the order of the atoms in a residue is the order in which they are
 listed in the residue library entry that the residue is based on.
\end_layout

\begin_layout Standard
The following program uses two nested for-
\family sans
in
\family default
 loops to compute all the proton-proton distances in a molecule.
 Distances less than 
\family sans
cutoff
\family default
 are written to 
\family sans
stdout
\family default
.
 The program uses the second argument on the command to hold the 
\family sans
cutoff
\family default
 value.
 The program also uses the 
\family sans
=
\begin_inset Formula $\sim$
\end_inset


\family default
 operator to compare a character string , in this case an atom name to pattern,
 specified as a regular expression.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 4 - compute H-H distances <= cutoff
\end_layout

\begin_layout Plain Layout

molecule    m;  
\end_layout

\begin_layout Plain Layout

atom        ai, aj; 
\end_layout

\begin_layout Plain Layout

float       d, cutoff;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

cutoff = atof( argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

m = getpdb( "gcg10.pdb" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( ai in m ){
\end_layout

\begin_layout Plain Layout

    if( ai.atomname !~ "H" )continue;
\end_layout

\begin_layout Plain Layout

    for( aj in m ){
\end_layout

\begin_layout Plain Layout

        if( aj.tatomnum <= ai.tatomnum )continue;
\end_layout

\begin_layout Plain Layout

        if( aj.atomname !~ "H" )continue;
\end_layout

\begin_layout Plain Layout

        if(( d=distp(ai.pos,aj.pos))<=cutoff){
\end_layout

\begin_layout Plain Layout

            printf(
\end_layout

\begin_layout Plain Layout

                "%3d %-4s %-4s %3d %-4s %-4s %8.3f
\backslash

\backslash
n",
\end_layout

\begin_layout Plain Layout

                ai.tresnum, ai.resname, ai.atomname,
\end_layout

\begin_layout Plain Layout

                aj.tresnum, aj.resname, aj.atomname,
\end_layout

\begin_layout Plain Layout

                d );
\end_layout

\begin_layout Plain Layout

        }   
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The molecule is read into 
\family sans
m
\family default
 using 
\family sans
getpdb()
\family default
.
 Two atom variables 
\family sans
ai
\family default
 and 
\family sans
aj
\family default
 are used to hold the pairs of atoms.
 The outer loop in lines 9-22 sets 
\family sans
ai
\family default
 to each atom in 
\family sans
m
\family default
 in the order discussed above.
 Since this program is only interested in proton-proton distances, if 
\family sans
ai
\family default
 is not a proton, all calculations involving that atom can be skipped.
 The 
\family sans
if
\family default
 in line 10 tests to see if 
\family sans
ai
\family default
 is a proton.
 It does so by testing to see if 
\family sans
ai
\family default
's name, available via the 
\family sans
atomname
\family default
 attribute doesn't match the regular expression 
\family sans
"H"
\family default
.
 If it doesn't match then the program executes the 
\family sans
continue
\family default
 statement also on line 10, which has the effect of advancing the outer
 loop to its next atom.
\end_layout

\begin_layout Standard
>From the section on attributes, 
\family sans
ai.atomname
\family default
 behaves like a character string.
 It can be compared against other character strings or tested to see if
 it matches a pattern or regular expression.
 The two operators, 
\family sans
=
\begin_inset Formula $\sim$
\end_inset


\family default
 and 
\family sans
!
\begin_inset Formula $\sim$
\end_inset


\family default
 stand for 
\shape italic
match
\shape default
 and 
\shape italic
doesn't-match
\shape default
 They also inform the 
\family sans
nab
\family default
 compiler that the string on their right hand sides is to be treated like
 a regular expression.
 In this case, the regular expression 
\family sans
"H"
\family default
 matches any name that contains the letter 
\family sans
H
\family default
, or any proton which is just what is required.
\end_layout

\begin_layout Standard
If 
\family sans
ai
\family default
 is a proton, then the inner loop from 11-21 is executed.
 This sets 
\family sans
aj
\family default
 to each atom in the same order as the loop in 9.
 Since distance is reflexive (
\shape italic
dist
\shape default
 
\begin_inset Formula $i,j$
\end_inset

 
\shape italic
= dist
\shape default
 
\begin_inset Formula $j,i$
\end_inset

 ), and the distance between an atom and itself is 0, the inner loop uses
 the 
\family sans
if
\family default
 on line 12 to skip the calculation on 
\family sans
aj
\family default
 unless it follows 
\family sans
ai
\family default
 in the molecule's atom order.
 Next the 
\family sans
if
\family default
 on line 13 checks to see if 
\family sans
aj
\family default
 is a proton, skipping to the next atom if it is not.
 Finally, the 
\family sans
if
\family default
 on line 14 computes the distance between the two protons 
\family sans
ai
\family default
 and 
\family sans
aj
\family default
 and if it is 
\begin_inset Formula $<$
\end_inset

= 
\family sans
cutoff
\family default
 writes the information out using the C-like I/O function 
\family sans
printf()
\family default
.
\end_layout

\begin_layout Section

\series bold
Points, Transformations and Frames
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides three kinds of geometric objects.
 They are the types 
\family sans
point
\family default
 and 
\family sans
matrix
\family default
 and the frame component of a 
\family sans
molecule
\family default
.
\end_layout

\begin_layout Subsection

\series bold
Points and Vectors
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 type 
\family sans
point
\family default
 is an object that holds three 
\family sans
float
\family default
 values.
 These values can represent the X, Y and Z coordinates of a point or the
 components of 3-vector.
 The individual elements of a 
\family sans
point
\family default
 variable are accessed via attributes or suffixes added to the variable
 name.
 The three 
\family sans
point
\family default
 attributes are 
\family sans
"x"
\family default
, 
\family sans
"y"
\family default
 and 
\family sans
"z"
\family default
.
 Many 
\family sans
nab
\family default
 builtin functions use, return or create 
\family sans
point
\family default
 values.
 Details of operations on points are given in chapter 3.
\end_layout

\begin_layout Subsection

\series bold
Matrices and Transformations
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses the 
\family sans
matrix
\family default
 type to hold a 4
\begin_inset Formula $\times$
\end_inset

4 transformation matrix.
 Transformations are applied to residues and molecules to move them into
 new orientations and/or positions.
 Unlike a general coordinate transformation, 
\family sans
nab
\family default
 transformations can not alter the scale (size) of an object.
 However, transformations can be applied to a subset of the atoms of a residue
 or molecule changing its shape.
 For example, 
\family sans
nab
\family default
 would use a transformation to rotate a group of atoms about a bond.
 
\family sans
nab
\family default
 does 
\shape italic
not
\shape default
 require that transformations applied to parts of residues or molecules
 be chemically valid.
 It simply transforms the coordinates of the selected atoms leaving it to
 the user to correct (or ignore) any chemically incorrect geometry caused
 by the transformation.
 
\family sans
nab
\family default
 uses the following builtin functions to create and use transformations.
\end_layout

\begin_layout LyX-Code

\size small
matrix newtransform
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newtransform
\end_layout

\end_inset

( float dx, float dy, float dz,
\end_layout

\begin_layout LyX-Code

\size small
       float rx, float ry, float rz );
\end_layout

\begin_layout LyX-Code

\size small
matrix rot4
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4
\end_layout

\end_inset

( molecule m, string tail, string head, float angle );
\end_layout

\begin_layout LyX-Code

\size small
matrix rot4p
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4p
\end_layout

\end_inset

( point tail, point head, float angle );
\end_layout

\begin_layout LyX-Code

\size small
matrix trans4
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
trans4
\end_layout

\end_inset

( molecule m, string tail, string head, float distance );
\end_layout

\begin_layout LyX-Code

\size small
matrix trans4p
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
trans4p
\end_layout

\end_inset

( point tail, point head, float distance );
\end_layout

\begin_layout LyX-Code

\size small
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue r, string aex );
\end_layout

\begin_layout LyX-Code

\size small
int transformmol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformmol
\end_layout

\end_inset

( matrix mat, molecule m, string aex );
\end_layout

\begin_layout Standard
nab provides three ways to create a new transformation matrix.
 The function 
\family sans
newtransform()
\family default
 creates a transformation matrix from 3 translations and 3 rotations.
 It is intended to position objects with respect to the standard X, Y, and
 Z axes located at (0,0,0).
 Here is how it works.
 Imagine two coordinate systems, X, Y, Z and X', Y', Z' that are initially
 superimposed.
 
\family sans
newtransform()
\family default
 first rotates the the primed coordinate system about Z by 
\family sans
rz
\family default
 degrees, then about Y by 
\family sans
ry
\family default
 degrees, then about X by 
\family sans
rx
\family default
 degrees.
 Finally the reoriented primed coordinate system is translated to the point
 (
\family sans
dx
\family default
,
\family sans
dy
\family default
,
\family sans
dz
\family default
) in the unprimed system.
 The functions 
\family sans
rot4()
\family default
 and 
\family sans
rot4p()
\family default
 create a transformation matrix that effects a clockwise rotation by an
 angle (in degrees) about an axis defined by two points.
 The points can be specified implicitly by atom expressions applied to a
 molecule in 
\family sans
rot4()
\family default
 or explicitly as points in 
\family sans
rot4p()
\family default
.
 If an atom expression in 
\family sans
rot4()
\family default
 selects more that one atom, the average coordinate of all selected atoms
 is used as the point's value.
 (Note that a positive rotation angle here is defined to be clockwise, which
 is in accord with the IUPAC rules for defining torsional angles in molecules,
 but is opposite to the convention found in many other branches of mathematics.)
 Similarly, the functions 
\family sans
trans4()
\family default
 and 
\family sans
trans4p()
\family default
 create a transformation that effects a translation by a distance along
 the axis defined by two points.
 A positive translation is from 
\family sans
tail
\family default
 to 
\family sans
head
\family default
.
\end_layout

\begin_layout Standard

\family sans
transformres()
\family default
 applies a transformation to those atoms of 
\family sans
res
\family default
 that match the atom expression 
\family sans
aex
\family default
.
 It returns a 
\shape italic
copy
\shape default
 of the input residue with the changed coordinates.
 The input residue is unchanged.
 It returns 
\family sans
NULL
\family default
 if the new residue could not be created.
 
\family sans
transformmol()
\family default
 applies a transformation to those atoms of 
\family sans
mol
\family default
 that match 
\family sans
aex
\family default
 .
 Unlike 
\family sans
transformres()
\family default
, 
\family sans
transformmol()
\family default
 
\shape italic
changes
\shape default
 the coordinates of the input molecule.
 It returns the number of atoms selected by 
\family sans
aex
\family default
.
 In both functions, the special atom expression 
\family sans
NULL
\family default
 selects all atoms in the input residue or molecule.
\end_layout

\begin_layout Subsection

\series bold
Frames
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule includes a frame, a handle that allows arbitrary and precise movement
 of the molecule.
 This frame is set with the 
\family sans
nab
\family default
 builtins 
\family sans
setframe()
\family default
 and 
\family sans
setframep()
\family default
.
 It is initially set to the standard X, Y and Z directions centered at (0,0,0).
 
\family sans
setframe()
\family default
 creates a coordinate frame from atom expressions that specify the the origin,
 the X direction and the Y direction.
 If any atom expression selects more that one atom, the average of the selected
 atoms' coordinates is used.
 Z is created from X
\begin_inset Formula $\times$
\end_inset

Y.
 Since the initial X and Y directions are unlikely to be orthogonal, the
 
\family sans
use
\family default
 parameter specifies which of the input X and Y directions is to become
 the formal X or Y direction.
 If 
\family sans
use
\family default
 is 
\family sans
1
\family default
, X is chosen and Y is recreated from Z
\begin_inset Formula $\times$
\end_inset

X.
 If 
\family sans
use
\family default
 is 
\family sans
2
\family default
, then Y is chosen and X is recreated from Y
\begin_inset Formula $\times$
\end_inset

Z.
 
\family sans
setframep()
\family default
 is identical except that the five points defining the frame are explicitly
 provided.
\end_layout

\begin_layout LyX-Code

\size small
int setframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframe
\end_layout

\end_inset

( int use, molecule mol, string origin,
\end_layout

\begin_layout LyX-Code

\size small
         string xtail, string xhead,
\end_layout

\begin_layout LyX-Code

\size small
         string ytail, string yhead );
\end_layout

\begin_layout LyX-Code

\size small
int setframep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframep
\end_layout

\end_inset

( int use, molecule mol, point origin,
\end_layout

\begin_layout LyX-Code

\size small
         point xtail, point xhead,
\end_layout

\begin_layout LyX-Code

\size small
         point ytail, point yhead );
\end_layout

\begin_layout LyX-Code

\size small
int alignframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
alignframe
\end_layout

\end_inset

( molecule mol, molecule mref );
\end_layout

\begin_layout Standard
alignframe() is similar to 
\family sans
superimpose()
\family default
, but works on the molecules' frames rather than selected sets of their
 atoms.
 It transforms 
\family sans
mol
\family default
 to superimpose its 
\shape italic
frame
\shape default
 on the 
\shape italic
frame
\shape default
 of 
\family sans
mref
\family default
.
 If 
\family sans
mref
\family default
 is 
\family sans
NULL
\family default
, 
\family sans
alignframe()
\family default
 superimposes the frame of 
\family sans
mol
\family default
 on the standard X, Y and Z coordinate system centered at (0,0,0).
\end_layout

\begin_layout Standard
Here's how frames and transformations work together to permit precise motion
 between two molecules.
 Corresponding frames are defined for two molecules.
 These frames are based on molecular directions.
 
\family sans
alignframe()
\family default
 is first used to align the frame of one molecule along with the standard
 X, Y and Z directions.
 The molecule is then moved and reoriented via transformations.
 Because its initial frame was along these molecular directions, the transformat
ions are likely to be along or about the axes.
 Finally 
\family sans
alignframe()
\family default
 is used to realign the transformed molecule on the frame of the fixed molecule.
\end_layout

\begin_layout Standard
One use of this method would be the rough placement of a drug into a groove
 on a DNA molecule to create a starting structure for restrained molecular
 dynamics.
 
\family sans
setframe()
\family default
 is used to define a frame for the DNA along the appropriate groove, with
 its origin at the center of the binding site.
 A similar frame is defined for the drug.
 
\family sans
alignframe()
\family default
 first aligns the drug on the standard coordinate system whose axes are
 now important directions between the DNA and the drug.
 The drug is transformed and 
\family sans
alignframe()
\family default
 realigns the transformed drug on the DNA's frame.
\end_layout

\begin_layout Section

\series bold
Creating Watson Crick duplexes
\end_layout

\begin_layout Standard
Watson/Crick duplexes are fundamental components of almost all nucleic acid
 structures and 
\family sans
nab
\family default
 provides several functions for use in creating them.
 They are
\end_layout

\begin_layout LyX-Code

\size small
residue getres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getres
\end_layout

\end_inset

( string resname, string reslib );
\end_layout

\begin_layout LyX-Code

\size small
molecule bdna
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bdna
\end_layout

\end_inset

( string seq );
\end_layout

\begin_layout LyX-Code

\size small
molecule fd_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
helix
\end_layout

\end_inset

( string helix_type, string seq, string acid_type );
\end_layout

\begin_layout LyX-Code

\size small
string wc_complement
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
complement
\end_layout

\end_inset

( string seq, string reslib, string natype );
\end_layout

\begin_layout LyX-Code

\size small
molecule wc_basepair
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
basepair
\end_layout

\end_inset

( residue sres, residue ares );
\end_layout

\begin_layout LyX-Code

\size small
molecule wc_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
helix
\end_layout

\end_inset

( string seq, string rlib, string natype,
\end_layout

\begin_layout LyX-Code

\size small
         string aseq, string arlib, string anatype, float xoff,
\end_layout

\begin_layout LyX-Code

\size small
         float incl, float twist, float rise, string opts );
\end_layout

\begin_layout Standard
All of these functions are written in 
\family sans
nab
\family default
 allowing the user to modify or extend them as needed without having to
 modify the 
\family sans
nab
\family default
 compiler.
\end_layout

\begin_layout Standard

\series bold
Note:
\series default
 If you just want to create a regular helical structure with a given sequence,
 use the "fiber-diffraction" routine 
\family sans
fd_helix()
\family default
, which is discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:fdhelix"

\end_inset

.
 The methods discussed next are more general, and can be extended to more
 complicated problems, but they are also much harder to follow and understand.
 The construction of "unusual" nucleic acids was the original focus of NAB;
 if you are using NAB for some other purpose (such as running Amber force
 field calculations) you should probably skip to Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:NABmm"

\end_inset

 at this point.
\end_layout

\begin_layout Subsection

\series bold
bdna() and fd_helix()
\end_layout

\begin_layout Standard
The function 
\family sans
bdna()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bdna()
\end_layout

\end_inset

 which was used in the first example converts a string into a Watson/Crick
 DNA duplex using average DNA helical parameters.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// bdna() - create average B-form duplex
\end_layout

\begin_layout Plain Layout

molecule bdna( string seq )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

        molecule m;
\end_layout

\begin_layout Plain Layout

        string cseq;
\end_layout

\begin_layout Plain Layout

        cseq = wc_complement( seq, "", "dna" );
\end_layout

\begin_layout Plain Layout

        m = wc_helix( seq, "", "dna",
\end_layout

\begin_layout Plain Layout

                 cseq, "", "dna",
\end_layout

\begin_layout Plain Layout

                 2.25, -4.96, 36.0, 3.38, "s5a5s3a3" );
\end_layout

\begin_layout Plain Layout

         return( m );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
bdna()
\family default
 calls 
\family sans
wc_helix()
\family default
 to create the molecule.
 However, 
\family sans
wc_helix()
\family default
 requires both strands of the duplex so 
\family sans
bdna()
\family default
 calls 
\family sans
wc_complement()
\family default
 to create a string that represents the Watson/Crick complement of the sequence
 contained in its parameter 
\family sans
seq
\family default
.
 The string 
\shape italic
"s5a5s3a3"
\shape default
 replaces both the 
\begin_inset Formula $s$
\end_inset

ense and 
\begin_inset Formula $a$
\end_inset

nti 
\begin_inset Formula $5$
\end_inset

' terminal phosphates with hydrogens and adds hydrogens to both the 
\begin_inset Formula $s$
\end_inset

ense and 
\begin_inset Formula $a$
\end_inset

nti 
\begin_inset Formula $3$
\end_inset

' terminal O3' oxygens.
 The finished molecule in 
\family sans
m
\family default
 is returned as the function's value.
 If any errors had occurred in creating 
\family sans
m
\family default
, it would have the value 
\family sans
NULL
\family default
, indicating that 
\family sans
bdna()
\family default
 failed.
\end_layout

\begin_layout Standard
Note that the simple method used in 
\family sans
bdna()
\family default
 for constructing the helix is not very generic, since it assumes that the
 
\shape italic
internal
\shape default
 geometry of the residues in the (default) library are appropriate for this
 sort of helix.
 This is in fact the case for B-DNA, but this method cannot be trivially
 generalized to other forms of helices.
 One could create initial models of other helical forms in the way described
 above, and fix up the internal geometry by subsequent energy minimization.
 An alternative is to directly use fiber-diffraction models for other types
 of helices.
 The 
\family sans
fd_helix()
\family default
 routine does this, reading a database of experimental coordinates from
 fiber diffraction data, and constructing a helix of the appropriate form,
 with the helix axis along 
\begin_inset Formula $z$
\end_inset

.
 More details are given in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:fdhelix"

\end_inset

.
\end_layout

\begin_layout Subsection

\series bold
wc_complement()
\end_layout

\begin_layout Standard
The function 
\family sans
wc_complement()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

complement()
\end_layout

\end_inset

 takes three strings.
 The first is a sequence using the standard one letter code, the second
 is the name of an 
\family sans
nab
\family default
 residue library, and the third is the nucleic acid type (RNA or DNA).
 It returns a string that contains the Watson/Crick complement of the input
 sequence in the same one letter code.
 The input string and the returned complement string have opposite directions.
 If the left end of the input string is the 5' base then the left end of
 the returned string will be the 3' base.
 The actual direction of the two strings depends on their use.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// wc_complement() - create a string that is the W/C 
\end_layout

\begin_layout Plain Layout

// complement of the string seq 
\end_layout

\begin_layout Plain Layout

string wc_complement( string seq, string rlib, string rlt )
\end_layout

\begin_layout Plain Layout

//  (note that rlib is unused: included only for backwards compatibility
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   string acbase, base, wcbase, wcseq;
\end_layout

\begin_layout Plain Layout

   int i, len;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   if( rlt == "dna" )      acbase = "t";
\end_layout

\begin_layout Plain Layout

   else if( rlt == "rna" ) acbase = "u";
\end_layout

\begin_layout Plain Layout

   else{
\end_layout

\begin_layout Plain Layout

      fprintf( stderr,
\end_layout

\begin_layout Plain Layout

        "wc_complement: rlt (%s) is not dna/rna, no W/C comp.", rlt );
\end_layout

\begin_layout Plain Layout

      return( NULL );
\end_layout

\begin_layout Plain Layout

   }   
\end_layout

\begin_layout Plain Layout

   len = length( seq );
\end_layout

\begin_layout Plain Layout

   wcseq = NULL;
\end_layout

\begin_layout Plain Layout

   for( i = 1; i <= len; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

       base = substr( seq, i, 1 );
\end_layout

\begin_layout Plain Layout

       if( base == "a" || base == "A" )       wcbase = acbase;
\end_layout

\begin_layout Plain Layout

       else if( base == "c" || base == "C" )  wcbase = "g";
\end_layout

\begin_layout Plain Layout

       else if( base == "g" || base == "G" )  wcbase = "c";
\end_layout

\begin_layout Plain Layout

       else if( base == "t" || base == "T" )  wcbase = "a";
\end_layout

\begin_layout Plain Layout

       else if( base == "u" || base == "U" )  wcbase = "a";
\end_layout

\begin_layout Plain Layout

       else{
\end_layout

\begin_layout Plain Layout

           fprintf( stderr, "wc_complement: unknown base %sn", base );
\end_layout

\begin_layout Plain Layout

           return( NULL );
\end_layout

\begin_layout Plain Layout

       }   
\end_layout

\begin_layout Plain Layout

       wcseq = wcseq + wcbase;
\end_layout

\begin_layout Plain Layout

   }    
\end_layout

\begin_layout Plain Layout

   return( wcseq );
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
wc_complement()
\family default
 begins its work in line 9, where the nucleic acid type, as indicated by
 
\family sans
rlt
\family default
 as DNA or RNA is used to determine the correct complement for an 
\family sans
a
\family default
.
 The complementary sequence is created in the 
\family sans
for
\family default
 loop that begins in line 18 and extends to line 30.
 The 
\family sans
nab
\family default
 builtin 
\family sans
substr()
\family default
 is used to extract single characters from the input sequence beginning
 with with position 1 and working from left to right until entire input
 sequence has been converted.
 The 
\family sans
if
\family default
-tree from lines 20 to 28 is used to set the character complementary to
 the current character, using the previously determined 
\family sans
acbase
\family default
 if the input character is an 
\family sans
a
\family default
 or 
\family sans
A
\family default
.
 Any character other than the expected 
\family sans
a
\family default
, 
\family sans
c
\family default
, 
\family sans
g
\family default
, 
\family sans
t
\family default
, 
\family sans
u
\family default
 (or 
\family sans
A
\family default
, 
\family sans
C
\family default
, 
\family sans
G
\family default
, 
\family sans
T
\family default
, 
\family sans
U
\family default
) is an error causing 
\family sans
wc_complement()
\family default
 to print an error message and return 
\family sans
NULL
\family default
, indicating that it failed.
 Line 29 shows how 
\family sans
nab
\family default
 uses the infix 
\family sans
+
\family default
 to concatenate character strings.
 When the entire string has been complemented, the 
\family sans
for
\family default
 loop terminates and the complementary sequence now in 
\family sans
wcseq
\family default
 is returned as the function value.
 Note that if the input sequence is empty, 
\family sans
wc_complement()
\family default
 returns 
\family sans
NULL
\family default
, indicating failure.
\end_layout

\begin_layout Subsection

\series bold
wc_helix() Overview
\end_layout

\begin_layout Standard

\family sans
wc_helix()
\family default
 generates a uniform helical duplex from a sequence, its complement, two
 residue libraries and four helical parameters: x-offset, inclination, twist
 and rise.
 By using two residue libraries, 
\family sans
wc_helix()
\family default
 can generate RNA/DNA heteroduplexes.
 
\family sans
wc_helix()
\family default
 returns an 
\family sans
nab
\family default
 molecule containing two strands.
 The string 
\family sans
seq
\family default
 becomes the 
\family sans
"sense"
\family default
 strand and the string 
\family sans
aseq
\family default
 becomes the 
\family sans
"anti"
\family default
 strand.
 
\family sans
seq
\family default
 and 
\family sans
aseq
\family default
 are required to be complementary although this is not checked.
 
\family sans
wc_helix()
\family default
 creates the molecule one base pair at a time.
 
\family sans
seq
\family default
 is read from left to right, 
\family sans
aseq
\family default
 is read from right to left and corresponding letters are extracted and
 converted to residues by 
\family sans
getres()
\family default
.
 These residues are in turn combined into an idealized Watson/Crick base
 pair by 
\family sans
wc_basepair()
\family default
.
 An 
\family sans
AT
\family default
 created by 
\family sans
wc_basepair()
\family default
 is shown in Figure 2.
\end_layout

\begin_layout Standard
A Watson/Crick duplex can be modeled as a set of planes stacked in a helix.
 The numbers that describe the relationships between the planes and between
 the planes and the helical axis are called helical parameters.
 Planes can be defined for each base or base pair.
 Six numbers (three displacements and three angles) can be defined for every
 pair of planes; however, helical parameters for nucleic acid bases are
 restricted to the six numbers describing the the relationship between the
 two bases in a base pair and the six numbers describing the relationship
 between adjacent base pairs.
 A complete description of helical parameters can be found in Dickerson.
\begin_inset CommandInset citation
LatexCommand cite
key "Dickerson89"
literal "true"

\end_inset


\end_layout

\begin_layout Standard

\family sans
wc_helix()
\family default
 uses only four of the 12 helical parameters.
 It builds its helices from idealized Watson/Crick pairs.
 These pairs are planar so the three intra base angles are 0.
 In addition the displacements are displacements from the idealized Watson/Crick
 geometry and are also 0.
 The 
\family sans
A
\family default
 and the 
\family sans
T
\family default
 in Figure 2 are in plane of the page.
 
\family sans
wc_helix()
\family default
 uses four of the six parameters that relate a base pair to the helical
 axis.
 The helices created by 
\family sans
wc_helix()
\family default
 have a single axis (the Z axis, not shown) which is at the intersection
 of the X and Y axes of Figure 2.
 Now imagine keeping the axes fixed in the plane of the paper and moving
 the base pair.
 X-offset is the displacement along the X axis between the Y axis and the
 line marked Y'.
 A positive X-offset is toward the arrow on the X-axis.
 Inclination is the rotation of the base pair about the X axis.
 A rotation that moves the A above the plane of page and the T below is
 positive.
 Twist involves a rotation of the base pair about the Z-axis.
 A counterclockwise twist is positive.
 Finally, rise is a displacement along the Z-axis.
 A positive rise is out of the page toward the reader.
\end_layout

\begin_layout Subsection

\series bold
wc_basepair()
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename AT.pair.eps
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.ATpair"

\end_inset

ADE.THY from wc_basepair().
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\family sans
wc_basepair()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

basepair()
\end_layout

\end_inset

 takes two residues and assembles them into a two stranded 
\family sans
nab
\family default
 molecule containing one base pair.
 Residue 
\family sans
sres
\family default
 is placed in the 
\family sans
"sense"
\family default
 strand and residue 
\family sans
ares
\family default
 is placed in the 
\family sans
"anti"
\family default
 strand.
 The work begins in line 14 where 
\family sans
newmolecule()
\family default
 is used to create an empty molecule stored in 
\family sans
m
\family default
.
 Two strands, 
\family sans
sense
\family default
 and 
\family sans
anti
\family default
 are added using 
\family sans
addstrand()
\family default
.
 In addition, two more molecules are created, 
\family sans
m_sense
\family default
 for the sense residue and 
\family sans
m_anti
\family default
 for the anti residue.
 The 
\family sans
if
\family default
-trees in lines 26-61 and 63-83 are used to select residue dependent atoms
 that will be used to move the base pairs into a convenient orientation
 for helix generation.
 The 
\shape italic
purine
\shape default
:
\family sans
C4
\family default
 and 
\shape italic
pyrimidine
\shape default
:
\family sans
C6
\family default
 distance which is residue dependent is also set.
 In line 62, 
\family sans
addresidue()
\family default
 adds 
\family sans
sres
\family default
 to the strand 
\family sans
sense
\family default
 of 
\family sans
m_sense
\family default
.
 In line 84, 
\family sans
addresidue()
\family default
 adds 
\family sans
ares
\family default
 to the strand 
\family sans
anti
\family default
 of 
\family sans
m_anti
\family default
.
 Lines 86 and 87 align the molecules containing the sense residue and anti
 residue so that 
\family sans
sres
\family default
 and 
\family sans
ares
\family default
 are on top of each other.
 Line 88 creates a transformation matrix that rotates 
\family sans
m_anti
\family default
 ( containing 
\family sans
ares
\family default
 ) 180o about the X-axis.
 After applying this transformation, the two bases are still occupying the
 same space but 
\family sans
ares
\family default
 is now antiparallel to 
\family sans
sres
\family default
.
 Line 90 creates a transformation matrix that displaces 
\family sans
m_anti
\family default
 and 
\family sans
ares
\family default
 along the Y-axis by 
\family sans
sep
\family default
.
 The properly positioned molecules containing 
\family sans
sres
\family default
 and 
\family sans
ares
\family default
 are merged into a single molecule, m
\family sans
,
\family default
 completing the base pair.
 Lines 97-98 move this base pair to a more convenient orientation for helix
 generation.
 Initially the base as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.ATpair"

\end_inset

 is in the plane of page with origin on the C4 of the A.
 The calls to 
\family sans
setframe()
\family default
 and 
\family sans
alignframe()
\family default
 move the base pair so that the origin is at the intersection of the lines
 marked X and Y'.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// wc_basepair() - create Watson/Crick base pair
\end_layout

\begin_layout Plain Layout

#define AT_SEP 8.29
\end_layout

\begin_layout Plain Layout

#define CG_SEP 8.27
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule wc_basepair( residue sres, residue ares )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

        molecule m, m_sense, m_anti;
\end_layout

\begin_layout Plain Layout

        float sep;
\end_layout

\begin_layout Plain Layout

        string srname, arname;
\end_layout

\begin_layout Plain Layout

        string xtail, xhead;
\end_layout

\begin_layout Plain Layout

        string ytail, yhead;
\end_layout

\begin_layout Plain Layout

        matrix mat;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        m = newmolecule();
\end_layout

\begin_layout Plain Layout

        m_sense = newmolecule();
\end_layout

\begin_layout Plain Layout

        m_anti = newmolecule();
\end_layout

\begin_layout Plain Layout

        addstrand( m, "sense" );
\end_layout

\begin_layout Plain Layout

        addstrand( m, "anti" );
\end_layout

\begin_layout Plain Layout

        addstrand( m_sense, "sense" );
\end_layout

\begin_layout Plain Layout

        addstrand( m_anti, "anti" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        srname = getresname( sres );
\end_layout

\begin_layout Plain Layout

        arname = getresname( ares );
\end_layout

\begin_layout Plain Layout

        ytail = "sense::C1'";
\end_layout

\begin_layout Plain Layout

        yhead = "anti::C1'";
\end_layout

\begin_layout Plain Layout

        if( ( srname == "ADE" ) || ( srname == "DA" ) ||
\end_layout

\begin_layout Plain Layout

            ( srname == "RA" ) || ( srname =~ "[DR]A[35]" ) ){
\end_layout

\begin_layout Plain Layout

                sep = AT_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C5";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N3";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "CYT" ) || ( srname =~ "[DR]C[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = CG_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C6";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N1";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "GUA" ) || ( srname =~ "[DR]G[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = CG_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C5";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N3";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "THY" ) || ( srname =~ "DT[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = AT_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C6";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N1";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "URA" ) || ( srname =~ "RU[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = AT_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C6";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N1";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else{
\end_layout

\begin_layout Plain Layout

                fprintf( stderr,
\end_layout

\begin_layout Plain Layout

                        "wc_basepair : unknown sres %s
\backslash

\backslash
n",srname );
\end_layout

\begin_layout Plain Layout

                exit( 1 );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        addresidue( m_sense, "sense", sres );
\end_layout

\begin_layout Plain Layout

        if( ( arname == "ADE" ) || ( arname == "DA" ) ||
\end_layout

\begin_layout Plain Layout

            ( arname == "RA" ) || ( arname =~ "[DR]A[35]" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "CYT" ) || ( arname =~ "[DR]C[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "GUA" ) || ( arname =~ "[DR]G[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "THY" ) || ( arname =~ "DT[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "URA" ) || ( arname =~ "RU[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else{
\end_layout

\begin_layout Plain Layout

                fprintf( stderr,
\end_layout

\begin_layout Plain Layout

                        "wc_basepair : unknown ares %s
\backslash

\backslash
n",arname );
\end_layout

\begin_layout Plain Layout

                exit( 1 );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        addresidue( m_anti, "anti", ares );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        alignframe( m_sense, NULL );
\end_layout

\begin_layout Plain Layout

        alignframe( m_anti, NULL );
\end_layout

\begin_layout Plain Layout

        mat = newtransform( 0., 0., 0., 180., 0., 0.
 );
\end_layout

\begin_layout Plain Layout

        transformmol( mat, m_anti, NULL );
\end_layout

\begin_layout Plain Layout

        mat = newtransform( 0., sep, 0., 0., 0., 0.
 );
\end_layout

\begin_layout Plain Layout

        transformmol( mat, m_anti, NULL );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "sense", "last", m_sense, "sense", "first" );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "anti", "last", m_anti, "anti", "first" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        freemolecule( m_sense ); freemolecule( m_anti );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        setframe( 2, m, "::C1'", xtail, xhead, ytail, yhead );
\end_layout

\begin_layout Plain Layout

        alignframe( m, NULL );
\end_layout

\begin_layout Plain Layout

        return( m );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
wc_helix() Implementation
\end_layout

\begin_layout Standard
The function 
\family sans
wc_helix()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix()
\end_layout

\end_inset

 assembles base pairs from 
\family sans
wc_basepair()
\family default
 into a helical duplex.
 It is a fairly complicated function that uses several transformations and
 shows how 
\family sans
mergestr()
\family default
 is used to combine smaller molecules into a larger one.
 In addition to creating complete duplexes, 
\family sans
wc_helix()
\family default
 can also create molecules that contain only one strand of a duplex.
 Using the special value 
\family sans
NULL
\family default
 for either 
\family sans
seq
\family default
 or 
\family sans
aseq
\family default
 creates a duplex that omits the residues for the 
\family sans
NULL
\family default
 sequence.
 The molecule still contains two strands, 
\family sans
sense
\family default
 and 
\family sans
anti
\family default
, but the strand corresponding to the 
\family sans
NULL
\family default
 sequence has zero residues.
 
\family sans
wc_helix()
\family default
 first determines which strands are required, then creates the first base
 pair, then creates the subsequent base pairs and assembles them into a
 helix and finally packages the requested strands into the returned molecule.
\end_layout

\begin_layout Standard
Lines 20-34 test the input sequences to see which strands are required.
 The variables 
\family sans
has_s
\family default
 and 
\family sans
has_a
\family default
 are flags where a value of 
\family sans
1
\family default
 indicates that 
\family sans
seq
\family default
 and/or 
\family sans
aseq
\family default
 was requested.
 If an input sequence is 
\family sans
NULL
\family default
, 
\family sans
wc_complement()
\family default
 is used to create it and the appropriate flag is set to 
\family sans
0
\family default
.
 The 
\family sans
nab
\family default
 builtin 
\family sans
setreslibkind()
\family default
 is used to set the nucleic acid type so that the proper residue ( DNA or
 RNA ) is extracted from the residue library.
\end_layout

\begin_layout Standard
The first base pair is created in lines 42-63.
 The two letters corresponding the 5' base of 
\family sans
seq
\family default
 and the 3' base of 
\family sans
aseq
\family default
 are extracted using the 
\family sans
nab
\family default
 builtin 
\family sans
substr()
\family default
, converted to residues using 
\family sans
getresidue()
\family default
 and assembled into a base pair by 
\family sans
wc_basepair()
\family default
.
 This base pair is oriented as in Figure 2 with the origin at the intersection
 of the lines X and Y'.
 Two transformations are created, 
\family sans
xomat
\family default
 for the x-offset and 
\family sans
inmat
\family default
 for the inclination and applied to this pair.
\end_layout

\begin_layout Standard
Base pairs 2 to 
\family sans
slen-1
\family default
 are created in the 
\family sans
for
\family default
 loop in lines 66-87.
 
\family sans
substr()
\family default
 is used to extract the appropriate letters from 
\family sans
seq
\family default
 and 
\family sans
aseq
\family default
 which are converted into another base pair by 
\family sans
getresidue()
\family default
 and 
\family sans
wc_basepair()
\family default
.
 Four transformations are applied to these base pairs - two to set the x-offset
 and the inclination and two more to set the twist and the rise.
 Next 
\family sans
m2
\family default
, the molecule containing the newly created properly positioned base pair
 must be bonded to the previously created molecule in 
\family sans
m1
\family default
.
 Since 
\family sans
nab
\family default
 only permits bonds between residues in the same strand, 
\family sans
mergestr()
\family default
 must be used to combine the corresponding strands in the two molecules
 before 
\family sans
connectres()
\family default
 can create the bonds.
\end_layout

\begin_layout Standard
Because the two strands in a Watson/Crick duplex are antiparallel, adding
 a base pair to one end requires that one residue be added 
\shape italic
after
\shape default
 the 
\shape italic
last
\shape default
 residue of one strand and that the other residue added 
\shape italic
before
\shape default
 the 
\shape italic
first
\shape default
 residue of the other strand.
 In 
\family sans
wc_helix()
\family default
 the 
\family sans
sense
\family default
 strand is extended after its last residue and the 
\family sans
anti
\family default
 strand is extended before its first residue.
 The call to 
\family sans
mergestr()
\family default
 in line 79 extends the 
\family sans
sense
\family default
 strand of 
\family sans
m1
\family default
 with the the residue of the 
\family sans
sense
\family default
 strand of 
\family sans
m2
\family default
.
 The residue of 
\family sans
m2
\family default
 is added after the 
\family sans
"last"
\family default
 residue of of the 
\family sans
sense
\family default
 strand of 
\family sans
m1
\family default
.
 The final argument 
\family sans
"first"
\family default
 indicates that the residue of 
\family sans
m2
\family default
 are copied in their original order 
\family sans
m1:sense:last
\family default
 is followed by 
\family sans
m2:sense:first
\family default
.
 After the strands have been merged, 
\family sans
connectres()
\family default
 makes a bond between the 
\family sans
O3'
\family default
 of the next to last residue (
\family sans
i-1
\family default
) and the 
\family sans
P
\family default
 of the last residue (
\family sans
i
\family default
).
 The next call to 
\family sans
mergestr()
\family default
 works similarly for the residues in the 
\family sans
anti
\family default
 strands.
 The residue in the 
\family sans
anti
\family default
 strand of 
\family sans
m2
\family default
 are copied into the the 
\family sans
anti
\family default
 strand of 
\family sans
m1
\family default
 
\shape italic
before
\shape default
 the first residue of the 
\family sans
anti
\family default
 strand of 
\family sans
m1 m2:anti:
\family default
\shape italic
last
\shape default
 precedes 
\family sans
m1:anti:
\family default
\shape italic
first
\shape default
 .
 After merging 
\family sans
connectres()
\family default
 creates a bond between the 
\family sans
O3'
\family default
 of the new first residue and the 
\family sans
P
\family default
 of the second residue.
\end_layout

\begin_layout Standard
Lines 121-130 create the returned molecule 
\family sans
m3
\family default
.
 If the flag 
\family sans
has_s
\family default
 is 
\family sans
1
\family default
, 
\family sans
mergestr()
\family default
 copies the entire sense 
\family sans
strand
\family default
 of 
\family sans
m1
\family default
 into the empty sense 
\family sans
strand
\family default
 of 
\family sans
m3
\family default
.
 If the flag 
\family sans
has_a
\family default
 is 
\family sans
1
\family default
, the 
\family sans
anti
\family default
 strand is also copied.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// wc_helix() - create Watson/Crick duplex
\end_layout

\begin_layout Plain Layout

string  wc_complement();
\end_layout

\begin_layout Plain Layout

molecule wc_basepair();
\end_layout

\begin_layout Plain Layout

molecule wc_helix(
\end_layout

\begin_layout Plain Layout

       string seq, string sreslib, string snatype,
\end_layout

\begin_layout Plain Layout

       string aseq, string areslib, string anatype,
\end_layout

\begin_layout Plain Layout

       float xoff, float incl, float twist, float rise,
\end_layout

\begin_layout Plain Layout

       string opts )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

molecule m1, m2, m3;
\end_layout

\begin_layout Plain Layout

matrix xomat, inmat, mat;
\end_layout

\begin_layout Plain Layout

string arname, srname;
\end_layout

\begin_layout Plain Layout

string sreslib_use, areslib_use;
\end_layout

\begin_layout Plain Layout

string loup[ hashed ];
\end_layout

\begin_layout Plain Layout

residue sres, ares;
\end_layout

\begin_layout Plain Layout

int     has_s, has_a;
\end_layout

\begin_layout Plain Layout

int i, slen;
\end_layout

\begin_layout Plain Layout

float   ttwist, trise;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

has_s = 1; has_a = 1;
\end_layout

\begin_layout Plain Layout

if( sreslib == "" ) sreslib_use = "all_nucleic94.lib";
\end_layout

\begin_layout Plain Layout

       else sreslib_use = sreslib;
\end_layout

\begin_layout Plain Layout

if( areslib == "" ) areslib_use = "all_nucleic94.lib";
\end_layout

\begin_layout Plain Layout

       else areslib_use = areslib;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( seq == NULL && aseq == NULL ){
\end_layout

\begin_layout Plain Layout

       fprintf( stderr, "wc_helix: no sequence
\backslash

\backslash
n" );
\end_layout

\begin_layout Plain Layout

       return( NULL );
\end_layout

\begin_layout Plain Layout

}else if( seq == NULL ){
\end_layout

\begin_layout Plain Layout

       seq = wc_complement( aseq, areslib_use, snatype );
\end_layout

\begin_layout Plain Layout

       has_s = 0;
\end_layout

\begin_layout Plain Layout

}else if( aseq == NULL ){
\end_layout

\begin_layout Plain Layout

       aseq = wc_complement( seq, sreslib_use, anatype );
\end_layout

\begin_layout Plain Layout

       has_a = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

slen = length( seq );
\end_layout

\begin_layout Plain Layout

loup["g"] = "G"; loup["a"] = "A";
\end_layout

\begin_layout Plain Layout

loup["t"] = "T"; loup["c"] = "C";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//                       handle the first base pair:
\end_layout

\begin_layout Plain Layout

setreslibkind( sreslib_use, snatype );
\end_layout

\begin_layout Plain Layout

srname = "D" + loup[ substr( seq, 1, 1 ) ];
\end_layout

\begin_layout Plain Layout

if( opts =~ "s5" )
\end_layout

\begin_layout Plain Layout

    sres = getresidue( srname + "5", sreslib_use );
\end_layout

\begin_layout Plain Layout

else if( opts =~ "s3" && slen == 1 )
\end_layout

\begin_layout Plain Layout

    sres = getresidue( srname + "3", sreslib_use );
\end_layout

\begin_layout Plain Layout

else sres = getresidue( srname, sreslib_use );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setreslibkind( areslib_use, anatype );
\end_layout

\begin_layout Plain Layout

arname = "D" + loup[ substr( aseq, 1, 1 ) ];
\end_layout

\begin_layout Plain Layout

if( opts =~ "a3" )
\end_layout

\begin_layout Plain Layout

    ares = getresidue( arname + "3", areslib_use );
\end_layout

\begin_layout Plain Layout

else if( opts =~ "a5" && slen == 1 )
\end_layout

\begin_layout Plain Layout

    ares = getresidue( arname + "5", areslib_use );
\end_layout

\begin_layout Plain Layout

else ares = getresidue( arname, areslib_use );
\end_layout

\begin_layout Plain Layout

m1 = wc_basepair( sres, ares );
\end_layout

\begin_layout Plain Layout

freeresidue( sres ); freeresidue( ares );
\end_layout

\begin_layout Plain Layout

xomat = newtransform(xoff, 0., 0., 0., 0., 0.
 );
\end_layout

\begin_layout Plain Layout

transformmol( xomat, m1, NULL );
\end_layout

\begin_layout Plain Layout

inmat = newtransform( 0., 0., 0., incl, 0., 0.);
\end_layout

\begin_layout Plain Layout

transformmol( inmat, m1, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//                       add in the main portion of the helix:
\end_layout

\begin_layout Plain Layout

trise = rise; ttwist = twist;
\end_layout

\begin_layout Plain Layout

for( i = 2; i <= slen-1; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

       srname = "D" + loup[ substr( seq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( sreslib, snatype );
\end_layout

\begin_layout Plain Layout

       sres = getresidue( srname, sreslib_use );
\end_layout

\begin_layout Plain Layout

       arname = "D" + loup[ substr( aseq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( areslib, anatype );
\end_layout

\begin_layout Plain Layout

       ares = getresidue( arname, areslib_use );
\end_layout

\begin_layout Plain Layout

       m2 = wc_basepair( sres, ares );
\end_layout

\begin_layout Plain Layout

       freeresidue( sres ); freeresidue( ares );
\end_layout

\begin_layout Plain Layout

       transformmol( xomat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       transformmol( inmat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mat = newtransform( 0., 0., trise, 0., 0., ttwist );
\end_layout

\begin_layout Plain Layout

       transformmol( mat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "sense", "last", m2, "sense", "first" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "sense", i-1, "O3'", i, "P" );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "anti", "first", m2, "anti", "last" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "anti", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

       trise = trise + rise;
\end_layout

\begin_layout Plain Layout

       ttwist = ttwist + twist;
\end_layout

\begin_layout Plain Layout

       freemolecule( m2 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

i = slen;         // add in final residue pair:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( i > 1 ){
\end_layout

\begin_layout Plain Layout

       srname = substr( seq, i, 1 );
\end_layout

\begin_layout Plain Layout

       srname = "D" + loup[ substr( seq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( sreslib, snatype );
\end_layout

\begin_layout Plain Layout

       if( opts =~ "s3"  )
\end_layout

\begin_layout Plain Layout

          sres = getres( srname + "3", sreslib_use );
\end_layout

\begin_layout Plain Layout

       else
\end_layout

\begin_layout Plain Layout

          sres = getres( srname, sreslib_use );
\end_layout

\begin_layout Plain Layout

       arname = "D" + loup[ substr( aseq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( areslib, anatype );
\end_layout

\begin_layout Plain Layout

       if( opts =~ "a5" )
\end_layout

\begin_layout Plain Layout

          ares = getres( arname + "5", areslib_use );
\end_layout

\begin_layout Plain Layout

       else
\end_layout

\begin_layout Plain Layout

          ares = getres( arname, areslib_use );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

       m2 = wc_basepair( sres, ares );
\end_layout

\begin_layout Plain Layout

       freeresidue( sres ); freeresidue( ares );
\end_layout

\begin_layout Plain Layout

       transformmol( xomat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       transformmol( inmat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mat = newtransform( 0., 0., trise, 0., 0., ttwist );
\end_layout

\begin_layout Plain Layout

       transformmol( mat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "sense", "last", m2, "sense", "first" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "sense", i-1, "O3'", i, "P" );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "anti", "first", m2, "anti", "last" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "anti", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

       trise = trise + rise;
\end_layout

\begin_layout Plain Layout

       ttwist = ttwist + twist;
\end_layout

\begin_layout Plain Layout

       freemolecule( m2 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m3 = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m3, "sense" );
\end_layout

\begin_layout Plain Layout

addstrand( m3, "anti" );
\end_layout

\begin_layout Plain Layout

if( has_s )
\end_layout

\begin_layout Plain Layout

       mergestr( m3, "sense", "last", m1, "sense", "first" );
\end_layout

\begin_layout Plain Layout

if( has_a )
\end_layout

\begin_layout Plain Layout

       mergestr( m3, "anti", "last",  m1, "anti", "first" );
\end_layout

\begin_layout Plain Layout

freemolecule( m1 ); 
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

return( m3 ); 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter

\series bold
NAB: Language Reference
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 is a computer language used to create, modify and describe models of macromolec
ules, especially those of unusual nucleic acids.
 The following sections provide a complete description of the 
\family sans
nab
\family default
 language.
 The discussion begins with its lexical elements, continues with sections
 on expressions, statements and user defined functions and concludes with
 an explanation of each of 
\family sans
nab
\family default
's builtin functions.
 Two appendices contain a more detailed and formal description of the lexical
 and syntactic elements of the language including the actual 
\family sans
lex
\family default
 and 
\family sans
yacc
\family default
 input used to create the compiler.
 Two other appendices describe 
\family sans
nab
\family default
's internal data structures and the C code generated to support some of
 
\family sans
nab
\family default
's higher level operations.
\end_layout

\begin_layout Section

\series bold
Language Elements
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 program is composed of several basic lexical elements: identifiers, reserved
 words, literals, operators and special characters.
 These are discussed in the following sections.
\end_layout

\begin_layout Subsection

\series bold
Identifiers
\end_layout

\begin_layout Standard
An identifier is a sequence of letters, digits and underscores beginning
 with a letter.
 Upper and lower case letters are distinct.
 Identifiers are limited to 255 characters in length.
 The underscore (_) is a letter.
 Identifiers beginning with underscore must be used carefully as they may
 conflict with operating system names and 
\family sans
nab
\family default
 created temporaries.
 Here are some 
\family sans
nab
\family default
 identifiers.
\end_layout

\begin_layout LyX-Code

\family sans
mol i3 twist TWIST Watson_Crick_Base_Pair
\end_layout

\begin_layout Subsection

\series bold
Reserved Words
\end_layout

\begin_layout Standard
Certain identifiers are reserved words, special symbols used by 
\family sans
nab
\family default
 to denote control flow and program structure.
 Here are the 
\family sans
nab
\family default
 reserved words:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
allocate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
assert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
atom
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bounds
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
break
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
continue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
deallocate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
debug
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delete
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dynamic
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
else
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
for
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hashed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
if
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
matrix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
molecule
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
point
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
residue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
return
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
while
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Literals
\end_layout

\begin_layout Standard
Literals are self defining terms used to introduce constant values into
 expressions.
 
\family sans
nab
\family default
 provides three types of literals: integers, floats and character strings.
 Integer literals are sequences of one or more decimal digits.
 Float literals are sequences of decimal digits that include a decimal point
 and/or are followed by an exponent.
 An exponent is the letter 
\family sans
e
\family default
 or 
\family sans
E
\family default
 followed by an optional 
\family sans
+
\family default
 or 
\family sans
-
\family default
 followed by one to three decimal digits.
 The exponent is interpreted as 
\begin_inset Quotes eld
\end_inset

times 10 to the power of 
\shape italic
exp
\shape default

\begin_inset Quotes erd
\end_inset

 where 
\shape italic
exp
\shape default
 is the number following the 
\family sans
e
\family default
 or 
\family sans
E
\family default
.
 All numeric literals are base 10.
 Here are some integer and float literals:
\end_layout

\begin_layout LyX-Code

\family sans
1 3.14159 5 .234 3.0e7 1E-7
\end_layout

\begin_layout Standard
String literals are sequences of characters enclosed in double quotes (
\family sans
"
\family default
).
 A double quote is placed into a string literal by preceding it with a backslash
 (
\family sans

\begin_inset Formula $\backslash$
\end_inset


\family default
).
 A backslash is inserted into a string by preceding it with a backslash.
 Strings of zero length are permitted.
\end_layout

\begin_layout LyX-Code

\family sans
"" "a string" "string with a 
\begin_inset Formula $\backslash$
\end_inset

"" "string with a 
\begin_inset Formula $\backslash\backslash$
\end_inset

"
\end_layout

\begin_layout Standard
Non-printing characters are inserted into strings via escape sequences:
 one to three characters following a backslash.
 Here are the 
\family sans
nab
\family default
 string escapes and their meanings:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bell (a for audible alarm)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Back space
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Form feed (new page)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
New line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
r
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Carriage return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Horizontal tab
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vertical tab
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Literal double quote
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\backslash

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Literal backspace
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
ooo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Octal character
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
xhh
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hex character (hh is 1 or 2 hex digits
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here are some strings with escapes:
\end_layout

\begin_layout LyX-Code

\family sans
"Molecule
\begin_inset Formula $\backslash$
\end_inset

tResidue
\begin_inset Formula $\backslash$
\end_inset

tAtom
\begin_inset Formula $\backslash$
\end_inset

n"
\end_layout

\begin_layout LyX-Code

\family sans
"
\begin_inset Formula $\backslash$
\end_inset

252Real quotes
\begin_inset Formula $\backslash$
\end_inset

272"
\end_layout

\begin_layout Standard
The second string has octal values, 
\family sans

\begin_inset Formula $\backslash$
\end_inset

252
\family default
, the left double quote, and
\family sans
 
\begin_inset Formula $\backslash$
\end_inset

272,
\family default
 the right double quote.
 
\end_layout

\begin_layout Subsection

\series bold
Operators
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses several additional 1 or 2 character symbols as operators.
 Operators combine literals and identifiers into expressions.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="26" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Precedence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Associates
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
( )
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
expression grouping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array indexing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unary 
\begin_inset Formula $-$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
negation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
right to left
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
!
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cross product
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dot product
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
multiplication
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
division
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
modulus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
addition, concatenation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
binary 
\begin_inset Formula $-$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
subtraction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
less than
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
less than or equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
==
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
equal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
!=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not equal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
greater than or equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
greater than
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=~
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
match
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
!~
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
doesn't match
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hashed array member
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 atom in molecule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
&&
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
and
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
||
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
or
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
assignment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
right to left
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Special Characters
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses braces (
\family sans
{}
\family default
) to group statements into compound statements and statements and declarations
 into function bodies.
 The semicolon (
\family sans
;
\family default
) is used to terminate statements.
 The comma (
\family sans
,
\family default
) separates items in parameter lists and declarations.
 The sharp (
\family sans
#
\family default
) used in column 1 designates a preprocessor directive, which invokes the
 standard C preprocessor to provide constants, macros and file inclusion.
 A 
\family sans
#
\family default
 in any other column, except in a comment or a literal string is an error.
 Two consecutive forward slashes (
\family sans
//
\family default
) indicate that the rest of the line is a comment which is ignored.
 All other characters except white space (spaces, tabs, newlines and formfeeds)
 are illegal except in literal strings and comments.
\end_layout

\begin_layout Section

\series bold
Higher-level constructs
\end_layout

\begin_layout Subsection

\series bold
Variables
\end_layout

\begin_layout Standard
A variable is a name given to a part of memory that is used to hold data.
 Every 
\family sans
nab
\family default
 variable has type which determines how the computer interprets the variable's
 contents.
 
\family sans
nab
\family default
 provides 10 data types.
 They are the numeric types 
\family sans
int
\family default
 and 
\family sans
float
\family default
 which are translated into the underlying C compiler's 
\family sans
int
\family default
 and 
\family sans
double
\family default
 respectively.*
\end_layout

\begin_layout Standard
The 
\family sans
string
\family default
 type is used to hold null (zero byte) terminated (C) character strings.
 The 
\family sans
file
\family default
 type is used to access files (equivalent to C's 
\family sans
FILE *
\family default
).
 There are three types—
\family sans
atom
\family default
, 
\family sans
residue
\family default
 and 
\family sans
molecule
\family default
 for creating and working with molecules.
 The 
\family sans
point
\family default
 type holds three 
\family sans
float
\family default
 values which can represent the X, Y and Z coordinates of a point or the
 components of a 3-vector.
 The 
\family sans
matrix
\family default
 type holds 16 
\family sans
float
\family default
 values in a 4
\begin_inset Formula $\times$
\end_inset

4 matrix and the 
\family sans
bounds
\family default
 type is used to hold distance bounds and other information for use in distance
 geometry calculations.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 string variables are mapped into C 
\family sans
char *
\family default
 variables which are allocated as needed and freed when possible.
 However, all of this is invisible at the 
\family sans
nab
\family default
 level where 
\family sans
string
\family default
s are atomic objects.
 The 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
 types become pointers to the appropriate C 
\family sans
struct
\family default
s.
 
\family sans
point
\family default
 and 
\family sans
matrix
\family default
 are implemented as 
\family sans
float [3]
\family default
 and 
\family sans
float [4][4]
\family default
 respectively.
 Again the 
\family sans
nab
\family default
 compiler automatically generates all the C code required to makes these
 types appear as atomic objects.
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 variable must be declared.
 All declarations for functions or variables in the main block must precede
 the first executable statement of that block.
 Also all declarations in a user defined 
\family sans
nab
\family default
 function must precede the first executable statement of that function.
 An 
\family sans
nab
\family default
 variable declaration begins with the reserved word that specifies the variable'
s type followed by a comma separated list of identifiers which become variables
 of that type.
 Each declaration ends with a semicolon.
\end_layout

\begin_layout LyX-Code

\family sans
int i, j, j;
\end_layout

\begin_layout LyX-Code

\family sans
matrix mat;
\end_layout

\begin_layout LyX-Code

\family sans
point origin;
\end_layout

\begin_layout Standard
Six 
\family sans
nab
\family default
 types—
\family sans
string
\family default
, 
\family sans
file
\family default
, 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
 use the predefined identifier 
\family sans
NULL
\family default
 to indicate a non-existent object of these types.
 
\family sans
nab
\family default
 builtin functions returning objects of these types return 
\family sans
NULL
\family default
 to indicate that the object could not be created.
 
\family sans
nab
\family default
 considers a 
\family sans
NULL
\family default
 value to be false.
 The empty 
\family sans
nab
\family default
 string 
\family sans
""
\family default
 is 
\shape italic
not
\shape default
 equal to 
\family sans
NULL
\family default
.
\end_layout

\begin_layout Subsection

\series bold
Attributes
\end_layout

\begin_layout Standard
Four 
\family sans
nab
\family default
 types—
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
point
\family default
—have attributes which are elements of their internal structure directly
 accessible at the 
\family sans
nab
\family default
 level.
 Attributes are accessed via the select operator (
\family sans
.
\family default
) which takes a variable as its left hand operand and an attribute name
 (an identifier) as its right.
 The general form is 
\begin_inset space ~
\end_inset


\end_layout

\begin_layout LyX-Code

\shape italic
\emph on
var
\family sans
\shape default
.
\family default
\shape italic
attr
\end_layout

\begin_layout Standard
Most attributes behave exactly like ordinary variables of the same type.
 However, some attributes are read only.
 They are not permitted to appear as the left hand side of an assignment.
 When a read only attribute is passed to an 
\family sans
nab
\family default
 function, it is copied into temporary variable which in turn is passed
 to the function.
 Read only attributes are not permitted to appear as destination variables
 in 
\family sans
scanf()
\family default
 parameter lists.
 Attribute names are kept separate from variable and function names and
 since attributes can only appear to the right of select there is no conflict
 between variable and attribute names.
 For example, if 
\family sans
x
\family default
 is a 
\family sans
point
\family default
, then
\end_layout

\begin_layout LyX-Code

\family sans
x // the point variable x
\end_layout

\begin_layout LyX-Code

\family sans
x.x // x coordinate of x
\end_layout

\begin_layout LyX-Code

\family sans
.x // Error!
\end_layout

\begin_layout Standard
Here is the complete list of 
\family sans
nab
\family default
 attributes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Atom attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Write?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
atomname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ordinarily taken from columns 13-16 of an input pdb file, or from a residue
 library.
 Spaces are removed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
atomnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the atom starting at 
\family sans
1
\family default
 for 
\shape italic
each
\shape default
 strand in the molecule.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tatomnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
total
\shape default
 number of the atom starting at 
\family sans
1
\family default
.
 Unlike 
\family sans
atomnum
\family default
, 
\family sans
tatomnum
\family default
 does not restart at 
\family sans
1
\family default
 for each strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fullname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The fully qualified atom name, having the form
\shape italic
 strandnum
\family sans
\shape default
:
\family default
\shape italic
resnum
\family sans
\shape default
:
\family default
\shape italic
atomname
\shape default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
resid
\shape default
 of the residue containing this atom; see the 
\series bold
Residue attributes
\series default
 table.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the residue containing this atom.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the residue containing the atom.

\family sans
 resnum
\family default
 starts at 
\family sans
1
\family default
 for 
\shape italic
each
\shape default
 strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tresnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
total
\shape default
 number of the residue containing this atom starting at 
\family sans
1
\family default
.
 Unlike 
\family sans
resnum
\family default
, 
\family sans
tresnum
\family default
 does not restart at 
\family sans
1
\family default
 for each strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the strand containing this atom.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the strand containing this atom.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
point
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
point
\family default
 variable giving the atom's position.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x,y,z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The Cartesian coordinates of this atom
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
charge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Atomic charge
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
radius
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dielectric radius
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User-definable integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User-definable float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Residue attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Write?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
A 6-character string, ordinarily taken from columns 22-27 of a PDB file.
 It can be re-set to something else, but should always be either empty or
 exactly 6 characters long, since this string is used (if it is not empty)
 by
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\emph on
\noun default
\color inherit
putpdb
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Three-character identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the residue.

\family sans
 resnum
\family default
 starts at 
\family sans
1
\family default
 for 
\shape italic
each
\shape default
 strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tresnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
total
\shape default
 number of the residue, starting at 
\family sans
1
\family default
.
 Unlike 
\family sans
resnum
\family default
, 
\family sans
tresnum
\family default
 does not restart at 
\family sans
1
\family default
 for each strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the strand containing this residue.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the strand containing this residue.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Molecule attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Write?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natoms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of atoms in the molecule.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nresidues
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of residues in the molecule.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nstrands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of strands in the molecule.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Arrays
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 supports two kinds of arrays—ordinary arrays where the selector is a comma
 separated list of integer expressions and associative or 
\begin_inset Quotes eld
\end_inset

hashed
\begin_inset Quotes erd
\end_inset

 arrays where the selector is a character string.
 The set of character strings that is associated with data in a hashed array
 is called its keys.
 Array elements may be of any 
\family sans
nab
\family default
 type.
 All the dimensions of an ordinary array are indexed from 
\family sans
1
\family default
 to 
\begin_inset Formula $Nd$
\end_inset

 , where 
\begin_inset Formula $Nd$
\end_inset

 is the size of the 
\shape italic
d th
\shape default
 dimension.
 Non parameter array declarations are similar to scalar declarations except
 the variable name is followed by either a comma separated list of integer
 constants surrounded by square brackets (
\family sans
[]
\family default
) for ordinary arrays or the reserved word 
\family sans
hashed
\family default
 in square brackets for associative arrays.
 Associative arrays have no predefined size.
\end_layout

\begin_layout LyX-Code

\family sans
float energy[ 20 ], surface[ 13,13 ];
\end_layout

\begin_layout LyX-Code

\family sans
int attr[ dynamic, dynamic ];
\end_layout

\begin_layout LyX-Code

\family sans
molecule structs[ hashed ];
\end_layout

\begin_layout Standard
The syntax for multi-dimensional arrays like that for Fortran, not C.
 The 
\shape italic
nab2c
\shape default
 compiler linearizes all index references, and the underlying C code sees
 only single-dimension arrays.
 Arrays are stored in "column-order", so that the most-rapidly varying index
 is the first index, as in Fortran.
 Multi-dimensional 
\family sans
int
\family default
 or 
\family sans
float
\family default
 arrays created in 
\shape italic
nab
\shape default
 can generally be passed to Fortran routines expecting the analogous construct.
\end_layout

\begin_layout Standard
Dynamic arrays are not allocated space upon program startup, but are created
 and freed by the 
\family sans
allocate
\family default
 and 
\family sans
deallocate
\family default
 statements:
\end_layout

\begin_layout LyX-Code

\family sans
allocate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
allocate
\end_layout

\end_inset

 attr[ i, j ];
\end_layout

\begin_layout LyX-Code

\family sans
....
\end_layout

\begin_layout LyX-Code

\family sans
deallocate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
deallocate
\end_layout

\end_inset

 attr;
\end_layout

\begin_layout Standard
Here 
\family sans
i
\family default
 and 
\family sans
j
\family default
 must be integer expressions that may be evaluated at run-time.
 It is an error (generally fatal) to refer to the contents of such an array
 before it has been allocated or after it has been deallocated.
\end_layout

\begin_layout Subsection

\series bold
Expressions
\end_layout

\begin_layout Standard
Expressions use operators to combine variables, constants and function values
 into new values.
 
\family sans
nab
\family default
 uses standard algebraic notation (
\family sans
a+b*c
\family default
, etc) for expressions.
 Operators with higher precedence are evaluated first.
 Parentheses are used to alter the evaluation order.
 The complete list of 
\family sans
nab
\family default
 operators with precedence levels and associativity is listed under 
\series bold
Operators
\series default
.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 permits mixed mode arithmetic in that 
\family sans
int
\family default
 and 
\family sans
float
\family default
 data may be freely combined in expressions as long as the operation(s)
 are defined.
 The only exceptions are that the modulus operator (
\family sans
%
\family default
) does not accept 
\family sans
float
\family default
 operands, and that subscripts to ordinary arrays must be integer valued.
 In all other cases except parameter passing and assignment, when an 
\family sans
int
\family default
 and 
\family sans
float
\family default
 are combined by an operator, the 
\family sans
int
\family default
 is converted to 
\family sans
float
\family default
 then the operation is executed.
 In the case of parameter passing, 
\family sans
nab
\family default
 requires (but does not check) that actual parameters passed to functions
 have the same type as the corresponding formal parameters.
 As for assignment (
\family sans
=
\family default
) the right hand side is converted to the type of the left hand side (as
 long as both are numeric) and then assigned.
 
\family sans
nab
\family default
 treats assignment like any other binary operator which permits multiple
 assignments (
\family sans
a=b=c
\family default
) as well as 
\begin_inset Quotes eld
\end_inset

embedded
\begin_inset Quotes erd
\end_inset

 assignments like:
\end_layout

\begin_layout LyX-Code

\family sans
if( mol = newmolecule() ) ...
\end_layout

\begin_layout Standard
nab relational operators are strictly binary.
 Any two objects can be compared provided that both are numeric, both are
 
\family sans
string
\family default
 or both are the same type.
 Comparisons for objects other than 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 are limited to tests for equality.
 Comparisons between 
\family sans
file
\family default
, 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
 objects test for 
\begin_inset Quotes eld
\end_inset

pointer
\begin_inset Quotes erd
\end_inset

 equality, meaning that if the pointers are the same, the objects are same
 and thus equal, but if the pointers are different, no inference about the
 actual objects can be made.
 The most common comparison on objects of these types is against 
\family sans
NULL
\family default
 to see if the object was correctly created.
 Note that as 
\family sans
nab
\family default
 considers 
\family sans
NULL
\family default
 to be false the following expressions are equivalent.
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
var
\shape default
 
\family sans
== NULL )...

\family default
 is the same as 
\family sans
if( !
\family default
\shape italic
var
\shape default
 
\family sans
)...
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
var
\shape default
 
\family sans
!= NULL )...

\family default
 is the same as 
\family sans
if(
\family default
 
\shape italic
var
\shape default
 
\family sans
)...
\end_layout

\begin_layout Standard
The Boolean operators 
\family sans
&&
\family default
 and 
\family sans

\begin_inset Formula $\vert\vert$
\end_inset


\family default
 evaluate only enough of an expression to determine its truth value.
 
\family sans
nab
\family default
 considers the value 
\family sans
0
\family default
 to be false and 
\shape italic
any
\shape default
 nonzero value to be true.
 
\family sans
nab
\family default
 supports direct assignment and concatenation of string values.
 The infix 
\family sans
+
\family default
 is used for 
\family sans
string
\family default
 concatenation.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several infix vector operations for 
\family sans
point
\family default
 values.
 They can be assigned and 
\family sans
point
\family default
 valued functions are permitted.
 Two 
\family sans
point
\family default
 values can be added or subtracted.
 A 
\family sans
point
\family default
 can be multiplied or divided by a 
\family sans
float
\family default
 or an 
\family sans
int
\family default
.
 The unary minus can be applied to a 
\family sans
point
\family default
 which has the same effect as multiplying it by 
\family sans
-1
\family default
.
 Finally, the at sign (
\family sans
@
\family default
) is used to form the dot product of two 
\family sans
point
\family default
s and the circumflex (
\family sans
 ̂
\family default
) is used to form their cross product.
\end_layout

\begin_layout Subsection

\series bold
Regular expressions
\end_layout

\begin_layout Standard
The 
\shape italic
=
\begin_inset Formula $\sim$
\end_inset


\shape default
 and 
\shape italic
!
\begin_inset Formula $\sim$
\end_inset


\shape default
 operators (match and not match) have strings on the left-hand-sides and
 
\shape italic
regular expression
\shape default
 strings on their right-hand-sides.
 These regular expressions are interpreted according to standard conventions
 drawn from the UNIX libraries.
\end_layout

\begin_layout Subsection

\series bold
Atom Expressions
\end_layout

\begin_layout Standard
An atom expression is a character string that contains one or more patterns
 that match a set of atom names in a molecule.
 Atom expressions contain three substrings separated by colons (
\family sans
:
\family default
).
 They represent the strand, residue and atom parts of the atom expression.
 Each subexpression consists of a comma (
\family sans
,
\family default
) separated list of patterns, or for the residue part, patterns and/or number
 ranges.
 Several atom expressions may be placed in a single character string by
 separating them with the vertical bar (
\family sans

\begin_inset Formula $\vert$
\end_inset


\family default
).
\end_layout

\begin_layout Standard
Patterns in atom expressions are similar to Unix shell expressions.
 Each pattern is a sequence of 1 or more single character patterns and/or
 stars (
\family sans
*
\family default
).
 The star matches 
\shape italic
zero
\shape default
 or more occurrences of 
\shape italic
any
\shape default
 single character.
 Each part of an atom expression is composed of a comma separated list of
 limited regular expressions, or in the case of the residue part, limited
 regular expressions and/or ranges.
 A 
\shape italic
range
\shape default
 is a number or a pair of numbers separated by a dash.
 A 
\shape italic
regular expression
\shape default
 is a sequence of ordinary characters and 
\begin_inset Quotes eld
\end_inset

metacharacters
\begin_inset Quotes erd
\end_inset

.
 Ordinary characters represent themselves, while the metacharacters are
 operators used to construct more complicated patterns from the ordinary
 characters.
 All characters except 
\family sans
?
\family default
, 
\family sans
*
\family default
, 
\family sans
[
\family default
, 
\family sans
]
\family default
, 
\family sans
-
\family default
, 
\family sans
,
\family default
(comma), 
\family sans
:
\family default
 and 
\family sans

\begin_inset Formula $\vert$
\end_inset


\family default
 are ordinary characters.
 Regular expressions and the strings they match follow these rules.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
aexpr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
matches
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An ordinary character matches itself.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A question mark matches any single character.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A star matches any run of zero of more characters.
 The pattern * matches anything.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[xyz]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A character class.
 It matches a single occurrence of any character between the [ and the ].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[^xyz]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A 
\begin_inset Quotes eld
\end_inset

negated
\begin_inset Quotes erd
\end_inset

 character class.
 It matches a single occurrence of any character not between the ̂ and the
 ].
 Character ranges, f-l , are permitted in both types of character class.
 This is a shorthand for all characters beginning with f up to and including
 l.
 Useful ranges are 0-9 for all the digits and a-zA-Z for all the letters.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The dash is used to delimit ranges in characters classes and to separate
 numbers in residue ranges.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
$
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The dollar sign is used in a residue range to represent the 
\begin_inset Quotes eld
\end_inset

last
\begin_inset Quotes erd
\end_inset

 residue without having to know its number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The comma separates regular expressions and/or ranges in an atom expression
 part.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The colon separates the parts of an atom expression.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
|
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The vertical bar separates atom expressions in the same character string.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The backslash is used as an escape.
 Any character including metacharacters following a backslash matches itself.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Atom expressions match the 
\shape italic
entire
\shape default
 name.
 The pattern 
\family sans
C
\family default
, matches only 
\family sans
C
\family default
, not 
\family sans
CA
\family default
, 
\family sans
HC
\family default
, etc.
 To match any name that begins with 
\family sans
C
\family default
 use 
\family sans
C*
\family default
; to match any name that ends with 
\family sans
C
\family default
, use 
\family sans
*C
\family default
; to match any name containing a 
\family sans
C
\family default
, use 
\family sans
*C*
\family default
.
 A table of examples was given in chapter 2.
\end_layout

\begin_layout Subsection

\series bold
Format Expressions
\end_layout

\begin_layout Standard
A format expression is a special character string that is used to direct
 the conversion between the computer's internal data representations and
 their character equivalents.
 
\family sans
nab
\family default
 uses the underlying C compiler's 
\family sans
printf()
\family default
/
\family sans
scanf()
\family default
 system to provide formatted I/O.
 This section provides a short introduction to this system.
 For the complete description, consult any standard C reference.
 Note that since 
\family sans
nab
\family default
 supports fewer types than its underlying C compiler, formatted I/O options
 pertaining to the data subtypes (
\family sans
h
\family default
,
\family sans
l
\family default
,
\family sans
L
\family default
) are not applicable to 
\family sans
nab
\family default
 format expressions.
\end_layout

\begin_layout Standard
An input format string is a mixture of ordinary characters, 
\shape italic
spaces
\shape default
 and format descriptors.
 An output format string is mixture of ordinary characters including spaces
 and format descriptors.
 Each format descriptor begins with a percent sign (
\family sans
%
\family default
) followed by several optional characters describing the format and ends
 with single character that specifies the type of the data to be converted.
 Here are the most common format descriptors.
 The 
\family sans
...

\family default
 represent optional characters described below.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a character
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert and integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...lf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...s
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a literal %
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Input and output format descriptors and format expressions resemble each
 other and in many cases the same format expression can be used for both
 input and output.
 However, the two types of format descriptors have different options and
 their actions are sufficiently distinct to consider in some detail.
 Generally, C based formatted output is more useful than C based formatted
 input.
\end_layout

\begin_layout Standard
When an input format expression is executed, it is scanned at most once
 from left to right.
 If the current format expression character is an ordinary character (anything
 but space or 
\family sans
%
\family default
), it must match the current character in the input stream.
 If they match then both the current character of the format expression
 and current character of the stream are advanced one character to the right.
 If they don't match, the scan ends.
 If the current format expression character is a space or a run of spaces
 and if the current input stream is one or more 
\begin_inset Quotes eld
\end_inset

white space
\begin_inset Quotes erd
\end_inset

 characters (space, tab, 
\shape italic
newline
\shape default
), then both the format and input stream are advanced to the next non-white
 space character.
 If the input format is one or more spaces but the current character of
 the input stream is non-blank, then only the format expression is advanced
 to the next non-blank character.
 If the current format character is a percent sign, the format descriptor
 is used to convert the next 
\begin_inset Quotes eld
\end_inset

field
\begin_inset Quotes erd
\end_inset

 in the input stream.
 A field is a sequence of non-blank characters surrounded by white space
 or the beginning or end of the stream.
 This means that a format descriptor will 
\shape italic
skip
\shape default
 white space including newlines to find non blank characters to convert,
 even if it is the first element of the format expression.
 This implicit scanning is what limits the ability of C based formatted
 input to read fixed format data that contains any spaces.
\end_layout

\begin_layout Standard
Note that 
\family sans
lf
\family default
 is used to input a NAB 
\shape italic
float
\shape default
 variable, rather than the 
\family sans
f
\family default
 argument that would be used in C.
 This is because 
\shape italic
float
\shape default
 in NAB is converted to 
\shape italic
double
\shape default
 in the output C code (see 
\shape italic
defreal.h
\shape default
 if you want to change this behavior.) Ideally, the NAB compiler should parse
 the format string, and make the appropriate substitutions, but this is
 not (yet) done: NAB translates the format string directly into the C code,
 so that the NAB code must also generally use 
\family sans
lf
\family default
 as a format descriptor for floating point values.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 input format descriptors have two options, a field width, and an assignment
 suppression indicator.
 The field width is an integer which specifies how much of current 
\shape italic
field
\shape default
 and not the input stream is to be converted.
 Conversion begins with the first character of the field and stops when
 the correct number of characters have been converted or white space is
 encountered.
 A star (
\family sans
*
\family default
) option indicates that the field is to be converted, but the result of
 the conversion is not stored.
 This can be used to skip unwanted items in a data stream.
 The order of the two options does not matter.
\end_layout

\begin_layout Standard
The execution of an output format expression is somewhat different.
 It is scanned once from left to right.
 If the current character is not a percent sign, it placed on the output
 stream.
 Thus spaces have no special significance in formatted output.
 When the scan encounters a percent sign it replaces the entire format descripto
r with the properly formatted value of the corresponding output expression.
\end_layout

\begin_layout Standard
Each output format descriptor has four optional attributes—width, alignment,
 padding and precision.
 The width is the 
\shape italic
minimum
\shape default
 number of characters the data is to occupy for output.
 Padding controls how the field will be filled if the number of characters
 required for the data is less than the field width.
 Alignment specifies whether the data is to start in the first character
 of the field (left aligned) or end in the last (right aligned).
 Finally precision, which applies only to string and float conversions controls
 how much of the string is be converted or how many digits should follow
 the decimal point.
\end_layout

\begin_layout Standard
Output field attributes are specified by optional characters between the
 initial percent sign and the final data type character.
 Alignment is first, with left alignment specified by a minus sign (
\family sans
-
\family default
).
 Any other character after the percent sign indicates right alignment.
 Padding is specified next.
 Padding depends on both the alignment and the type of the data being converted.
 Character conversions (
\family sans
%c
\family default
) are always filled with spaces, regardless of their alignment.
 Left aligned conversions are also always filled with spaces.
 However, right aligned string and numeric conversions can use a 
\family sans
0
\family default
 to indicate that left fill should be zeroes instead of spaces.
 In addition numeric conversions can also specify an optional + to indicate
 that non-negative numbers should be preceded by a plus sign.
 The default action for numeric conversions is that negative numbers are
 preceded by a minus, and other numbers have no sign.
 If both 
\family sans
0
\family default
 and 
\family sans
+
\family default
 are specified, their order does not matter.
\end_layout

\begin_layout Standard
Output field width and precision are last and are specified by one or two
 integers or stars (
\family sans
*
\family default
) separated by a period (
\family sans
.
\family default
).
 The first number (or star) is the field width, the second is its precision.
 If the precision is not specified, a default precision is chosen based
 on the conversion type.
 For floats (
\family sans
%f
\family default
), it is six decimal places and for strings it is the entire string.
 Precision is not applicable to character or integer conversions and is
 ignored if specified.
 Precision may be specified without the field width by use of single integer
 (or star) preceded by a period.
 Again, the action is conversion type dependent.
 For strings (
\family sans
%s
\family default
), the action is to print the first 
\begin_inset Formula $N$
\end_inset

 characters of the string or the entire string, whichever is shorter.
 For floats (
\family sans
%f
\family default
), it will print 
\begin_inset Formula $N$
\end_inset

 decimal places but will extend the field to whatever size if required to
 print the whole number part of the float.
 The use of the star (
\family sans
*
\family default
) as an output width or precision indicates that the width or precision
 is specified as the next argument in the conversion list which allows for
 runtime widths and precisions.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ouput format options
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Alignment
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left justified
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
right justified
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Padding
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%d, 
\family sans
%f
\family default
, 
\family sans
%s
\family default
 only, left fill with zeros, right fill with spaces.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
%d
\family default
, 
\family sans
%f
\family default
 only, precede non-negative numbers with a 
\family sans
+
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left and right fill with spaces.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Width & precision
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
minimum
\shape default
 field width of 
\begin_inset Formula $W$
\end_inset

.
 
\begin_inset Formula $W$
\end_inset

 is either an integer or a 
\family sans
*
\family default
 where the star indicates that the width is the next argument in the parameter
 list.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W.P
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
minimum
\shape default
 field width of 
\begin_inset Formula $W$
\end_inset

, with a precision of 
\begin_inset Formula $P$
\end_inset

.

\shape italic
 W
\shape default
,
\begin_inset Formula $P$
\end_inset

 are integers or stars, where stars indicate that they are to be set from
 the appropriate arguments in the parameter list.
 Precision is ignored for 
\family sans
%c
\family default
 and 
\family sans
%d
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.P
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
%s
\family default
, print the first 
\begin_inset Formula $P$
\end_inset

 characters of the string or the entire string whichever is shorter.
 
\family sans
%f
\family default
, print 
\begin_inset Formula $P$
\end_inset

 decimal places in a field wide enough to hold the integer and fractional
 parts of the number.
 
\family sans
%c
\family default
 and 
\family sans
%d
\family default
, use whatever width is required.
 Again 
\begin_inset Formula $P$
\end_inset

 is either an integer or a star where the star indicates that it is to be
 taken from the next expression in the parameter list.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
%c
\family default
, 
\family sans
%d
\family default
, 
\family sans
%s
\family default
, use whatever width is required to exactly hold the data.
 
\family sans
%f
\family default
, use a precision of 6 and whatever width is required to hold the data.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\series bold
Statements
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 statements describe the action the 
\family sans
nab
\family default
 program is to perform.
 The expression statement evaluates expressions.
 The 
\family sans
if
\family default
 statement provides a two way branch.
 The 
\family sans
while
\family default
 and 
\family sans
for
\family default
 statements provide loops.
 The 
\family sans
break
\family default
 statement is used to 
\begin_inset Quotes eld
\end_inset

short circuit
\begin_inset Quotes erd
\end_inset

 or exit these loops.
 The 
\family sans
continue
\family default
 statement advances a 
\family sans
for
\family default
 loop to its next iteration.
 The 
\family sans
return
\family default
 statement assigns a function's value and returns control to the caller.
 Finally a list of statements can be enclosed in braces (
\family sans
{}
\family default
) to create a compound statement.
\end_layout

\begin_layout Subsection

\series bold
Expression Statement
\end_layout

\begin_layout Standard
An expression statement is an expression followed by a semicolon.
 It evaluates the expression.
 Many expression statements include an assignment operator and its evaluation
 will update the values of those variables on the left hand side of the
 assignment operator.
 These kinds of expression statements are usually called 
\begin_inset Quotes eld
\end_inset

assignment statements
\begin_inset Quotes erd
\end_inset

 in other languages.
 Other expression statements consist of a single function call with its
 result ignored.
 These statements take the place of 
\begin_inset Quotes eld
\end_inset

call statements
\begin_inset Quotes erd
\end_inset

 in other languages.
 Note that an expression statement can contain 
\shape italic
any
\shape default
 expression, even ones that have no lasting effect.
\end_layout

\begin_layout LyX-Code

\family sans
mref = getpdb( "5p21.pdb" ); // "assignment" stmt
\end_layout

\begin_layout LyX-Code

\family sans
m = getpdb( "6q21.pdb" );
\end_layout

\begin_layout LyX-Code

\family sans
superimpose( m,"::CA",mref,"::CA" ); // "call" stmt
\end_layout

\begin_layout LyX-Code

\family sans
0; // expression stmt.
\end_layout

\begin_layout Subsection

\series bold
Delete Statement
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the 
\family sans
delete
\family default
 statement to remove elements of 
\family sans
hashed
\family default
 arrays.
 The syntax is
\end_layout

\begin_layout LyX-Code

\family sans
delete
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete
\end_layout

\end_inset

 
\shape italic
h_array
\family sans
\shape default
[
\family default
 
\shape italic
str
\shape default
 
\family sans
];
\end_layout

\begin_layout Standard
where 
\shape italic
h_array
\shape default
 is a 
\family sans
hashed
\family default
 array and 
\shape italic
str
\shape default
 is a 
\family sans
string
\family default
 valued expression.
 If the specified element is in 
\shape italic
h_array
\shape default
 it is removed; if not, the statement has no effect.
\end_layout

\begin_layout Subsection

\series bold
If Statement
\end_layout

\begin_layout Standard
The 
\family sans
if
\family default
 statement is used to choose between two options based on the value of the
 
\family sans
if
\family default
 expression.
 There are two kinds of 
\family sans
if
\family default
 statements—the simple 
\family sans
if
\family default
 and the 
\family sans
if-else
\family default
.
 The simple 
\family sans
if
\family default
 contains an expression and a statement.
 If the expression is true (any nonzero value), the statement is executed.
 If the expression is false (
\family sans
0
\family default
), the statement is skipped.
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)
\family default
 
\shape italic
true_stmt
\family sans
\shape default
;
\end_layout

\begin_layout Standard
The 
\family sans
if-else
\family default
 statement places two statements under control of the 
\family sans
if
\family default
.
 One is executed if the expression is true, the other if it is false.
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)
\end_layout

\begin_layout LyX-Code
 
\shape italic
  true_stmt
\family sans
\shape default
;
\end_layout

\begin_layout LyX-Code

\family sans
else
\end_layout

\begin_layout LyX-Code
 
\shape italic
  false_stmt
\family sans
\shape default
;
\end_layout

\begin_layout Subsection

\series bold
While Statement
\end_layout

\begin_layout Standard
The 
\family sans
while
\family default
 statement is used to execute the statement under its control as long as
 the the 
\family sans
while
\family default
 expression is true (nonzero).
 A compound statement is required to place more than one statement under
 the 
\family sans
while
\family default
 statement's control.
\end_layout

\begin_layout LyX-Code

\family sans
while(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)
\family default
 
\shape italic
stmt
\family sans
\shape default
;
\end_layout

\begin_layout LyX-Code

\family sans
while(
\family default
 
\shape italic
expr
\shape default
 
\family sans
) {
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmt_1
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmt_2
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code
 
\family sans
    ...
 
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmt_N
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Subsection

\series bold
For Statement
\end_layout

\begin_layout Standard
The 
\family sans
for
\family default
 statement is a loop statement that allows the user to include initialization
 and an increment as well as a loop condition in the loop header.
 The single statement under the control of the 
\family sans
for
\family default
 statement is executed as long as the condition is true (nonzero).
 A compound statement is required to place more than one statement under
 control of a 
\family sans
for
\family default
.
 The general form of the 
\family sans
for
\family default
 statement is
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\shape italic
expr_1
\family sans
\shape default
;
\family default
 
\shape italic
expr_2
\family sans
\shape default
;
\family default
 
\shape italic
expr_3
\shape default
 
\family sans
)
\family default
  
\shape italic
stmt
\family sans
\shape default
;
\end_layout

\begin_layout Standard
which behaves like
\end_layout

\begin_layout LyX-Code

\shape italic
expr_1
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code

\family sans
while(
\family default
 
\shape italic
expr_2
\shape default
 
\family sans
) {
\end_layout

\begin_layout LyX-Code
 
\shape italic
   stmt
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code
 
\shape italic
   expr_3
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Standard

\shape italic
expr_3
\shape default
 is generally an expression that computes the next value of the loop index.
 Any or all of 
\shape italic
expr_1
\shape default
, 
\shape italic
expr_2
\shape default
 or 
\shape italic
expr_3
\shape default
 can be omitted.
 An omitted 
\shape italic
expr_2
\shape default
 is considered to be true, thus giving rise to an 
\begin_inset Quotes eld
\end_inset

infinite
\begin_inset Quotes erd
\end_inset

 loop.
 Here are some 
\family sans
for
\family default
 loops.
\end_layout

\begin_layout LyX-Code

\family sans
for( i = 1; i 
\begin_inset Formula $<$
\end_inset

= 10; i = i + 1 )
\end_layout

\begin_layout LyX-Code

\family sans
printf( "%3d
\begin_inset Formula $\backslash$
\end_inset

n", i ); // print 1 to 10
\end_layout

\begin_layout LyX-Code

\family sans
for( ; ; ) // "infinite" loop
\end_layout

\begin_layout LyX-Code

\family sans
{
\end_layout

\begin_layout LyX-Code
 
\family sans
   getcmd( cmd ); // Exit better be in
\end_layout

\begin_layout LyX-Code
 
\family sans
   docmd( cmd ); // getcmd() or docmd().
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Standard
nab also includes a special kind of 
\family sans
for
\family default
 statement that is used to range over all the entries of a hashed array
 or all the atoms of a molecule.
 The forms are
\end_layout

\begin_layout LyX-Code

\family sans
// hashed version
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\family sans
\shape italic
str
\family default
\shape default
 
\family sans
in
\family default
 
\family sans
\shape italic
h_array
\family default
\shape default
 
\family sans
) ~
\shape italic
stmt
\shape default
;
\end_layout

\begin_layout LyX-Code

\family sans
// molecule version
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\family sans
\shape italic
a
\family default
\shape default
 
\family sans
in
\family default
 
\family sans
\shape italic
mol
\family default
\shape default
 
\family sans
) ~
\shape italic
stmt
\shape default
;
\end_layout

\begin_layout Standard
In the first code fragment, 
\shape italic
str
\shape default
 is string and 
\shape italic
h_array
\shape default
 is a hashed array.
 This loop sets 
\shape italic
str
\shape default
 to each key or string associated with data in 
\shape italic
h_array
\shape default
.
 Keys are returned in increasing lexical order.
 In the second code fragment 
\begin_inset Formula $a$
\end_inset

 is an atom and 
\shape italic
mol
\shape default
 is a molecule.
 This loop sets 
\begin_inset Formula $a$
\end_inset

 to each atom in 
\shape italic
mol
\shape default
.
 The first atom is the first atom in the first residue of the first strand.
 Once all the atoms in this residue have been visited, it moves to the first
 atom of the next residue in the first strand.
 Once all atoms in all residues in the first strand have been visited, the
 process is repeated on the second and subsequent strands in mol until all
 atoms have been visited.
 The order of the strands of molecule is the order in which they were created
 using 
\family sans
addstrand()
\family default
.
 Residues in each strand are numbered from 1 to 
\begin_inset Formula $N$
\end_inset

.
 The order of the atoms in a residue is the order in which the atoms were
 listed in the reslib entry or pdbfile that that residue derives from.
\end_layout

\begin_layout Subsection

\series bold
Break Statement
\end_layout

\begin_layout Standard
Execution of a 
\family sans
break
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
break
\end_layout

\end_inset

 statement exits the immediately enclosing 
\family sans
for
\family default
 or 
\family sans
while
\family default
 loop.
 By placing the 
\family sans
break
\family default
 under control of an 
\family sans
if
\family default
 conditional exits can be created.
 
\family sans
break
\family default
 statements are only permitted inside 
\family sans
while
\family default
 or 
\family sans
for
\family default
 loops.
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\shape italic
expr_1
\family sans
\shape default
;
\family default
 
\shape italic
expr_2
\family sans
\shape default
;
\family default
 
\shape italic
expr_3
\shape default
 
\family sans
) { 
\end_layout

\begin_layout LyX-Code
 
\family sans
    ...
 
\end_layout

\begin_layout LyX-Code
 
\family sans
   if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)  break; // "break" out of loop 
\end_layout

\begin_layout LyX-Code
 
\family sans
       ...
  
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Subsection

\series bold
Continue Statement
\end_layout

\begin_layout Standard
Execution of a 
\family sans
continue
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
continue
\end_layout

\end_inset

 statement causes the immediately enclosing 
\family sans
for
\family default
 loop to skip to its next value.
 If the next value causes the loop control expression to be false, the loop
 is exited.
 
\family sans
continue
\family default
 statements are permitted only inside 
\family sans
while
\family default
 and 
\family sans
for
\family default
 loops.
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\shape italic
expr_1
\family sans
\shape default
;
\family default
 
\shape italic
expr_2
\family sans
\shape default
;
\family default
 
\shape italic
expr_3
\shape default
 
\family sans
)  {
\end_layout

\begin_layout LyX-Code
 
\family sans
   ...
 if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
) continue; // "continue" with next value 
\end_layout

\begin_layout LyX-Code
 
\family sans
   ...
 
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Subsection

\series bold
Return Statement
\end_layout

\begin_layout Standard
The 
\family sans
return
\family default
 statement has two uses.
 It terminates execution of the current function returning control to the
 point immediately following the call and when followed by an optional expressio
n, returns the value of the expression as the value of the function.
 A function's execution also ends when it 
\begin_inset Quotes eld
\end_inset

runs off the bottom
\begin_inset Quotes erd
\end_inset

.
 When a function executes the last statement of its definition, it returns
 even if that statement is not a 
\family sans
return
\family default
.
 The value of the function in such cases is undefined.
\end_layout

\begin_layout LyX-Code

\family sans
return
\family default
 
\shape italic
expr
\family sans
\shape default
; // return the value
\family default
 
\shape italic
expr
\end_layout

\begin_layout LyX-Code

\family sans
return; // return, function value undefined.
\end_layout

\begin_layout Subsection

\series bold
Compound Statement
\end_layout

\begin_layout Standard
A compound statement is a list of statements enclosed in braces.
 Compound statements are required when a loop or an 
\family sans
if
\family default
 has to control more than one statement.
 They are also required to associate an 
\family sans
else
\family default
 with an 
\family sans
if
\family default
 other than the nearest unpaired one.
 Compound statements may include other compound statements.
 Unlike C, 
\family sans
nab
\family default
 compound statements are not blocks and may not include declarations.
\end_layout

\begin_layout Section
Structures
\end_layout

\begin_layout Standard
A struct is collection of data elements, where the elements are accessed
 via their names.
 Unlike arrays which require all elements of an array to have the same type,
 elements of a structure can have different types.
 Users define a struct via the reserved word `struct'.
 Here's a simple example, a struct that could be used to hold a complex
 number.
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } c;
\end_layout

\begin_layout Standard
This declares a nab variable, `c', of user defined type `struct cmplx_t'.
 The variable, c, has two float valued elements, `c.r', `c.i' which can be
 used like any other nab float variables:
\end_layout

\begin_layout LyX-Code
c.r = -2.0; ...
 5*c.i ...
 printf( "c.r,i = %8.3f, %8.3f
\backslash
n", c.r, c.i );
\end_layout

\begin_layout Standard
Now, let's look more closely at that struct declaration.
 
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } c;
\end_layout

\begin_layout Standard
As mentioned before, every nab struct begins with the reserved word struct.
 This must be followed by an identifier called the structure tag, which
 in this example is `cmplx_t'.
 Unlike C/C++, a nab struct can not be anonymous.
\end_layout

\begin_layout Standard
Following the structure tag is a list of the struct's element declarations
 surrounded by a left and right curly bracket.
 Element declarations are just like ordinary nab variable declarations:
 they begin with the type, followed by a comma separated list of variables
 and end with a semicolon.
 nab structures must contain at least one declaration containing at least
 one variable.
 Also, nab struct elements are currently restricted to scalar values of
 the basic nab types, so nab structs can not contain arrays or other structs.
 Note that in our example, both elements are in one declaration, but two
 declarations would have worked as well.
\end_layout

\begin_layout Standard
The whole assembly `struct ...
 }' serves to define a new type which can be used like any other nab type
 to declare variables of that type, in this example, a single scalar variable,
 `c'.
 And finally, like all other nab variable declarations, this one also ends
 with a semicolon.
\end_layout

\begin_layout Standard
Although nab structs can not contain arrays, nab allows users to create
 arrays, including dynamic and hashed arrays of structs.
 For example
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } a[ 10 ], da[ dynamic ], ha[ hashed ];
\end_layout

\begin_layout Standard
declares an ordinary, dynamic and hashed array of struct cmplx_t.
\end_layout

\begin_layout Standard
Up til now, we've only looked at complete struct declaration.
 Our example
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } c;
\end_layout

\begin_layout Standard
contains all the parts of a struct declaration.
 However there are two other forms of struct declarations.
 The first one is to define a type, as opposed to declaring variables:
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; };
\end_layout

\begin_layout Standard
defines a new type `struct cmplx_t' but does not declare any variables of
 this type.
 This is quite useful in that the type can be placed in a header file allowing
 it to be shared among parts of a larger program.
\end_layout

\begin_layout Standard
The othe form of a struct declaration is this short form:
\end_layout

\begin_layout LyX-Code
struct cmplx_t cv1, cv2;
\end_layout

\begin_layout Standard
This form can only be used once the type has been defined, either via a
 type declaration (ie not variable) or a complete type + variable declaration.
 In fact, once a struct type has been defined, all subsequent declarations
 of variables of that type, including parameters, must use the short form.
 
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; }; // define type type `struct cmplx_t' 
\end_layout

\begin_layout LyX-Code
struct cmplx_t c, ctab[ 10 ]; // define some vars
\end_layout

\begin_layout LyX-Code
int f( int s, struct cmplx_t ct[1] ) // func taking array of 
\end_layout

\begin_layout LyX-Code
                                     // struct cmplx_t { ...
 }; 
\end_layout

\begin_layout Section

\series bold
Functions
\end_layout

\begin_layout Standard
A function is a named group of declarations and statements that is executed
 as a unit by using the function's name in an expression.
 Functions may include special variables called parameters that enable the
 same function to work on different data.
 All 
\family sans
nab
\family default
 functions return a value which can be ignored in the calling expression.
 Expression statements consisting of a single function call where the return
 value is ignored resemble procedure call statements in other languages.
\end_layout

\begin_layout Standard
All parameters to user defined 
\family sans
nab
\family default
 functions are passed by reference.
 This means that each 
\family sans
nab
\family default
 parameter operates on the actual data that was passed to the function during
 the call.
 Changes made to parameters during the execution of the function will persist
 after the function returns.
 The only exception to this is if an expression is passed in as a parameter
 to a user defined 
\family sans
nab
\family default
 function.
 It this case, 
\family sans
nab
\family default
 evaluates the expression, stores its value in a compiler created temporary
 variable and uses that temporary variable as the actual parameter.
 For example if a user were to pass in the constant 1 to an 
\family sans
nab
\family default
 function which in turned used it and then assigned it the value 6, the
 6 would be stored in the temporary location and the external 1 would be
 unchanged.
\end_layout

\begin_layout Subsection

\series bold
Function Definitions
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 function definition begins with a header that describes the function value
 type, the function name and the parameters if any.
 If a function does not have parameters, an empty parameter list is still
 required.
 Following the header is a list of declarations and statements enclosed
 in braces.
 The function's declarations must precede all of its statements.
 A function can include zero or more declarations and/or zero or more statements.
 The empty function—no declarations and no statements is legal.
\end_layout

\begin_layout Standard
The function header begins with the reserved word specifying the type of
 the function.
 All 
\family sans
nab
\family default
 functions must be typed.
 An 
\family sans
nab
\family default
 function can return a single value of any 
\family sans
nab
\family default
 type.
 
\family sans
nab
\family default
 functions can not return 
\family sans
nab
\family default
 arrays.
 Following the type is an identifier which is the name of the function.
 Each parameter declaration begins with the parameter type followed by its
 name.
 Parameter declarations are enclosed in parentheses and separated by commas.
 If a function has no parameters, there is nothing between the parentheses.
 Here is the general form of a function definition:
\end_layout

\begin_layout LyX-Code

\shape italic
ftype fname
\family sans
\shape default
(
\family default
 
\shape italic
ptype1 parm1
\family sans
\shape default
, ...
 )
\end_layout

\begin_layout LyX-Code

\family sans
{
\end_layout

\begin_layout LyX-Code
 
\shape italic
  decls
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmts
\end_layout

\begin_layout LyX-Code

\family sans
};
\end_layout

\begin_layout Subsection

\series bold
Function Declarations
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 requires that every function be declared or made known to the compiler
 before it is used.
 Unfortunately this is not possible if functions used in one source file
 are defined in other source files or if two functions are mutually recursive.
 To solve these problem, 
\family sans
nab
\family default
 permits functions to be declared as well as defined.
 A function declaration resembles the header of a function definition.
 However, in place of the function body, the declaration ends with a semicolon
 or a semicolon preceded by either the word 
\family sans
c
\family default
 or the word 
\family sans
fortran
\family default
 indicating the external function is written in C or 
\family sans
Fortran
\family default
 instead of 
\family sans
nab
\family default
.
\end_layout

\begin_layout LyX-Code

\shape italic
ftype fname
\family sans
\shape default
(
\family default
 
\shape italic
ptype1 parm1
\family sans
\shape default
, ...
 )
\family default
 
\shape italic
flang
\family sans
\shape default
;
\end_layout

\begin_layout Section

\series bold
Points and Vectors
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 type 
\family sans
point
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
point
\end_layout

\end_inset

 is an object that holds three 
\family sans
float
\family default
 values.
 These values can represent the X, Y and Z coordinates of a point or the
 components of 3-vector.
 The individual elements of a 
\family sans
point
\family default
 variable are accessed via attributes or suffixes added to the variable
 name.
 The three 
\family sans
point
\family default
 attributes are 
\family sans
"x"
\family default
, 
\family sans
"y"
\family default
 and 
\family sans
"z"
\family default
.
 Many 
\family sans
nab
\family default
 builtin functions use, return or create 
\family sans
point
\family default
 values.
 When used in this context, the three attributes represent the point's X,
 Y and Z coordinates.
 
\family sans
nab
\family default
 allows users to combine point values with numbers in expressions using
 conventional algebraic or infix notation.
 
\family sans
nab
\family default
 does not support operations between numbers and 
\family sans
point
\family default
s where the number must be converted into a vector to perform the operation.
 For example, if 
\family sans
p
\family default
 is a 
\family sans
point
\family default
 then the expression 
\family sans
p + 1.

\family default
 is an error, as 
\family sans
nab
\family default
 does not know how to expand the scalar 1.
 into a 3-vector.
 The following table contains 
\family sans
nab point
\family default
 and vector operations.
 
\family sans
p
\family default
, 
\family sans
q
\family default
 are 
\family sans
point
\family default
 variables; 
\begin_inset Formula $s$
\end_inset

 a numeric expression.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Example
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Precedence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
Unary
\shape default
 
\family sans
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector negation, same as 
\family sans
-1 * p
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p ̂ q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compute the cross or vector product of 
\family sans
p
\family default
, 
\family sans
q
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p @ q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compute the scalar or dot product of 
\family sans
p
\family default
, 
\family sans
q
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $s$
\end_inset

 
\family sans
* p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiply 
\family sans
p
\family default
 by 
\begin_inset Formula $s$
\end_inset

, same as 
\family sans
p *
\family default
 
\begin_inset Formula $s$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p /
\family default
 
\begin_inset Formula $s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Divide 
\family sans
p
\family default
 by 
\begin_inset Formula $s$
\end_inset

, 
\family sans
s / p
\family default
 not allowed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p + q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector addition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
Binary
\shape default
 
\family sans
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p - q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector subtraction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
==
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p == q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test if 
\family sans
p
\family default
 and 
\family sans
q
\family default
 equal.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
!=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p != q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test if 
\family sans
p
\family default
 and 
\family sans
q
\family default
 are different.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p = q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the value of 
\family sans
p
\family default
 to 
\family sans
q
\family default
.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\series bold
String Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the following 
\family sans
awk
\family default
-like string functions.
 Unlike 
\family sans
awk
\family default
, the 
\family sans
nab
\family default
 functions do not have optional parameters or builtin variables that control
 the actions or receive results from these functions.
 
\family sans
nab string
\family default
s are indexed from 
\family sans
1
\family default
 to 
\begin_inset Formula $N$
\end_inset

 where 
\begin_inset Formula $N$
\end_inset

 is the number of characters in the string.
\end_layout

\begin_layout LyX-Code

\family sans
int length
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
length
\end_layout

\end_inset

( string s );
\end_layout

\begin_layout LyX-Code

\family sans
int index
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
index
\end_layout

\end_inset

( string s, string t );
\end_layout

\begin_layout LyX-Code

\family sans
int match
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
match
\end_layout

\end_inset

( string s, string r, int rlength );
\end_layout

\begin_layout LyX-Code

\family sans
string substr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substr
\end_layout

\end_inset

( string s, int pos, int len );
\end_layout

\begin_layout LyX-Code

\family sans
int split
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
split
\end_layout

\end_inset

( string s, string fields[], string fsep );
\end_layout

\begin_layout LyX-Code

\family sans
int sub
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sub
\end_layout

\end_inset

( string r, string s, string t );
\end_layout

\begin_layout LyX-Code

\family sans
int gsub
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gsub
\end_layout

\end_inset

( string r, string s, string t );
\end_layout

\begin_layout Standard
length() returns the length of the string 
\family sans
s
\family default
.
 Both 
\family sans
""
\family default
 and 
\family sans
NULL
\family default
 have length 
\family sans
0
\family default
.
 
\family sans
index()
\family default
 returns the position of the left most occurrence of 
\family sans
t
\family default
 in 
\family sans
s
\family default
.
 If 
\family sans
t
\family default
 is not in 
\family sans
s
\family default
, 
\family sans
index()
\family default
 returns 
\family sans
0
\family default
.
 
\family sans
match
\family default
 returns the position of the longest leftmost substring of 
\family sans
s
\family default
 that matches the regular expression 
\family sans
r
\family default
.
 The length of this substring is returned in 
\family sans
rlength
\family default
.
 If no substring of 
\family sans
s
\family default
 matches 
\family sans
r
\family default
, 
\family sans
match()
\family default
 returns 
\family sans
0
\family default
 and 
\family sans
rlength
\family default
 is set to 
\family sans
0
\family default
.
 
\family sans
substr()
\family default
 extracts the substring of length 
\family sans
len
\family default
 from 
\family sans
s
\family default
 beginning at position 
\family sans
pos
\family default
.
 If 
\family sans
len
\family default
 is greater than the rest of the string beginning at 
\family sans
pos
\family default
, return the substring from 
\family sans
pos
\family default
 to 
\begin_inset Formula $N$
\end_inset

 where 
\begin_inset Formula $N$
\end_inset

 is the length of the 
\family sans
string
\family default
.
 If 
\family sans
pos
\family default
 is 
\begin_inset Formula $<$
\end_inset

 
\family sans
1
\family default
 or 
\begin_inset Formula $>\quad N$
\end_inset

, return 
\family sans
""
\family default
.
\end_layout

\begin_layout Standard

\family sans
split()
\family default
 partitions 
\family sans
s
\family default
 into fields separated by 
\family sans
fsep
\family default
.
 These field strings are returned in the array 
\family sans
fields
\family default
.
 The number of fields is returned as the function value.
 The array 
\family sans
fields
\family default
 must be allocated before 
\family sans
split()
\family default
 is called and must be large enough to hold all the field strings.
 The action of 
\family sans
split()
\family default
 depends on the value of 
\family sans
fsep
\family default
.
 If 
\family sans
fsep
\family default
 is a string containing one or more blanks, the fields of 
\family sans
s
\family default
 are considered to be separated by 
\shape italic
runs
\shape default
 of white space.
 Also, leading and trailing white space in 
\family sans
s
\family default
 do not indicate an empty initial or final field.
 However, if 
\family sans
fsep
\family default
 contains any value but blank, then fields are considered to be delimited
 by 
\shape italic
single
\shape default
 characters from 
\family sans
fsep
\family default
 and initial and/or trailing 
\family sans
fsep
\family default
 characters do represent initial and/or trailing fields with values of 
\family sans
""
\family default
.
 
\family sans
NULL
\family default
 and the empty string 
\family sans
""
\family default
 have 
\family sans
0
\family default
 fields.
 If both 
\family sans
s
\family default
 and 
\family sans
fsep
\family default
 are composed of only white space then 
\family sans
s
\family default
 also has 
\family sans
0
\family default
 fields.
 If 
\family sans
fsep
\family default
 is not white space and 
\family sans
s
\family default
 consists of nothing but characters from 
\family sans
fsep
\family default
, 
\family sans
s
\family default
 will have 
\begin_inset Formula $N$
\end_inset

 + 1 fields of 
\family sans
""
\family default
 where 
\begin_inset Formula $N$
\end_inset

 is the number of characters of 
\family sans
s
\family default
.
\end_layout

\begin_layout Standard

\family sans
sub()
\family default
 replaces the leftmost, longest substring of the 
\emph on
target string
\emph default
 
\family sans
t
\family default
 that matches the 
\emph on
regular expression
\emph default
 
\family sans
r
\family default
 with the 
\emph on
substitution string
\emph default
 
\family sans
s
\family default
.
 
\family sans
gsub()
\family default
 replaces all non-overlapping substrings of 
\family sans
t
\family default
 that match the regular expression
\family sans
 r
\family default
 with the string 
\family sans
s
\family default
.
 Each function returns the number of substitutions made.
 Unlike 
\family sans
awk
\family default
, the regular expression 
\family sans
r
\family default
 is a string variable, with no surrounding '/' characters.
 For example:
\end_layout

\begin_layout LyX-Code
int nmatch;
\end_layout

\begin_layout LyX-Code
string regexp, substitute, target;
\end_layout

\begin_layout LyX-Code
target = 
\begin_inset Quotes eld
\end_inset

water, water, everywhere
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
regexp = 
\begin_inset Quotes eld
\end_inset

at
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
substitute = 
\begin_inset Quotes eld
\end_inset

ith
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
nmatch = gsub( regexp, substitute, target);
\end_layout

\begin_layout Standard
After this, 
\family typewriter
target
\family default
 will contain 
\begin_inset Quotes eld
\end_inset


\family typewriter
wither, wither, everywhere
\family default

\begin_inset Quotes erd
\end_inset

, and 
\family typewriter
nmatch
\family default
 will be 2.
\end_layout

\begin_layout Standard
The special substitute character '&' stands for the precise substring matched
 by the regular expression.
 Hence
\end_layout

\begin_layout LyX-Code
target = 
\begin_inset Quotes eld
\end_inset

daabaaa
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
sub( 
\begin_inset Quotes eld
\end_inset

a+
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

c&c
\begin_inset Quotes erd
\end_inset

, target);
\end_layout

\begin_layout Standard
will yield 
\begin_inset Quotes eld
\end_inset


\family typewriter
dcaacbaaa
\family default

\begin_inset Quotes erd
\end_inset

.
 Note what 
\begin_inset Quotes eld
\end_inset

leftmost, longest substring
\begin_inset Quotes erd
\end_inset

 means here: 
\begin_inset Quotes eld
\end_inset

lefmost
\begin_inset Quotes erd
\end_inset

 takes precedence over 
\begin_inset Quotes eld
\end_inset

longest
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section

\series bold
Math Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the builtin mathematical functions shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:NABmath"

\end_inset

.
 Since 
\family sans
nab
\family default
 is intended for chemical structure calculations which always measure angles
 in degrees, the argument to the trig functions—
\family sans
cos()
\family default
, 
\family sans
sin()
\family default
 and 
\family sans
tan()
\family default
— and the return value of the inverse trig functions—
\family sans
acos()
\family default
, 
\family sans
asin()
\family default
, 
\family sans
atan()
\family default
 and 
\family sans
atan2()
\family default
—are in degrees instead of radians as they are in other languages.
 Note that the pseudo-random number functions have a different calling sequence
 than in earlier versions of NAB; you may have to edit and re-compile earlier
 programs that used those routines.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="29" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Inverse Trig Functions.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float acos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
acos
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return 
\begin_inset Formula $\cos^{-1}(x)$
\end_inset

 in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float asin
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
asin
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return 
\begin_inset Formula $\sin^{-1}(x)$
\end_inset

 in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float atan
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atan
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return 
\begin_inset Formula $\tan^{-1}(x)$
\end_inset

 in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float atan2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atan2
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return tan -1 ( y / x ) in degrees.
 By keeping x and y separate, 90o can be returned without encountering a
 zero divide.
 Also, 
\family sans
atan2
\family default
 will return an angle in the full range [-180o, 180o].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Trig Functions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float cos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cos
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return cos( x ), where x is in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float sin
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sin
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return sin( x ), where x is in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float tan
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tan
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return tan( x ), where x is in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Conversion Functions.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float atof
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atof
\end_layout

\end_inset

( string str );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interpret the next run of non blank characters in 
\family sans
str
\family default
 as a 
\family sans
float
\family default
 and return its value.
 Return 
\family sans
0
\family default
 on error.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int atoi
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atoi
\end_layout

\end_inset

( string str );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interpret the next run of non blank characters in 
\family sans
str
\family default
 as an 
\family sans
int
\family default
 and return its value.
 Return 
\family sans
0
\family default
 on error.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Other Functions.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float rand2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rand2
\end_layout

\end_inset

();
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return a pseudo-random number in (0,1).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float gauss
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gauss
\end_layout

\end_inset

( float mean, float sd );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return a pseudo-random number taken from a Gaussian distribution with the
 given mean and standard deviation.
 The rand2() and gauss() routines share a common seed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int setseed
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setseed
\end_layout

\end_inset

( int seed );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset the pseudo-random number sequence with the new seed, which must be
 a negative integer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int rseed
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rseed
\end_layout

\end_inset

( );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use the system 
\family sans
time()
\family default
 command to set the random number sequence with a reasonably random seed.
 Returns the seed it used; this could be used in a later call to 
\family sans
setseed()
\family default
 to regenerate the same sequence of pseudo-random values.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float ceil
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ceil
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $\left\lceil x\right\rceil $
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float exp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exp
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $e^{x}$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float cosh
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cosh
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the hyperbolic cosine of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float fabs
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fabs
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $|x|$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float floor
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
floor
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $\left\lfloor x\right\rfloor $
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float fmod
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fmod
\end_layout

\end_inset

( float x, float y );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return r, the remainder of x with respect to y; the signs of r and y are
 the same.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float log
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
log
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the natural logarithm of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float log10
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
log10
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the base 10 logarithm of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float pow
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\end_layout

\end_inset

( float x, float y );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $x^{y}$
\end_inset

, 
\begin_inset Formula $x>0$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float sinh
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sinh
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the hyperbolic sine of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float tanh
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tanh
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the hyperbolic tangent of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float sqrt
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sqrt
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return positive square root of x, x 
\begin_inset Formula $>$
\end_inset

= 0.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:NABmath"

\end_inset

NAB built-in mathematical functions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
System Functions
\end_layout

\begin_layout LyX-Code

\family sans
int exit
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exit
\end_layout

\end_inset

( int i );
\end_layout

\begin_layout LyX-Code

\family sans
int system
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
system
\end_layout

\end_inset

( string cmd );
\end_layout

\begin_layout Standard
The function 
\family sans
exit()
\family default
 terminates the calling 
\family sans
nab
\family default
 program with return status 
\family sans
i
\family default
.
 
\family sans
system()
\family default
 invokes a subshell to execute 
\family sans
cmd
\family default
.
 The subshell is always 
\family sans
/bin/sh
\family default
.
 The return value of 
\family sans
system()
\family default
 is the return value of the subshell and not the command it executed.
\end_layout

\begin_layout Section

\series bold
I/O Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses the C I/O model.
 Instead of special I/O statements, 
\family sans
nab
\family default
 I/O is done via calls to special builtin functions.
 These function calls have the same syntax as ordinary function calls but
 some of them have different semantics, in that they accept both a variable
 number of parameters and the parameters can be various types.
 
\family sans
nab
\family default
 uses the underlying C compiler's 
\family sans
printf()
\family default
/
\family sans
scanf()
\family default
 system to perform I/O on 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 objects.
 I/O on 
\family sans
point
\family default
 is via their 
\family sans
float x
\family default
, 
\family sans
y
\family default
 and 
\family sans
z
\family default
 attributes.
 
\family sans
molecule
\family default
 I/O is covered in the next section, while 
\family sans
bounds
\family default
 can be written using 
\family sans
dumpbounds()
\family default
.
 Transformation matrices can be written using 
\family sans
dumpmatrix()
\family default
, but there is currently no builtin for reading them.
 The value of an 
\family sans
nab file
\family default
 object may be written by treating as an integer.
 Input to 
\family sans
file
\family default
 variables is not defined.
\end_layout

\begin_layout Subsection

\series bold
Ordinary I/O Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides these functions for stream or 
\family sans
FILE *
\family default
 I/O of 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 objects.
\end_layout

\begin_layout LyX-Code

\family sans
int fclose
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fclose
\end_layout

\end_inset

( file f );
\end_layout

\begin_layout LyX-Code

\family sans
file fopen
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fopen
\end_layout

\end_inset

( string fname, string mode );
\end_layout

\begin_layout LyX-Code

\family sans
int unlink
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
unlink
\end_layout

\end_inset

( string fname );
\end_layout

\begin_layout LyX-Code

\family sans
int printf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
printf
\end_layout

\end_inset

( string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int fprintf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fprintf
\end_layout

\end_inset

( file f, string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
string sprintf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sprintf
\end_layout

\end_inset

( string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int scanf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
scanf
\end_layout

\end_inset

( string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int fscanf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fscanf
\end_layout

\end_inset

( file f, string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int sscanf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sscanf
\end_layout

\end_inset

( string str, string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
string getline
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getline
\end_layout

\end_inset

( file f );
\end_layout

\begin_layout Standard
fclose() closes (disconnects) the file represented by 
\family sans
f
\family default
.
 It returns 
\family sans
0
\family default
 on success and 
\family sans
-1
\family default
 on failure.
 All open 
\family sans
nab
\family default
 files are automatically closed when the program terminates.
 However, since the number of open files is limited, it is a good idea to
 close open files when they are no longer needed.
 The system call 
\family sans
unlink
\family default
 removes (deletes) the file.
\end_layout

\begin_layout Standard

\family sans
fopen()
\family default
 attempts to open (prepare for use) the file named 
\family sans
fname
\family default
 with mode 
\family sans
mode
\family default
.
 It returns a valid 
\family sans
nab file
\family default
 on success, and NULL on failure.
 Code should thus check for a return value of NULL, and do the appropriate
 thing.
 (An alternative, 
\family sans
safe_fopen()
\family default
 sends an error message to 
\family sans
stderr
\family default
 and exits on failure; this is sometimes a convenient alternative to 
\family sans
fopen()
\family default
 itself, fitting with a general bias of 
\family sans
nab
\family default
 system functions to exit on failure, rather than to return error codes
 that must always be processed.) Here are the most common values for 
\family sans
mode
\family default
 and their meanings.
 For other values, consult any standard C reference.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3.5in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
fopen()
\family default
\series default
 
\series bold
mode values
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

r
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open for reading.
 The file 
\family sans
fname
\family default
 must exist and be readable by the user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

w
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open for writing.
 If the file exists and is writable by the user, truncate it to zero length.
 If the file does not exist, and if the directory in which it will exist
 is writable by the user, then create it.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open for appending.
 The file must exist and be writable by the user.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The three functions 
\family sans
printf()
\family default
, 
\family sans
fprintf()
\family default
 and 
\family sans
sprintf()
\family default
 are for formatted (ASCII) output to 
\family sans
stdout
\family default
, the file 
\family sans
f
\family default
 and a 
\family sans
string
\family default
.
 Strictly speaking, 
\family sans
sprintf()
\family default
 does not perform output, but is discussed here because it acts as if 
\begin_inset Quotes eld
\end_inset

writes
\begin_inset Quotes erd
\end_inset

 to a string.
 Each of these functions uses the format string 
\family sans
fmt
\family default
 to direct the conversion of the expressions that follow it in the parameter
 list.
 Format strings and expressions are discussed 
\series bold
Format Expressions
\series default
.
 The first format descriptor of 
\family sans
fmt
\family default
 is used to convert the first expression after 
\family sans
fmt
\family default
, the second descriptor, the next expression etc.
 If there are more expressions than format descriptors, the extra expressions
 are not converted.
 If there are fewer expressions than format descriptors, the program will
 likely die when the function tries to covert non-existent data.
\end_layout

\begin_layout Standard
The three functions 
\family sans
scanf()
\family default
, 
\family sans
fscanf()
\family default
 and 
\family sans
sscanf()
\family default
 are for formatted (ASCII) input from 
\family sans
stdin
\family default
, the file 
\family sans
f
\family default
 and the string 
\family sans
str
\family default
.
 Again, 
\family sans
sscanf()
\family default
 does not perform input but the function behaves like it is 
\begin_inset Quotes eld
\end_inset

reading
\begin_inset Quotes erd
\end_inset

 from 
\family sans
str
\family default
.
 The action of these functions is similar to their output counterparts in
 that the format expression in 
\family sans
fmt
\family default
 is used to direct the conversion of characters in the input and store the
 results in the variables specified by the parameters following 
\family sans
fmt
\family default
.
 Format descriptors in 
\family sans
fmt
\family default
 correspond to variables following 
\family sans
fmt
\family default
, with the first descriptor corresponding to the first variable, etc.
 If there are fewer descriptors than variables, then extra variables are
 not assigned; if there are more descriptors than variables, the program
 will most likely die due to a reference to a non-existent address.
\end_layout

\begin_layout Standard
There are two very important differences between 
\family sans
nab
\family default
 formatted I/O and C formatted I/O.
 In C, formatted input is assigned through pointers to the variables (
\family sans
&
\family default
\shape italic
var
\shape default
).
 In 
\family sans
nab
\family default
 formatted I/O, the compiler automatically supplies the addresses of the
 variables to be assigned The second difference is when a 
\family sans
string
\family default
 object receives data during an 
\family sans
nab
\family default
 formatted I/O.
 
\family sans
nab string
\family default
s are allocated when needed.
 However, in the case of any kind of 
\family sans
scanf()
\family default
 to a 
\family sans
string
\family default
 or the implied (and hidden) writing to a string with 
\family sans
sprintf()
\family default
, the number of characters to be written to the string is unknown until
 the string has been written.
 
\family sans
nab
\family default
 automatically allocates strings of length 256 to hold such data with the
 idea that 256 is usually big enough.
 However, there will be cases where it is not big enough and this will cause
 the program to die or behave strangely as it will overwrite other data.
\end_layout

\begin_layout Standard
Also note that the default precision for floats in 
\shape italic
nab
\shape default
 is double precision (see 
\family sans
$AMBERHOME/AmberTools/src/nab/defreal.h
\family default
, since this could be changed, or may be different on your system.) Formats
 for floats for the 
\shape italic
scanf
\shape default
 functions then need to be "%lf" rather than "%f".
\end_layout

\begin_layout Standard
The 
\family sans
getline()
\family default
 function returns a string that has the next line from file 
\family sans
f
\family default
.
 The end-of-line character has been stripped off.
\end_layout

\begin_layout Subsection
matrix I/O
\end_layout

\begin_layout Standard
NAB uses 4x4 matrices to represent coordinate transformations:
\end_layout

\begin_layout LyX-Code
 r  r  r 0 
\end_layout

\begin_layout LyX-Code
 r  r  r 0 
\end_layout

\begin_layout LyX-Code
 r  r  r 0 
\end_layout

\begin_layout LyX-Code
dx dy dz 1
\end_layout

\begin_layout Standard
The r's are a 3x3 rotation matrix, and the d's are the translations along
 the X,Y and Z axes.
\end_layout

\begin_layout Standard
NAB coordinates are row vectors which are transformed by appending a 1 to
 each point (x,y,z) -> (x,y,z,1), post multiplying by the transformation
 matrix, and then discarding the final 1 in the new point.
\end_layout

\begin_layout Standard
Two builtins are provided for reading/writing transformation matrices.
\end_layout

\begin_layout LyX-Code
matrix getmatrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getmatrix
\end_layout

\end_inset

(string filename); 
\end_layout

\begin_layout Standard
Read the matrix from the file with name filename.
 Use "-" to read a matrix from stdin.
 A matrix is 4 lines of 4 numbers.
 A line of less than 4 numbers is an error, but anything after the 4th number
 is ignored.
 Lines beginning with a '#' are comments.
 Lines after the 4th data line are not read.
 Return a matrix with all zeroes on error, which can be tested:
\end_layout

\begin_layout LyX-Code
mat = getmatrix("bad.mat"); 
\end_layout

\begin_layout LyX-Code
if(!mat){ fprintf(stderr, "error reading matrix
\backslash
n"); ...
 }
\end_layout

\begin_layout Standard
Keep in mind that nab transformations are intended for use on molecular
 coordinates, and that transformations like scaling and shearing [which
 can not be created with nab directly but can now be introduced via 
\emph on
getmatrix
\emph default
()] may lead to incorrect on non-sensical results.
\end_layout

\begin_layout LyX-Code
int putmatrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putmatrix
\end_layout

\end_inset

(string filename, matrix mat);
\end_layout

\begin_layout Standard
Write matrix mat to to file with name filename.
 Use "-" to write a matrix to stdout.
 There is currently no way to write matrix to stderr.
 A matrix is writen as 4 lines of 4 numbers.
 Return 0 on success and 1 on failure.
\end_layout

\begin_layout Section

\series bold
Molecule Creation Functions
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 molecule type has a complex and dynamic internal structure organized in
 a three level hierarchy.
 A 
\family sans
molecule
\family default
 contains zero or more named strands.
 Strand names are strings of any characters except white space and can not
 exceed 255 characters in length.
 Each strand in a molecule must have a unique name.
 Strands in different molecules may have the same name.
 A strand contains zero or more residues.
 Residues in each strand are numbered from 
\family sans
1
\family default
.
 There is no upper limit on the number of residues a strand may contain.
 Residues have names, which need not be unique.
 However, the combination of 
\shape italic
strand-name
\family sans
\shape default
:
\family default
\shape italic
res-num
\shape default
 is unique for every residue in a molecule.
 Finally residues contain one or more atoms.
 Each atom name in a residue should be distinct, although this is neither
 required nor checked by 
\family sans
nab
\family default
.
 
\family sans
nab
\family default
 uses the following functions to create and modify molecules.
\end_layout

\begin_layout LyX-Code

\family sans
molecule newmolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newmolecule
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\family sans
molecule copymolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
copymolecule
\end_layout

\end_inset

( molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int freemolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
freemolecule
\end_layout

\end_inset

( molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int freeresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
freeresidue
\end_layout

\end_inset

( residue r );
\end_layout

\begin_layout LyX-Code

\family sans
int addstrand
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addstrand
\end_layout

\end_inset

( molecule mol, string sname );
\end_layout

\begin_layout LyX-Code

\family sans
int addresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addresidue
\end_layout

\end_inset

( molecule mol, string sname, residue res );
\end_layout

\begin_layout LyX-Code

\family sans
int connectres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
connectres
\end_layout

\end_inset

( molecule mol, string sname, int res1, string aname1, 
\begin_inset Newline newline
\end_inset

          int res2, string aname2 );
\end_layout

\begin_layout LyX-Code

\family sans
int mergestr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mergestr
\end_layout

\end_inset

( molecule mol1, string str1, string end1, molecule mol2, string str2, string
 end2 );
\end_layout

\begin_layout Standard
newmolecule() creates an 
\begin_inset Quotes eld
\end_inset

empty
\begin_inset Quotes erd
\end_inset

 molecule—one with no strands, residues or atoms.
 It returns 
\family sans
NULL
\family default
 if it can not create it.
 
\family sans
copymolecule()
\family default
 makes a copy of an existing molecule and returns a 
\family sans
NULL
\family default
 on failure.
 
\family sans
freemolecule()
\family default
 and 
\shape italic
freeresidue()
\shape default
 are used to deallocate memory set aside for a molecule or residue.
 In most programs, these functions are usually not necessary, but should
 be used when a large number of molecules are being copied.
 Once a molecule has been created, 
\family sans
addstrand()
\family default
 is used to add one or more named strands.
 Strands can be added at any to a molecule.
 There is no limit on the number of strands in a molecule.
 Strands can be added to molecules created by 
\family sans
getpdb()
\family default
 or other functions as long as the strand names are unique.
 
\family sans
addstrand()
\family default
 returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 Finally 
\family sans
addresidue()
\family default
 is used to add residues to a strand.
 The first residue is numbered 
\family sans
1
\family default
 and subsequent residues are numbered 
\family sans
2
\family default
, 
\family sans
3
\family default
, etc.
 
\family sans
addresidue()
\family default
 also returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 requires that users explicitly make all inter-residue bonds.
 
\family sans
connectres()
\family default
 makes a bond between two atoms of 
\shape italic
different
\shape default
 residues of the strand with name 
\family sans
sname
\family default
.
 It returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 Atoms in different strands can not be bonded.
 The bonding between atoms in a residue is set by the residue library entry
 and can not be changed at runtime at the 
\family sans
nab
\family default
 level.
\end_layout

\begin_layout Standard
The last function 
\family sans
mergestr()
\family default
 is used to merge two strands of the same molecule or copy a strand of the
 second molecule into a strand of the first.
 The residues of a strand are ordered from 
\family sans
1
\family default
 to 
\begin_inset Formula $N$
\end_inset

, where 
\begin_inset Formula $N$
\end_inset

 is the number of residues in that strand.
 
\family sans
nab
\family default
 imposes no chemical ordering on the residues in a strand.
 However, since the strands are generally ordered, there are four ways to
 combine the two strands.
 
\family sans
mergestr()
\family default
 uses the two values 
\family sans
"first"
\family default
 and 
\family sans
"last"
\family default
 to stand for residues 1 and 
\begin_inset Formula $N$
\end_inset

.
 The four combinations and their meanings are shown in the next table.
 In the table, 
\family sans
str1
\family default
 has 
\begin_inset Formula $N$
\end_inset

 residues and 
\family sans
str2
\family default
 has 
\begin_inset Formula $M$
\end_inset

 residues.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
end1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
end2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are reversed and then inserted before those of 
\family sans
str1
\family default
: M , ..., 2, 1 : 1 , 2 , ..., N
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are inserted before those of 
\family sans
str1
\family default
: 1 , 2, ..., M : 1 , 2 , ..., N
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are inserted after those of 
\family sans
str1
\family default
: 1 , 2 , ..., N : 1 , 2 , ..., M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are reversed and then inserted after those of 
\family sans
str1
\family default
: 1 , 2 , ..., N : M , ..., 2 , 1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\series bold
Creating Biopoloymers
\end_layout

\begin_layout LyX-Code

\family sans
molecule linkprot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
linkprot
\end_layout

\end_inset

( string strandname, string seq, string reslib );
\end_layout

\begin_layout LyX-Code

\family sans
molecule link_na
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
link
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

na
\end_layout

\end_inset

( string strandname, string seq, string reslib, string natype, 
\begin_inset Newline newline
\end_inset

         string opts );
\end_layout

\begin_layout Standard
Although many 
\family sans
nab
\family default
 functions don't care what kind of molecule they operate on, many operations
 require molecules that are compatible with the Amber force field libraries
 (see Chapter 6).
 The best and most general way to do this is to use tleap commands, described
 in Chapter 8).
 The 
\shape italic
linkprot()
\shape default
 and 
\shape italic
link_na()
\shape default
 routines given here are limited commands that may sometimes be useful,
 and are included for backwards compatibility with earlier versions of NAB.
\end_layout

\begin_layout Standard

\family sans
linkprot()
\family default
 takes a strand identifier and a sequence, and returns a molecule with this
 sequence.
 The molecule has an extended structure, so that the 
\begin_inset Formula $\phi$
\end_inset

, 
\begin_inset Formula $\psi$
\end_inset

and 
\begin_inset Formula $\omega$
\end_inset

 angles are all 180o .
 The 
\shape italic
reslib
\shape default
 input determines which residue library is used; if it is an empty string,
 the AMBER 94 all-atom library is used, with charged end groups at the N
 and C termini.
 All 
\family sans
nab
\family default
 residue libraries are denoted by the suffix 
\family sans
.rlb
\family default
 and 
\family sans
LEaP
\family default
 residue libraries are denoted by the suffix 
\family sans
.lib
\family default
.
 If 
\shape italic
reslib
\shape default
 is set to "nneut", "cneut" or "neut", then neutral groups will be used
 at the N-terminus, the C-terminus, or both, respectively.
\end_layout

\begin_layout Standard
The 
\family sans
seq
\family default
 string should give the amino acids using the one-letter code with upper-case
 letters.
 Some non-standard names are: "H" for histidine with the proton on the 
\begin_inset Formula $\delta$
\end_inset

 position; "h" for histidine with the proton at the 
\begin_inset Formula $\epsilon$
\end_inset

 position; "3" for protonated histidine; "n" for an acetyl blocking group;
 "c" for an HNMe blocking group, "a" for an NH 2 group, and "w" for a water
 molecule.
 If the sequence contains one or more "
\begin_inset Formula $\vert$
\end_inset

" characters, the molecule will consist of separate polypeptide strands
 broken at these positions.
\end_layout

\begin_layout Standard
The 
\family sans
link_na()
\family default
 routine works much the same way for DNA and RNA, using an input residue
 library to build a single-strand with correct local geometry but arbitrary
 torsion angles connecting one residue to the next.
 
\family sans
natype
\family default
 is used to specify either DNA or RNA.
 If the 
\shape italic
opts
\shape default
 string contains a "5", the 5' residue will be "capped" (a hydrogen will
 be attached to the O5' atom); if this string contains a "3" the O3' atom
 will be capped.
\end_layout

\begin_layout Standard
The newer (and generally recommended) way to generate biomolecules uses
 the 
\shape italic
getpdb_prm()
\shape default
 function described in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:NABmm"

\end_inset

.
\end_layout

\begin_layout Section

\series bold
Fiber Diffraction Duplexes in NAB
\begin_inset CommandInset label
LatexCommand label
name "sec:fdhelix"

\end_inset


\end_layout

\begin_layout Standard
The primary function in NAB for creating Watson-Crick duplexes based on
 fibre-diffraction data is fd_helix:
\end_layout

\begin_layout LyX-Code

\family sans
molecule fd_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fd
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix
\end_layout

\end_inset

( string helix_type, string seq, string acid_type );
\end_layout

\begin_layout Standard
fd_helix() takes as its arguments three strings - the helix type of the
 duplex, the sequence of one strand of the duplex, and the acid type (which
 is "dna" or "rna").
 Available helix types are as follows:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Helix type options for fd_helix()
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
arna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed A-RNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
aprna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed A'-RNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
lbdna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed B-DNA (Langridge)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
abdna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed B-DNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
sbdna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Left Handed B-DNA (Sasisekharan)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
adna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed A-DNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The molecule returns contains a Watson-Crick double-stranded helix, with
 the helix axis along 
\begin_inset Formula $z$
\end_inset

.
 For a further explanation of the fd_helix code, please see the code comments
 in the source file fd_helix.nab.
\end_layout

\begin_layout Standard
References for the fibre-diffraction data:
\end_layout

\begin_layout Enumerate
Structures of synthetic polynucleotides in the A-RNA and A'-RNA conformations.
 X-ray diffraction analyses of the molecule conformations of (polyadenylic
 acid) and (polyinosinic acid).(polycytidylic acid).
 Arnott, S.; Hukins, D.W.L.; Dover, S.D.; Fuller, W.; Hodgson, A.R.
 
\shape italic
J.Mol.
 Biol.

\shape default
 (1973), 81(2), 107-22.
\end_layout

\begin_layout Enumerate
Left-handed DNA helices.
 Arnott, S; Chandrasekaran, R; Birdsall, D.L.; Leslie, A.G.W.; Ratliff, R.L.
 
\shape italic
Nature
\shape default
 (1980), 283(5749), 743-5.
\end_layout

\begin_layout Enumerate
Stereochemistry of nucleic acids and polynucleotides.
 Lakshimanarayanan, A.V.; Sasisekharan, V.
 
\shape italic
Biochim.
 Biophys.
 Acta
\shape default
 204, 49-53.
\end_layout

\begin_layout Enumerate
Fuller, W., Wilkins, M.H.F., Wilson, H.R., Hamilton, L.D.
 and Arnott, S.
 (1965).
 
\shape italic
J.
 Mol.
 Biol.

\shape default
 12, 60.
\end_layout

\begin_layout Enumerate
Arnott, S.; Campbell Smith, P.J.; Chandraseharan, R.
 in 
\shape italic
Handbook of Biochemistry and Molecular Biology, 3rd Edition.
 Nucleic Acids–Volume II
\shape default
, Fasman, G.P., ed.
 (Cleveland: CRC Press, 1976), pp.
 411-422.
\end_layout

\begin_layout Section

\series bold
Reduced Representation DNA Modeling Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for creating the reduced representation models
 of DNA described by R.
 Tan and S.
 Harvey.
\begin_inset CommandInset citation
LatexCommand cite
key "Tan89"
literal "true"

\end_inset

 This model uses only 3 pseudo-atoms to represent a base pair.
 The pseudo atom named 
\family sans
CE
\family default
 represents the helix axis, the atom named 
\family sans
SI
\family default
 represents the position of the sugar-phosphate backbone on the sense strand
 and the atom named 
\family sans
MA
\family default
 points into the major groove.
 The plane described by these three atoms ( and a corresponding virtual
 atom that represents the anti sugar-phosphate backbone ) represents quite
 nicely an all atom watson-crick base pair plane.
\end_layout

\begin_layout LyX-Code

\family sans
molecule dna3
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dna3
\end_layout

\end_inset

( int nbases, float roll, float tilt, float twist, float rise );
\end_layout

\begin_layout LyX-Code

\family sans
molecule dna3_to_allatom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dna3
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

to
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

allatom
\end_layout

\end_inset

( molecule m_dna3, string seq, string aseq, string reslib, string natype
 );
\end_layout

\begin_layout LyX-Code

\family sans
molecule allatom_to_dna3
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
allatom
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

to
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

dna3
\end_layout

\end_inset

( molecule m_allatom, string sense, string anti );
\end_layout

\begin_layout Standard
The function 
\family sans
dna3()
\family default
 creates a reduced representation DNA structure.
 
\family sans
dna3()
\family default
 takes as parameters the number of bases 
\family sans
nbases
\family default
, and four helical parameters 
\family sans
roll
\family default
, 
\family sans
tilt
\family default
, 
\family sans
twist
\family default
, and 
\family sans
rise
\family default
.
\end_layout

\begin_layout Standard

\family sans
dna3_to_allatom()
\family default
 makes an all-atom dna model from a dna3 molecule as input.
 The molecule 
\family sans
m_dna3
\family default
 is a dna3 molecule, and the strings 
\family sans
seq
\family default
 and 
\family sans
aseq
\family default
 are the sense and anti sequences of the all-atom helix to be constructed.
 Obviously, the number of bases in the all-atom model should be the same
 as in the dna3 model.
 If the string 
\family sans
aseq
\family default
 is left blank ( "" ), the sequence generated is the 
\family sans
wc_complement()
\family default
 of the sense sequence.
 
\family sans
reslib
\family default
 names the residue library from which the all-atom model is to be constructed.
 If left blank, this will default to 
\family sans
all_nucleic94.lib The last parameter is either "dna
\family default
" or "
\family sans
rna
\family default
" and defaults to 
\family sans
dna
\family default
 if left blank.
\end_layout

\begin_layout Standard
The 
\family sans
allatom_to_dna3()
\family default
 function creates a dna3 model from a double stranded all-atom helix.
 The function takes as parameters the input all-atom molecule 
\family sans
m_allatom
\family default
, the name of the sense strand in the all-atom molecule, 
\family sans
sense
\family default
 and the name of the anti strand, 
\family sans
anti
\family default
.
\end_layout

\begin_layout Section

\series bold
Molecule I/O Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for reading and writing molecule and residue
 objects.
\end_layout

\begin_layout LyX-Code

\family sans
residue getresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getresidue
\end_layout

\end_inset

( string rname, string rlib );
\end_layout

\begin_layout LyX-Code

\family sans
molecule getpdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getpdb
\end_layout

\end_inset

( string fname [, string options ] );
\end_layout

\begin_layout LyX-Code

\family sans
molecule getcif
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getcif
\end_layout

\end_inset

( string fname, string blockId );
\end_layout

\begin_layout LyX-Code

\family sans
int putpdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putpdb
\end_layout

\end_inset

( string fname, molecule mol [, string options ] );
\end_layout

\begin_layout LyX-Code

\family sans
int putcif
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putcif
\end_layout

\end_inset

( string fname, molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int putbnd
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putbnd
\end_layout

\end_inset

( string fname, molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int putdist
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putdist
\end_layout

\end_inset

( string fname, molecule mol );
\end_layout

\begin_layout Standard
The function 
\family sans
getresidue()
\family default
 returns a copy of the residue with name 
\family sans
rname
\family default
 from the residue library named 
\family sans
rlib
\family default
.
 If it can not do so it returns the value 
\family sans
NULL
\family default
.
\end_layout

\begin_layout Standard
The function 
\family sans
getpdb()
\family default
 converts the contents of the PDB file with name 
\family sans
fname
\family default
 into an 
\family sans
nab molecule
\family default
.
 
\family sans
getpdb()
\family default
 creates bonds between any two atoms in the same residue if their distance
 is less than: 1.20 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 if either atom is a hydrogen, 2.20 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 if either atom is a sulfur, and 1.85 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 otherwise.
 Atoms in different residues are never bonded by 
\family sans
getpdb()
\family default
.
 
\end_layout

\begin_layout Standard

\family sans
getpdb()
\family default
 creates a new strand each time the chain id changes or if the chain id
 remains the same and a 
\family sans
TER
\family default
 card is encountered.
 The strand name is the chain id if it is not blank and 
\family sans
"
\family default

\begin_inset Formula $N$
\end_inset


\family sans
"
\family default
, where 
\begin_inset Formula $N$
\end_inset

 is the number of that strand in the molecule beginning with 
\family sans
1
\family default
.
 For example, a PDB file containing chain with no chain ID, followed by
 chain 
\family sans
A
\family default
, followed by another blank chain would have three strands with names 
\family sans
"1"
\family default
, 
\family sans
"A"
\family default
 and 
\family sans
"3"
\family default
.
 
\family sans
getpdb()
\family default
 returns a molecule on success and 
\family sans
NULL
\family default
 on failure.
\end_layout

\begin_layout Standard
The optional final argument to 
\family sans
getpdb
\family default
 can be used for a variety of purposes, which are outlined in the table
 below.
\end_layout

\begin_layout Standard
The (experimental!) function 
\family sans
getcif
\family default
 is like 
\family sans
getpdb
\family default
, but reads an mmCIF (macro-molecular crystallographic information file)
 formatted file, and extracts "atom-site" information from data block 
\family sans
blockID
\family default
.
 You will need to compile and install the 
\family sans
cifparse
\family default
 library in order to use this.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="1in">
<column alignment="left" valignment="top" width="4in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align center

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-pqr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Put (or get) charges and radii into the columns following the xyz coordinates.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nobocc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do not put occupancy and b-factor into the columns following the xyz coordinates.
 This is implied if
\shape italic
 -pqr
\shape default
 is present, but may also be used to save space in the output file, or for
 compatibility with programs that do not work well if such data is present.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-brook
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convert atom and residue names to the conventions used in Brookhaven PDB
 (version 2) files.
 This often gives greater compatibility with other software that may expect
 these conventions to hold, but the conversion may not be what is desired
 in many cases.
 Also, put the first character of the atom name in column 78, a preliminary
 effort at identifying it as in the most recent PDB format.
 If the 
\shape italic
-brook
\shape default
 flag is not present, no conversion of atom and residue names is made, and
 no id is in column 78.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-wwpdb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Same as the 
\family sans
-brook
\family default
 option, except use the 
\begin_inset Quotes eld
\end_inset

wwPDB
\begin_inset Quotes erd
\end_inset

 (aka version 3) residue and atom naming scheme.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nocid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
For 
\emph on
getpdb
\emph default
, ignore the input chain id's (column 22 of PDB-format files), and generate
 strand names as consecutive integers.
 For 
\emph on
putpdb
\emph default
, do not put the chain-id in the output (i.e., if this flag is present, the
 chain-id column will be blank).
 This can be useful when many water molecules are present.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-allcid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set, create a chain ID for every strand in the molecule being written.
 Use the strand's name if it is an upper case letter, else use the next
 free upper case letter.
 Use a blank if no more upper case letters are available.
 Default is false.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-tr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do not start numbering residues over again when a new chain is encountered,
 i.e., the residue numbers are consecutive across chains, as required by some
 force-field programs like Amber.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Options-putpdb"

\end_inset

Options for getpdb and putpdb.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next group of builtins write various parts of the molecule 
\family sans
mol
\family default
 to the file 
\family sans
fname
\family default
.
 All return 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 If 
\family sans
fname
\family default
 exists and is writable, it is overwritten without warning.
 
\family sans
putpdb()
\family default
 writes the molecule 
\family sans
mol
\family default
 into the PDB file 
\family sans
fname
\family default
.
 If the "resid" of a residue has been set (either by using 
\family sans
getpdb
\family default
 to create the molecule, or by an explicit operation in an 
\family sans
nab
\family default
 routine) then columns 22-27 of the output pdb file will use it; otherwise,
 
\family sans
nab
\family default
 will assign a chain-id and residue number and use those.
 In this latter case, a molecule with a single strand will have a blank
 chain-id; if there is more than one strand, each strand is written as a
 separate chain with chain id 
\family sans
"A"
\family default
 assigned to the first strand in 
\family sans
mol
\family default
, 
\family sans
"B"
\family default
 to the second, etc.
 Options for 
\family sans
putpdb
\family default
 are given in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Options-putpdb"

\end_inset

.
\end_layout

\begin_layout Standard

\family sans
putbnd()
\family default
 writes the bonds of 
\family sans
mol
\family default
 into 
\family sans
fname
\family default
.
 Each bond is a pair of integers on a line.
 The integers refer to atom records in the corresponding PDB-style file.
 
\family sans
putdist()
\family default
 writes the interatomic distances between all atoms of 
\family sans
mol
\family default
 
\shape italic
a i , a j
\shape default
 where 
\begin_inset Formula $i$
\end_inset

<
\begin_inset Formula $j$
\end_inset

, in this seven column format.
\end_layout

\begin_layout LyX-Code

\family sans
rnum1 rname1 aname1 rnum2 rname2 aname2 distance
\end_layout

\begin_layout Section

\series bold
Other Molecular Functions
\end_layout

\begin_layout LyX-Code

\family sans
matrix superimpose
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
superimpose
\end_layout

\end_inset

( molecule mol, string aex1, molecule r_mol, string aex2 );
\end_layout

\begin_layout LyX-Code

\family sans
int rmsd
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rmsd
\end_layout

\end_inset

( molecule mol, string aex1, molecule r_mol, string aex2, float r );
\end_layout

\begin_layout LyX-Code

\family sans
float angle
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
angle
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, string aex3 );
\end_layout

\begin_layout LyX-Code

\family sans
float anglep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
anglep
\end_layout

\end_inset

( point pt1, point pt2, point pt3 );
\end_layout

\begin_layout LyX-Code

\family sans
float torsion
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
torsion
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, string aex3, string aex4 );
\end_layout

\begin_layout LyX-Code

\family sans
float torsionp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
torsionp
\end_layout

\end_inset

( point pt1, point pt2, point pt3, point pt4 );
\end_layout

\begin_layout LyX-Code

\family sans
float dist
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dist
\end_layout

\end_inset

( molecule mol, string aex1, string aex2 );
\end_layout

\begin_layout LyX-Code

\family sans
float distp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
distp
\end_layout

\end_inset

( point pt1, point pt2 );
\end_layout

\begin_layout LyX-Code

\family sans
int countmolatoms
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
countmolatoms
\end_layout

\end_inset

( molecule mol, string aex );
\end_layout

\begin_layout LyX-Code

\family sans
int sugarpuckeranal
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sugarpuckeranal
\end_layout

\end_inset

( molecule mol, int strandnum, int startres, int endres );
\end_layout

\begin_layout LyX-Code

\family sans
int helixanal
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
helixanal
\end_layout

\end_inset

( molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int plane
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
plane
\end_layout

\end_inset

( molecule mol, string aex, float A, float B, float C );
\end_layout

\begin_layout LyX-Code

\family sans
float molsurf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
molsurf
\end_layout

\end_inset

( molecule mol, string aex, float probe_rad );
\end_layout

\begin_layout Standard
superimpose() transforms molecule 
\family sans
mol
\family default
 so that the root mean square deviation between corresponding atoms in 
\family sans
mol
\family default
 and 
\family sans
r_mol
\family default
 is minimized.
 The corresponding atoms are those selected by the atom expressions 
\family sans
aex1
\family default
 applied to 
\family sans
mol
\family default
 and 
\family sans
aex2
\family default
 applied to 
\family sans
r_mol
\family default
.
 The atom expressions must select the same number of atoms in each molecule.
 No checking is done to insure that the atoms selected by the two atom expressio
ns actually correspond.
 
\family sans
superimpose()
\family default
 returns the transformation matrix it found.
 
\family sans
rmsd()
\family default
 computes the root mean square deviation between the pairs of corresponding
 atoms selected by applying 
\family sans
aex1
\family default
 to 
\family sans
mol
\family default
 and 
\family sans
aex2
\family default
 to 
\family sans
r_mol
\family default
 and returns the value in 
\family sans
r
\family default
.
 The two atom expressions must select the same number of atoms.
 Again, it is the user's responsibility to insure the two atom expressions
 select corresponding atoms.
 
\family sans
rmsd()
\family default
 returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
\end_layout

\begin_layout Standard

\family sans
angle()
\family default
 and 
\family sans
anglep()
\family default
 compute the angle in degrees between three points.
 
\family sans
angle()
\family default
 uses atoms expressions to determine the average coordinates of the sets.
 
\family sans
anglep()
\family default
 takes as an argument three explicit points.
 Similarly, 
\family sans
torsion()
\family default
 and 
\family sans
torsionp()
\family default
 compute a torsion angle in degrees defined by four points.
 
\family sans
torsion()
\family default
 uses atom expressions to specify the points.
 These atom expression match sets of atoms in 
\family sans
mol
\family default
.
 The points are defined by the average coordinates of the sets.
 
\family sans
torsionp()
\family default
 uses four explicit 
\family sans
point
\family default
s.
 Both functions return 
\family sans
0
\family default
 if the torsion angle is not defined.
\end_layout

\begin_layout Standard

\family sans
dist()
\family default
 and 
\family sans
distp()
\family default
 compute the distance in angstroms between two explicit atoms.
 
\family sans
dist()
\family default
 uses atom expressions to determine which atoms to include in the calculation.
 An atom expression which selects more than one atom results in the distance
 being calculated from the average coordinate of the selected atoms.
 
\family sans
distp()
\family default
 returns the distance between two explicit points.
 The function 
\family sans
countmolatoms()
\family default
 returns the number of atoms selected by 
\family sans
aex
\family default
 in 
\family sans
mol
\family default
.
\end_layout

\begin_layout Standard

\family sans
sugarpuckeranal()
\family default
 is a function that reports the various torsion angles in a nucleic acid
 structure.
 
\family sans
helixanal()
\family default
 is an interactive helix analysis function based on the methods described
 by Babcock 
\shape italic
et al..
\begin_inset CommandInset citation
LatexCommand cite
key "Babcock94"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
The 
\family sans
plane()
\family default
 routine takes an atom expression 
\family sans
aex
\family default
 and calculates the least-squares plane and returns the answer in the form
 z = Ax + By + C.
 It returns the number of atoms used to calculate the plane.
\end_layout

\begin_layout Standard
The 
\family sans
molsurf()
\family default
 routine is an NAB adaptation of Paul Beroza's program of the same name.
 It takes coordinates and radii of atoms matching the atom expression 
\shape italic
aex
\shape default
 in the input molecule, and returns the molecular surface area (the area
 of the solvent-excluded surface), in square angstroms.
 To compute the solvent-accessible area, add the probe radius to each atom's
 radius (using a 
\family sans
for( a in m )
\family default
 loop), and call 
\family sans
molsurf
\family default
 with a zero value for 
\family sans
probe_rad.
\end_layout

\begin_layout Section

\series bold
Debugging Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the following builtin functions that allow the user to write the
 contents of various 
\family sans
nab
\family default
 objects to an ASCII file.
 The file must be opened for writing before any of these functions are called.
\end_layout

\begin_layout LyX-Code

\family sans
int dumpmatrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpmatrix
\end_layout

\end_inset

( file, matrix mat );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpbounds
\end_layout

\end_inset

( file f, bounds b, int binary );
\end_layout

\begin_layout LyX-Code

\family sans
float dumpboundsviolations
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpboundsviolations
\end_layout

\end_inset

( file f, bounds b, int cutoff );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpmolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpmolecule
\end_layout

\end_inset

( file f, molecule mol, int dres, int datom, int dbond );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpresidue
\end_layout

\end_inset

( file f, residue res, int datom, int dbond );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpatom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpatom
\end_layout

\end_inset

( file f, residue res, int anum, int dbond );
\end_layout

\begin_layout LyX-Code

\family sans
int assert
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
assert
\end_layout

\end_inset

( condition );
\end_layout

\begin_layout LyX-Code

\family sans
int debug
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
debug
\end_layout

\end_inset

( expression(s) );
\end_layout

\begin_layout Standard
dumpmatrix() writes the 16 
\family sans
float
\family default
 values of 
\family sans
mat
\family default
 to the file 
\family sans
f
\family default
.
 The matrix is written as four rows of four numbers.
 
\family sans
dumpbounds()
\family default
 writes the distance bounds information contained in 
\family sans
b
\family default
 to the file 
\family sans
f
\family default
 using this eight column format:
\end_layout

\begin_layout LyX-Code

\family sans
atom-number1 atom-number2 lower upper
\end_layout

\begin_layout Standard
If 
\family sans
binary
\family default
 is set to a nonzero value, equivalent information is written in binary
 format, which can save disk-space, and is much faster to read back in on
 subsequent runs.
\end_layout

\begin_layout Standard

\family sans
dumpboundsviolations()
\family default
 writes all the bounds violations in the bounds object that are more than
 
\shape italic
cutoff
\shape default
, and returns the bounds violation energy.
 
\family sans
dumpmolecule()
\family default
 writes the contents of 
\family sans
mol
\family default
 to the file 
\family sans
f
\family default
.
 If 
\family sans
dres
\family default
 is 
\family sans
1
\family default
, then detailed residue information will also be written.
 If 
\family sans
datom
\family default
 or 
\family sans
dbond
\family default
 is 
\family sans
1
\family default
, then detailed atom and/or bond information will be written.
 
\family sans
dumpresidue()
\family default
 writes the contents of residue 
\family sans
res
\family default
 to the file 
\family sans
f
\family default
.
 Again if 
\family sans
datom
\family default
 or 
\family sans
dbond
\family default
 is 
\family sans
1
\family default
, detailed information about that residue's atoms and bonds will be written.
 Finally 
\family sans
dumpatom()
\family default
 writes the contents of the atom 
\family sans
anum
\family default
 of residue 
\family sans
res
\family default
 to the file 
\family sans
f
\family default
.
 If 
\family sans
dbond
\family default
 is 
\family sans
1
\family default
, bonding information about that atom is also written.
\end_layout

\begin_layout Standard
The 
\family sans
assert()
\family default
 statement will evaluate the condition expression, and terminate (with an
 error message) if the expression is not true.
 Unlike the corresponding "C" language construct (which is a macro), code
 is generated at compile time to indicate both the file and line number
 where the assertion failed, and to parse the condition expression and print
 the values of subexpressions inside it.
 Hence, for a code fragment like:
\end_layout

\begin_layout LyX-Code

\family sans
i=20; MAX=17;
\end_layout

\begin_layout LyX-Code

\family sans
assert( i 
\begin_inset Formula $<$
\end_inset

 MAX );
\end_layout

\begin_layout Standard
the error message will provide the assertion that failed, its location in
 the code, and the current values of "i" and "MAX".
 If the 
\shape italic
-noassert
\shape default
 flag is set at compile time, 
\family sans
assert
\family default
 statements in the code are ignored.
\end_layout

\begin_layout Standard
The 
\family sans
debug()
\family default
 statement will evaluate and print a comma-separated expression list along
 with the source file(s) and line number(s).
 Continuing the above example, the statement
\end_layout

\begin_layout LyX-Code

\family sans
debug( i, MAX );
\end_layout

\begin_layout Standard
would print the values of "i" and "MAX" to 
\shape italic
stdout
\shape default
, and continue execution.
 If the 
\shape italic
-nodebug
\shape default
 flag is set at compile time, 
\family sans
debug
\family default
 statements in the code are ignored.
\end_layout

\begin_layout Section

\series bold
Time and date routines
\end_layout

\begin_layout Standard
NAB incorporates a few interfaces to time and date routines:
\end_layout

\begin_layout LyX-Code

\family sans
string date
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
date
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\family sans
string timeofday
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
timeofday
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\family sans
string ftime
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ftime
\end_layout

\end_inset

( string fmt );
\end_layout

\begin_layout Standard
The 
\family sans
date()
\family default
 routine returns a string in the format "03/08/1999", and the 
\family sans
timeofday()
\family default
 routine returns the current time as "13:45:00".
 If you need access to more sophisticated time and date functions, the 
\family sans
ftime()
\family default
 routine is just a wrapper for the standard C routine 
\family sans
strftime
\family default
, where the format string is used to determine what is output; see standard
 C documentation for how this works.
\end_layout

\begin_layout Section
Computational resource consumption functions
\end_layout

\begin_layout Standard
NAB has a small number of functions to provide information about computational
 resources used during the run:
\end_layout

\begin_layout LyX-Code
int mme_timer
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme_timer
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code
int mme_rism_max_memory
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme_rism_max_memory
\end_layout

\end_inset

();
\end_layout

\begin_layout Standard

\family sans
mme_timer()
\family default
 provides tables of execution times for 
\family sans
mme
\family default
 functions executed.
 It does not provide a complete summary nor does it include functions not
 in the 
\family sans
mme
\family default
 family.
 It is, however, useful for identifying the most expensive routines.
 
\family sans
mme_rism_max_memory()
\family default
 reports the maximum amount of memory allocated during a 3D-RISM calculation.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:NABrigid"

\end_inset


\series bold
NAB: Rigid-Body Transformations
\end_layout

\begin_layout Standard
This chapter describes NAB functions to create and manipulate molecules
 through a variety of rigid-body transformations.
 This capability, when combined with distance geometry (described in the
 next chapter) offers a powerful approach to many problems in initial structure
 generation.
\end_layout

\begin_layout Section

\series bold
Transformation Matrix Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses 4
\begin_inset Formula $\times$
\end_inset

4 matrices to hold coordinate transformations.
 
\family sans
nab
\family default
 provides these functions to create transformation matrices.
\end_layout

\begin_layout LyX-Code

\family sans
matrix newtransform
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newtransform
\end_layout

\end_inset

( float dx, float dy, float dz, float rx, float ry, float rz );
\end_layout

\begin_layout LyX-Code

\family sans
matrix rot4
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, float ang );
\end_layout

\begin_layout LyX-Code

\family sans
matrix rot4p
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4p
\end_layout

\end_inset

( point p1, point p2, float angle );
\end_layout

\begin_layout Standard
newtransform() creates a 4
\begin_inset Formula $\times$
\end_inset

4 matrix that will rotate an object by 
\family sans
rz
\family default
 degrees about the Z axis, 
\family sans
ry
\family default
 degrees about the Y axis, 
\family sans
rx
\family default
 degrees about the X axis and then translate the rotated object by 
\family sans
dx
\family default
, 
\family sans
dy
\family default
, 
\family sans
dz
\family default
 along the X, Y and Z axes.
 All rotations and transformations are with respect the standard X, Y and
 Z axes centered at (0,0,0).
 
\family sans
rot4()
\family default
 and 
\family sans
rot4p()
\family default
 create transformation matrices that rotate an object about an arbitrary
 axis.
 The rotation amount is in degrees.
 
\family sans
rot4()
\family default
 uses two atom expressions to define an axis that goes from 
\family sans
aex1
\family default
 to 
\family sans
aex2
\family default
.
 If an atom expression matches more that one atom in 
\family sans
mol
\family default
, the average of the coordinates of the matched atoms are used.
 If an atom expression matches no atoms in 
\family sans
mol
\family default
, the zero matrix is returned.
 
\family sans
rot4p()
\family default
 uses explicit points instead of atom expressions to specify the axis.
 If 
\family sans
p1
\family default
 and 
\family sans
p2
\family default
 are the same, the zero matrix is returned.
\end_layout

\begin_layout Section

\series bold
Frame Functions
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule has a 
\begin_inset Quotes eld
\end_inset

frame
\begin_inset Quotes erd
\end_inset

 which is three orthonormal vectors and their origin.
 The frame acts like a handle attached to the molecule allowing control
 over its movement.
 Two frames attached to different molecules allow for precise positioning
 of one molecule with respect to the other.
 These functions are used in frame creation and manipulation.
 All return 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
\end_layout

\begin_layout LyX-Code

\family sans
int setframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframe
\end_layout

\end_inset

( int use, molecule mol, string org, string xtail, string xhead, 
\end_layout

\begin_layout LyX-Code

\family sans
           string ytail, string yhead );
\end_layout

\begin_layout LyX-Code

\family sans
int setframep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframep
\end_layout

\end_inset

( int use, molecule mol, point org, point xtail, point xhead, 
\end_layout

\begin_layout LyX-Code

\family sans
          point ytail, point yhead );
\end_layout

\begin_layout LyX-Code

\family sans
int alignframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
alignframe
\end_layout

\end_inset

( molecule mol, molecule r_mol );
\end_layout

\begin_layout Standard
setframe() and 
\family sans
setframep()
\family default
 create coordinate frames for molecule 
\family sans
mol
\family default
 from an origin and two independent vectors.
 In 
\family sans
setframe()
\family default
, the origin and two vectors are specified by atom expressions.
 These atom expressions match sets of atoms in 
\family sans
mol
\family default
.
 The average coordinates of the selected sets are used to define the origin
 (
\family sans
org
\family default
), an X-axis (
\family sans
xtail
\family default
 to 
\family sans
xhead
\family default
) and a Y-axis (
\family sans
ytail
\family default
 to 
\family sans
yhead
\family default
).
 The Z-axis is created as X
\begin_inset Formula $\times$
\end_inset

Y.
 Since it is unlikely that the original X and Y axes are orthogonal, the
 parameter 
\family sans
use
\family default
 specifies which of them is to be a real axis.
 If 
\family sans
use == 1
\family default
, then the specified X-axis is the real X-axis and Y is recreated from Z
\begin_inset Formula $\times$
\end_inset

X.
 If 
\family sans
use == 2
\family default
, then the specified Y-axis is the real Y-axis and X is recreated from Y
\begin_inset Formula $\times$
\end_inset

Z.
 
\family sans
setframep()
\family default
 works exactly the same way except the vectors and origin are specified
 as explicit 
\family sans
point
\family default
s.
\end_layout

\begin_layout Standard

\family sans
alignframe()
\family default
 transforms 
\family sans
mol
\family default
 to superimpose its frame on the frame of 
\family sans
r_mol
\family default
.
 If 
\family sans
r_mol
\family default
 is 
\family sans
NULL
\family default
, 
\family sans
alignframe()
\family default
 transforms 
\family sans
mol
\family default
 to superimpose its frame on the standard X,Y,Z directions centered at (0,0,0).
\end_layout

\begin_layout Section

\series bold
Functions for working with Atomic Coordinates
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for getting and setting user defined sets of
 molecular coordinates.
\end_layout

\begin_layout LyX-Code

\family sans
int setpoint
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setpoint
\end_layout

\end_inset

( molecule mol, string aex, point pt );
\end_layout

\begin_layout LyX-Code

\family sans
int setxyz_from_mol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setxyz
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

mol
\end_layout

\end_inset

( molecule mol, string aex, point pts[] );
\end_layout

\begin_layout LyX-Code

\family sans
int setxyzw_from_mol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setxyzw
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

mol
\end_layout

\end_inset

( molecule mol, string aex, float xyzw[] );
\end_layout

\begin_layout LyX-Code

\family sans
int setmol_from_xyz
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setmol
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

xyz
\end_layout

\end_inset

( molecule mol, string aex, point pts[] );
\end_layout

\begin_layout LyX-Code

\family sans
int setmol_from_xyzw
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setmol
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

xyzw
\end_layout

\end_inset

( molecule mol, string aex, float xyzw[] );
\end_layout

\begin_layout LyX-Code

\family sans
int transformmol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformmol
\end_layout

\end_inset

( matrix mat, molecule mol, string aex );
\end_layout

\begin_layout LyX-Code

\family sans
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue res, string aex );
\end_layout

\begin_layout Standard
setpoint() sets 
\family sans
pt
\family default
 to the average value of the coordinates of all atoms selected by the atom
 expression 
\family sans
aex
\family default
.
 If no atoms were selected it returns 
\family sans
1
\family default
, otherwise it returns a 
\family sans
0
\family default
.
 
\family sans
setxyz_from_mol()
\family default
 copies the coordinates of all atoms selected by the atom expression 
\family sans
aex
\family default
 to the 
\family sans
point
\family default
 array 
\family sans
pt
\family default
.
 It returns the number of atoms selected.
 
\family sans
setmol_from_xyz()
\family default
 replaces the coordinates of the selected atoms from the values in 
\family sans
pt
\family default
.
 It returns the number of replaced coordinates.
 The routines 
\family sans
setxyzw_from_mol
\family default
 and 
\family sans
setmol_from_xyzw
\family default
 work in the same way, except that they use four-dimensional coordinates
 rather than three-dimensional sets.
\end_layout

\begin_layout Standard

\family sans
transformmol()
\family default
 applies the transformation matrix 
\family sans
mat
\family default
 to those atoms of 
\family sans
mol
\family default
 that were selected by the atom expression 
\family sans
aex
\family default
.
 It returns the number of atoms selected.
 
\family sans
transformres()
\family default
 applies the transformation matrix 
\family sans
mat
\family default
 to those atoms of 
\family sans
res
\family default
 that were selected by the atom expression 
\family sans
aex
\family default
 and returns a transformed 
\shape italic
copy
\shape default
 of the input residue.
 It returns 
\family sans
NULL
\family default
 if the operation failed.
\end_layout

\begin_layout Section

\series bold
Symmetry Functions
\end_layout

\begin_layout Standard
Here we describe a set of NAB routines that provide an interface for rigid-body
 transformations based on crystallographic, point-group, or other symmetries.
 These are primarily higher-level ways to creating and manipulating sets
 of transformation matrices corresponding to common types of symmetry operations.
\end_layout

\begin_layout Subsection

\series bold
Matrix Creation Functions
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_cube
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MAT
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

cube, etc
\end_layout

\end_inset

( point pts[3], matrix mats[24] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_ico( point pts[3], matrix mats[60] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_octa( point pts[3], matrix mats[24] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_tetra( point pts[3], matrix mats[12] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_dihedral( point pts[3], int nfold, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_cyclic( point pts[2], float ang, int cnt, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_helix( point pts[2], float ang, float dst, int cnt, matrix mats[1]
 )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_orient( point pts[4], float angs[3], matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_rotate( point pts[2], float ang, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_translate( point pts[2], float dst, matrix mats[1] )
\end_layout

\begin_layout Standard
These two groups of functions produce arrays of matrices that can be applied
 to objects to generate point group symmetries (first group) or useful transform
ations (second group).
 The operations are defined with respect to a center and a set of axes specified
 by the points in the array 
\family sans
pts[]
\family default
.
 Every function requires a center and one axis which are 
\family sans
pts[1]
\family default
 and the vector 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 The other two points (if required) define two additional directions: 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[3]
\family default
 and 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[4]
\family default
.
 How these directions are used depends on the function.
\end_layout

\begin_layout Standard
The point groups generated by the functions 
\family sans
MAT_cube()
\family default
, 
\family sans
MAT_ico()
\family default
, 
\family sans
MAT_octa()
\family default
 and 
\family sans
MAT_tetra()
\family default
 have three internal 2-fold axes.
 While these 2-fold are orthogonal, the 2 directions specified by the three
 points in 
\family sans
pts[]
\family default
 need only be independent (not parallel).
 The 2-fold axes are constructed in this fashion.
 Axis-1 is along the direction 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 Axis-3 is along the vector 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
 
\begin_inset Formula $\times$
\end_inset

 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[3]
\family default
 and axis-2 is recreated along the vector axis-3 
\begin_inset Formula $\times$
\end_inset

 axis-1.
 Each of these four functions creates a fixed number of matrices.
\end_layout

\begin_layout Standard
Dihedral symmetry is generated by an N-fold rotation about an axis followed
 by a 2-fold rotation about a second axis orthogonal to the first axis.
 
\family sans
MAT_dihedral()
\family default
 produces matrices that generate this symmetry.
 The N-fold axis is 
\family sans
pts[0]
\begin_inset Formula $\to$
\end_inset

pts[1]
\family default
 and the second axis is created by the same orthogonalization process described
 above.
 Unlike the previous point group functions the number of matrices created
 by 
\family sans
MAT_dihedral()
\family default
 is not fixed but is equal to 
\begin_inset Formula $2\times nfold$
\end_inset

.
\end_layout

\begin_layout Standard

\family sans
MAT_cyclic()
\family default
 creates 
\family sans
cnt
\family default
 matrices that produce uniform rotations about the axis 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 The rotations are in multiples of the angle 
\family sans
ang
\family default
 beginning with o, and increasing by 
\family sans
ang
\family default
 until 
\family sans
cnt
\family default
 matrices have been created.
 
\family sans
cnt
\family default
 is required to be 
\begin_inset Formula $>$
\end_inset

 0, but 
\family sans
ang
\family default
 can be 0, in which case 
\family sans
MAT_cyclic
\family default
 returns 
\family sans
cnt
\family default
 copies of the identity matrix.
\end_layout

\begin_layout Standard

\family sans
MAT_helix()
\family default
 creates 
\family sans
cnt
\family default
 matrices that produce a uniform helical twist about the axis 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 The rotations are in multiples of 
\family sans
ang
\family default
 and the translations in multiples of 
\family sans
dst
\family default
.
 
\family sans
cnt
\family default
 must be 
\begin_inset Formula $>$
\end_inset

 0, but either 
\family sans
ang
\family default
 or 
\family sans
dst
\family default
 or both may be zero.
 If 
\family sans
ang
\family default
 is not 0, but 
\family sans
dst
\family default
 is, 
\family sans
MAT_helix()
\family default
 produces a uniform plane rotation and is equivalent to 
\family sans
MAT_cyclic()
\family default
.
 An 
\family sans
ang
\family default
 of 0 and a nonzero 
\family sans
dst
\family default
 produces matrices that generate a uniform translation along the axis.
 If both 
\family sans
ang
\family default
 and 
\family sans
dst
\family default
 are 0, the 
\family sans
MAT_helix()
\family default
 creates 
\family sans
cnt
\family default
 copies of the identity matrix.
\end_layout

\begin_layout Standard
The three functions 
\family sans
MAT_orient()
\family default
, 
\family sans
MAT_rotate()
\family default
 and 
\family sans
MAT_translate()
\family default
 are not really symmetry operations but are auxiliary operations that are
 useful for positioning the objects which are to be operated on by the true
 symmetry operators.
 Two of these functions 
\family sans
MAT_rotate()
\family default
 and MAT_translate() produce a single matrix that either rotates or translates
 an object along the axis 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 A zero 
\family sans
ang
\family default
 or 
\family sans
dst
\family default
 is acceptable in which case the function creates an identity matrix.
 Except for a different user interface these two functions are equivalent
 to the 
\family sans
nab
\family default
 builtins 
\family sans
rot4p()
\family default
 and 
\family sans
tran4p()
\family default
.
\end_layout

\begin_layout Standard

\family sans
MAT_orient()
\family default
 creates a matrix that rotates a object about the three axes 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
, 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[3]
\family default
 and 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[4]
\family default
.
 The rotations are specified by the values of the array 
\family sans
angs[]
\family default
, with 
\family sans
ang[1]
\family default
 the rotation about axis-1 etc.
 The rotations are applied in the order axis-3, axis-2, axis-1.
 The axes remained fixed throughout the operation and zero angle values
 are acceptable.
 If all three angles are zero, 
\family sans
MAT_orient()
\family default
 creates an identity matrix.
\end_layout

\begin_layout Subsection

\series bold
Matrix I/O Functions
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_fprint
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MAT
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

fprint, etc
\end_layout

\end_inset

( file f, int nmats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_sprint( string str, int nmats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_fscan( file f, int smats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_sscan( string str, int smats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
string MAT_getsyminfo()
\end_layout

\begin_layout Standard
This group of functions is used to read and write 
\family sans
nab matrix
\family default
 variables.
 The two functions 
\family sans
MAT_fprint()
\family default
 and 
\family sans
MAT_sprint()
\family default
 write the the matrix to the file 
\family sans
f
\family default
 or the string 
\family sans
str
\family default
.
 The number of matrices is specified by the parameter 
\family sans
nmats
\family default
 and the matrices are passed in the array 
\family sans
mats[]
\family default
.
\end_layout

\begin_layout Standard
The two functions 
\family sans
MAT_fscan()
\family default
 and 
\family sans
MAT_sscan()
\family default
 read matrices from the file 
\family sans
f
\family default
 or the string 
\family sans
str
\family default
 into the array 
\family sans
mats[]
\family default
.
 The parameter 
\family sans
smats
\family default
 is the size of the matrix array and if the source file or string contains
 more than 
\family sans
smats
\family default
 only the first 
\family sans
smats
\family default
 will be returned.
 These two functions return the number of matrices read unless there the
 number of matrices is greater than 
\family sans
smat
\family default
 or the last matrix was incomplete in which case they return 
\family sans
-1
\family default
.
\end_layout

\begin_layout Standard
In order to understand the last function in this group, 
\family sans
MAT_getsyminfo(),
\family default
 it is necessary to discuss both the internal structure the 
\family sans
nab
\family default
 matrix type and one of its most important uses.
 The 
\family sans
nab matrix
\family default
 type is used to hold transformation matrices.
 Although these are atomic objects at the 
\family sans
nab
\family default
 level, they are actually 
\begin_inset Formula $4\times4$
\end_inset

 matrices where the first three elements of the fourth row are the X Y and
 Z components of the translation part of the transformation.
 The matrix print functions write each matrix as four lines of four numbers
 separated by a single space.
 Similarly the matrix read functions expect each matrix to be represented
 as four lines of four white space (any number of tabs and spaces) separated
 numbers.
 The print functions use 
\family sans
%13.6e
\family default
 for each number in order to produce output with aligned columns, but the
 scan functions only require that each matrix be contained in four lines
 of four numbers each.
\end_layout

\begin_layout Standard
Most 
\family sans
nab
\family default
 programs use 
\family sans
matrix
\family default
 variables as intermediates in creating structures.
 The structures are then saved and the matrices disappear when the program
 exits.
 Recently 
\family sans
nab
\family default
 was used to create a set of routines called a 
\begin_inset Quotes eld
\end_inset

symmetry server
\begin_inset Quotes erd
\end_inset

.
 This is a set of 
\family sans
nab
\family default
 programs that work together to create matrix streams that are used to assemble
 composite objects.
 In order to make it most general, the symmetry server produces only matrices
 leaving it to the user to apply them.
 Since these programs will be used to create hierarchies of symmetries or
 transformations we decided that the external representation (files or strings)
 of matrices would consist of two kinds of information — required lines
 of row values and optional lines beginning with the character 
\family sans
#
\family default
 some of which are used to contain information that describes how these
 matrices were created.
\end_layout

\begin_layout Standard

\family sans
MAT_getsyminfo()
\family default
 is used to extract this symmetry information from either a matrix file
 or a string that holds the contents of a matrix file.
 Each time the user calls 
\family sans
MAT_fscan()
\family default
 or 
\family sans
MAT_sscan()
\family default
, any symmetry information present in the source file or string is saved
 in private buffer.
 The previous contents of this buffer are overwritten and lost.
 
\family sans
MAT_getsyminfo()
\family default
 returns the contents of this buffer.
 If the buffer is empty, indicating no symmetry information was present
 in either the source file or string, 
\family sans
MAT_getsyminfo()
\family default
 returns 
\family sans
NULL
\family default
.
\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:symmetry_server"

\end_inset

Symmetry server programs
\end_layout

\begin_layout Standard
This section describes a set of 
\family sans
nab
\family default
 programs that are used together to create composite objects described by
 a hierarchical nest of transformations.
 There are four programs for creating and operating on transformation matrices:
 
\family sans
matgen
\family default
, 
\family sans
matmerge
\family default
, 
\family sans
matmul
\family default
 and 
\family sans
matextract
\family default
, a program, 
\family sans
transform
\family default
, for transforming PDB or point files, and two programs, 
\family sans
tss_init
\family default
 and 
\family sans
tss_next
\family default
 for searching spaces defined by transformation hierarchies.
 In addition to these programs, all of this functionality is available directly
 at the 
\family sans
nab
\family default
 level via the 
\family sans
MAT_
\family default
 and 
\family sans
tss_
\family default
 builtins described above.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matgen"

\end_inset

matgen
\end_layout

\begin_layout Standard
The program 
\family sans
matgen
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
matgen
\end_layout

\end_inset

 creates matrices that correspond to a symmetry or transformation operation.
 It has one required argument, the name of a file containing a description
 of this operation.
 The created matrices are written to 
\family sans
stdout
\family default
.
 A single 
\family sans
matgen
\family default
 may be used by itself or two or more 
\family sans
matgen
\family default
 programs may be connected in a pipeline producing nested symmetries.
\end_layout

\begin_layout LyX-Code

\family sans
matgen -create
\family default
 
\shape italic
sydef-1
\shape default
 
\family sans

\begin_inset Formula $\vert$
\end_inset

 matgen
\family default
 
\shape italic
symdef-2
\shape default
 
\family sans

\begin_inset Formula $\vert$
\end_inset

 ...
 
\begin_inset Formula $\vert$
\end_inset

 matgen
\family default
 
\shape italic
symdef-N
\end_layout

\begin_layout Standard
Because a 
\family sans
matgen
\family default
 can be in the middle of a pipeline, it automatically looks for an stream
 of matrices on 
\family sans
stdin
\family default
.
 This means the first 
\family sans
matgen
\family default
 in a pipeline will wait for an 
\family sans
EOF
\family default
 (generally Ctl-D) from the terminal unless connected to an empty file or
 equivalent.
 In order to avoid the nuisance of having to create an empty matrix stream
 the first 
\family sans
matgen
\family default
 in a pipeline should use the 
\family sans
-create
\family default
 flag which tells 
\family sans
matgen
\family default
 to ignore 
\family sans
stdin
\family default
.
\end_layout

\begin_layout Standard
If input matrices are read, each input matrix left multiplies the first
 generated matrix, then the second etc.
 The table below shows the effect of a 
\family sans
matgen
\family default
 performing a 2-fold rotation on an input stream of three matrices.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $IM_{1,}\,\,IM_{2},\,\,IM_{3}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operation:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2-fold rotation: 
\begin_inset Formula $R_{1},\,\,R_{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $IM_{1}\times R_{1},\,\,IM_{2}\times R_{1},\,\,IM_{3}\times R_{1},\,\,IM_{1}\times R_{2},\,\,IM_{2}\times R_{2},\,\,IM_{3}\times R_{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Symmetry Definition Files
\end_layout

\begin_layout Standard
Transformations are specified in text files containing several lines of
 keyword/value pairs.
 These lines define the operation, its associated axes and other parameters
 such as angles, a distance or count.
 Most keywords have a default value, although the operation, center and
 axes are always required.
 Keyword lines may be in any order.
 Blank lines and most lines starting with a sharp (
\family sans
#
\family default
) are ignored.
 Lines beginning with 
\family sans
#S{
\family default
, 
\family sans
#S+
\family default
 and 
\family sans
#S}
\family default
 are structure comments that describe how the matrices were created.
 These lines are required to search the space defined by the transformation
 hierarchy and their meaning and use is covered in the section on 
\begin_inset Quotes eld
\end_inset

Searching Transformation Spaces
\begin_inset Quotes erd
\end_inset

.
 A complete list of keywords, their acceptable values and defaults is shown
 below.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Default Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Possible Values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
symmetry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cube
\family default
, 
\family sans
cyclic
\family default
, 
\family sans
dihedral
\family default
, 
\family sans
dodeca
\family default
,
\family sans
 helix
\family default
, 
\family sans
ico
\family default
, 
\family sans
octa
\family default
, 
\family sans
tetra
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
transform
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
orient
\family default
, 
\family sans
rotate
\family default
, 
\family sans
translate
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mPid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any string of nonblank characters.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
noid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
true
\family default
, 
\family sans
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
axestype
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
absolute
\family default
, 
\family sans
relative
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
center
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any three numbers separated by tabs or spaces.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
axis, axis1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
axis2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
axis3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle,angle1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any integer.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\family sans
axis
\family default
 and 
\family sans
axis1
\family default
 are synonyms as are 
\family sans
angle
\family default
 and 
\family sans
angle1
\family default
.
 
\end_layout

\begin_layout Standard
The 
\family sans
symmetry
\family default
 and 
\family sans
transform
\family default
 keywords specify the operation.
 One or the other but not both must be specified.
\end_layout

\begin_layout Standard
The 
\family sans
name
\family default
 keyword names a particular symmetry operation.
 The default name is 
\family sans
m
\family default
 immediately followed by the process ID, eg 
\family sans
m2286
\family default
.
 
\family sans
name
\family default
 is used by the transformation space search routines 
\family sans
tss_init
\family default
 and 
\family sans
tss_next
\family default
 and is described later in the section 
\begin_inset Quotes eld
\end_inset

Searching Transformation Spaces
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family sans
noid
\family default
 keyword with value 
\family sans
true
\family default
 suppresses generation of the identity matrix in symmetry operations.
 For example, the keywords below
\end_layout

\begin_layout LyX-Code

\family sans
symmetry cyclic
\end_layout

\begin_layout LyX-Code

\family sans
noid false
\end_layout

\begin_layout LyX-Code

\family sans
center 0 0 0
\end_layout

\begin_layout LyX-Code

\family sans
axis 0 0 1
\end_layout

\begin_layout LyX-Code

\family sans
count 3
\end_layout

\begin_layout Standard
produce three matrices which perform rotations of 0o, 120o and 240o about
 the Z-axis.
 If 
\family sans
noid
\family default
 is 
\family sans
true
\family default
, only the two non-identity matrices are created.
 This option is useful in building objects with two or three orthogonal
 2-fold axes and is discussed further in the example 
\begin_inset Quotes eld
\end_inset

Icosahedron from Rotations
\begin_inset Quotes erd
\end_inset

.
 The default value of 
\family sans
noid
\family default
 is 
\family sans
false
\family default
.
\end_layout

\begin_layout Standard
The 
\family sans
axestype
\family default
, 
\family sans
center
\family default
 and 
\family sans
axis*
\family default
 keywords defined the symmetry axes.
 The 
\family sans
center
\family default
 and 
\family sans
axis*
\family default
 keywords each require a point value which is three numbers separated by
 tabs or spaces.
 Numbers may integer or real and in fixed or exponential format.
 Internally all numbers are converted to 
\family sans
nab
\family default
 type 
\family sans
float
\family default
 which is actually double precision.
 No space is permitted between the minus sign of a negative number and the
 digits.
\end_layout

\begin_layout Standard
The interpretation of these points depends on the value of the keyword 
\family sans
axestype
\family default
.
 If it is 
\family sans
absolute
\family default
 then the axes are defined as the vectors 
\family sans
center
\begin_inset Formula $\to$
\end_inset

axis1
\family default
, 
\family sans
center
\begin_inset Formula $\to$
\end_inset

axis2
\family default
 and 
\family sans
center
\begin_inset Formula $\to$
\end_inset

axis3
\family default
.
 If it 
\family sans
relative
\family default
, then the axes are vectors whose directions are 
\family sans
\series bold
O
\begin_inset Formula $\to$
\end_inset

axis1
\family default
\series default
, 
\family sans
\series bold
O
\begin_inset Formula $\to$
\end_inset

axis2
\family default
\series default
 and 
\family sans
\series bold
O
\begin_inset Formula $\to$
\end_inset

axis3
\family default
\series default
 with their origins at 
\family sans
center
\family default
.
 If the value of 
\family sans
center
\family default
 is 0,0,0, then 
\family sans
absolute
\family default
 and relative are equivalent.
 The default value 
\family sans
axestype
\family default
 is 
\family sans
relative
\family default
; 
\family sans
center
\family default
 and the 
\family sans
axis*
\family default
 do not have defaults.
\end_layout

\begin_layout Standard
The 
\family sans
angle
\family default
 keywords specify the rotation about the axes.
 
\family sans
angle1
\family default
 is associated with 
\family sans
axis1
\family default
 etc.
 Note that 
\family sans
angle
\family default
 and 
\family sans
angle1
\family default
 are synonyms.
 The angle is in degrees, with positive being in the counterclockwise direction
 as you sight from the 
\family sans
axis
\family default
 point to the 
\family sans
center
\family default
 point.
 Either an integer or real value is acceptable.
 No space is permitted between the minus sign of a negative number and its
 digits.
 All 
\family sans
angle*
\family default
 keywords have a default value of 
\family sans
0
\family default
.
\end_layout

\begin_layout Standard
The 
\family sans
dist
\family default
 keyword specifies the translation along an axis.
 The positive direction is from 
\family sans
center
\family default
 to 
\family sans
axis
\family default
.
 Either integer or real value is acceptable.
 No space is permitted between the minus sign of a negative number and its
 digits.
 The default value of 
\family sans
dist
\family default
 is 
\family sans
0
\family default
.
\end_layout

\begin_layout Standard
The 
\family sans
count
\family default
 keyword is used in three related ways.
 For the 
\family sans
cyclic
\family default
 value of the 
\family sans
symmetry
\family default
 it specifies 
\family sans
ount
\family default
 matrices, each representing a rotation of 360/
\family sans
count
\family default
.
 It also specifies the same rotations about the non 2-fold axis of 
\family sans
dihedral
\family default
 symmetry.
 For 
\family sans
helix
\family default
 symmetry, it indicates that 
\family sans
count
\family default
 matrices should be created, each with a rotation of 
\family sans
angle
\family default
.
 In all cases the default value is 
\family sans
1
\family default
.
\end_layout

\begin_layout Standard
This table shows which keywords are used and/or required for each type of
 operation.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="9">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
symmetry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
noid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
axestype
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
center
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
axes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
angles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
dist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
count
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cube
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cyclic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
D=1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dihedral
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
D=1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dodeca
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
helix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
D=1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ico
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
octa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tetra
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
transform
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
noid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
axestype
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
center
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
axes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
angles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
dist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
count
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
orient
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All,D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rotate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
translate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matmerge"

\end_inset

matmerge
\end_layout

\begin_layout Standard
The 
\family sans
matmerge
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
matmerge
\end_layout

\end_inset

 program combines 2-4 files of matrices into a single stream of matrices
 written to 
\family sans
stdout
\family default
.
 Input matrices are in files whose names are given on as arguments on the
 
\family sans
matmerge
\family default
 command line.
 For example, the command line below
\end_layout

\begin_layout LyX-Code

\family sans
matmerge A.mat B.mat C.mat
\end_layout

\begin_layout Standard
copies the matrices from 
\family sans
A.mat
\family default
 to 
\family sans
stdout
\family default
, followed by those of 
\family sans
B.mat
\family default
 and finally those of 
\family sans
C.mat
\family default
.
 Thus 
\family sans
matmerge
\family default
 is similar to the Unix 
\family sans
cat
\family default
 command.
 The difference is that while they are called matrix files, they can contain
 special comments that describe how the matrices they contain were created.
 When matrix files are merged, these comments must be collected and grouped
 so that they are kept together in any further matrix processing.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matmul"

\end_inset

matmul
\end_layout

\begin_layout Standard
The 
\family sans
matmul
\family default
 program takes two files of matrices, and creates a new stream of matrices
 formed by the pair wise product of the matrices in the input streams.
 The new matrices are written to 
\family sans
stdout
\family default
.
 If the number of matrices in the two input files differ, the last matrix
 of the shorter file is replicated and applied to all remaining matrices
 of the longer file.
 For example, if the file 
\family sans
3.mat
\family default
 has three matrices and the file 
\family sans
5.mat
\family default
 has five, then the command
\family sans
 
\begin_inset Quotes eld
\end_inset

matmul 3.mat 5.mat
\begin_inset Quotes erd
\end_inset


\family default
 would result in the third matrix of 
\family sans
3.mat
\family default
 multiplying the third, forth and fifth matrices of 
\family sans
5.mat
\family default
.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matextract"

\end_inset

matextract
\end_layout

\begin_layout Standard
The 
\family sans
matextract
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
matextract
\end_layout

\end_inset

 is used to extract matrices from the matrix stream presented on 
\family sans
stdin
\family default
 and writes them to 
\family sans
stdout
\family default
.
 Matrices are numbered from 1 to N, where N is the number of matrices in
 the input stream.
 The matrices are selected by giving their numbers as the arguments to the
 
\family sans
matextract
\family default
 command.
 Each argument is comma or space separated list of one or more ranges, where
 a range is either a number or two numbers separated by a dash (
\family sans
-
\family default
).
 A range beginning with 
\family sans
-
\family default
 starts with the first matrix and a range ending with 
\family sans
-
\family default
 ends with the last matrix.
 The range 
\family sans
-
\family default
 selects all matrices.
 Here are some examples.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrix number 2.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2,5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices number 2 and 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2 5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices number 2 and 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2-5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices number 2 up to and including 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract -5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices 1 to 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract all matrices beginning with number 2.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract -
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract all matrices.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2-4,7 13 15,19-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices 2 to 4, 7, 13, 15 and all matrices numbered 19 or higher.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:transform"

\end_inset

transform
\end_layout

\begin_layout Standard
The 
\family sans
transform
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transform
\end_layout

\end_inset

 program applies matrices to an object creating a composite object.
 The matrices are read from 
\family sans
stdin
\family default
 and the new object is written to 
\family sans
stdout
\family default
.
 
\family sans
transform
\family default
 takes one argument, the name of the file holding the object to be transformed.
 
\family sans
transform
\family default
 is limited to two types of objects, a molecule in PDB format, or a set
 of points in a text file, three space/tab separated numbers/line.
 The name of object file is preceded by a flag specifying its type.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
transform -pdb X.pdb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transform a PDB format file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
transform -point X.pts
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transform a set of points.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:NABdistance"

\end_inset


\series bold
NAB: Distance Geometry
\end_layout

\begin_layout Standard
The second main element in NAB for the generation of initial structures
 is distance geometry.
 The next subsection gives a brief overview of the basic theory, and is
 followed by sections giving details about the implementation in NAB.
\end_layout

\begin_layout Section

\series bold
Metric Matrix Distance Geometry
\end_layout

\begin_layout Standard
A popular method for constructing initial structures that satisfy distance
 constraints is based on a metric matrix or "distance geometry" approach.
\begin_inset CommandInset citation
LatexCommand cite
key "Crippen88,Havel83"
literal "true"

\end_inset

 If we consider describing a macromolecule in terms of the distances between
 atoms, it is clear that there are many constraints that these distances
 must satisfy, since for 
\begin_inset Formula $N$
\end_inset

 atoms there are 
\begin_inset Formula $N(N-1)/2$
\end_inset

distances but only 3
\begin_inset Formula $N$
\end_inset

 coordinates.
 General considerations for the conditions required to "embed" a set of
 interatomic distances into a realizable three-dimensional object forms
 the subject of distance geometry.
 The basic approach starts from the 
\shape italic
metric matrix
\shape default
 that contains the scalar products of the vectors 
\begin_inset Formula $\mathbf{x}_{i}$
\end_inset

 that give the positions of the atoms:
\begin_inset Formula 
\begin{equation}
g_{ij}\equiv\mathbf{x}_{i}\cdot\mathbf{x}_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
These matrix elements can be expressed in terms of the distances 
\begin_inset Formula $d_{ij}$
\end_inset

:
\begin_inset Formula 
\begin{equation}
g_{ij}=2(d_{i0}^{2}+d_{j0}^{2}-d_{ij}^{2})
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
If the origin ("0") is chosen at the centroid of the atoms, then it can
 be shown that distances from this point can be computed from the interatomic
 distances alone.
 A fundamental theorem of distance geometry states that a set of distances
 can correspond to a three-dimensional object only if the metric matrix
 
\series bold
g
\series default
 is rank three, i.e., if it has three positive and N-3 zero eigenvalues.
 This is not a trivial theorem, but it may be made plausible by thinking
 of the eigenanalysis as a principal component analysis: all of the distance
 properties of the molecule should be describable in terms of three "components,
" which would be the 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

 coordinates.
 If we denote the eigenvector matrix as 
\series bold
w
\series default
 and the eigenvalues 
\begin_inset Formula $\lambda$
\end_inset

, the metric matrix can be written in two ways:
\begin_inset Formula 
\begin{equation}
g_{ij}=\sum_{k=1}^{3}x_{ik}x_{jk}=\sum_{k=1}^{3}w_{ik}w_{jk}\lambda_{k}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The first equality follows from the definition of the metric tensor, Eq.
 (1); the upper limit of three in the second summation reflects the fact
 that a rank three matrix has only three nonzero eigenvalues.
 Eq.
 (3) then provides an expression for the coordinates 
\begin_inset Formula $\mathbf{x}_{i}$
\end_inset

 in terms of the eigenvalues and eigenvectors of the metric matrix:
\begin_inset Formula 
\begin{equation}
x_{ik}=\lambda_{k}^{1/2}w_{ik}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
If the input distances are not exact, then in general the metric matrix
 will have more than three nonzero eigenvalues, but an approximate scheme
 can be made by using Eq.
 (4) with the three largest eigenvalues.
 Since information is lost by discarding the remaining eigenvectors, the
 resulting distances will not agree with the input distances, but will approxima
te them in a certain optimal fashion.
 A further "refinement" of these structures in three-dimensional space can
 then be used to improve agreement with the input distances.
\end_layout

\begin_layout Standard
In practice, even approximate distances are not known for most atom pairs;
 rather, one can set upper and lower bounds on acceptable distances, based
 on the covalent structure of the protein and on the observed NOE cross
 peaks.
 Then particular instances can be generated by choosing (often randomly)
 distances between the upper and lower bounds, and embedding the resulting
 metric matrix.
\end_layout

\begin_layout Standard
Considerable attention has been paid recently to improving the performance
 of distance geometry by examining the ways in which the bounds are "smoothed"
 and by which distances are selected between the bounds.
\begin_inset CommandInset citation
LatexCommand cite
key "Havel91,Kuszewski92"
literal "true"

\end_inset

 The use of triangle bound inequalities to improve consistency among the
 bounds has been used for many years, and NAB implements the "random pairwise
 metrization" algorithm developed by Jay Ponder.
\begin_inset CommandInset citation
LatexCommand cite
key "Hodsdon96"
literal "true"

\end_inset

 Methods like these are important especially for underconstrained problems,
 where a goal is to generate a reasonably random distribution of acceptable
 structures, and the difference between individual members of the ensemble
 may be quite large.
\end_layout

\begin_layout Standard
An alternative procedure, which we call "random embedding", implements the
 procedure of deGroot 
\shape italic
et al.

\shape default
 for satisfying distance constraints.
\begin_inset CommandInset citation
LatexCommand cite
key "deGroot97"
literal "true"

\end_inset

 This does not use the embedding idea discussed above, but rather randomly
 corrects individual distances, ignoring all couplings between distances.
 Doing this a great many times turns out to actually find fairly good structures
 in many cases, although the properties of the ensembles generated for undercons
trained problems are not well understood.
 A similar idea has been developed by Agrafiotis,
\begin_inset CommandInset citation
LatexCommand cite
key "Agrafiotis03"
literal "true"

\end_inset

 and we have adopted a version of his "learning parameter" strategy into
 our implementation.
\end_layout

\begin_layout Standard
Although results undoubtedly depend upon the nature of the problem and the
 constraints, in many (most?) cases, randomized embedding will be both faster
 and better than the metric matrix strategy.
 Given its speed, randomized embedding should generally be tried first.
\end_layout

\begin_layout Section

\series bold
Creating and manipulating bounds, embedding structures
\end_layout

\begin_layout Standard
A variety of metric-matrix distance geometry routines are included as builtins
 in 
\family sans
nab
\family default
.
\end_layout

\begin_layout LyX-Code

\family sans
bounds newbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newbounds
\end_layout

\end_inset

( molecule mol, string opts );
\end_layout

\begin_layout LyX-Code

\family sans
int andbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
andbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\end_layout

\begin_layout LyX-Code

\family sans
           float lb, float ub );
\end_layout

\begin_layout LyX-Code

\family sans
int orbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
orbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\end_layout

\begin_layout LyX-Code

\family sans
           float lb, float ub );
\end_layout

\begin_layout LyX-Code

\family sans
int setbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\end_layout

\begin_layout LyX-Code

\family sans
           float lb, float ub );
\end_layout

\begin_layout LyX-Code

\family sans
int showbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
showbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2 );
\end_layout

\begin_layout LyX-Code

\family sans
int useboundsfrom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
useboundsfrom
\end_layout

\end_inset

( bounds b, molecule mol1, string aex1, molecule mol2, 
\begin_inset Newline newline
\end_inset

                       string aex2, float deviation );
\end_layout

\begin_layout LyX-Code

\family sans
int setboundsfromdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setboundsfromdb
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\begin_inset Newline newline
\end_inset

                       string dbase, float mul );
\end_layout

\begin_layout LyX-Code

\family sans
int setchivol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setchivol
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, string aex3, string
 aex4, float vol );
\end_layout

\begin_layout LyX-Code

\family sans
int setchiplane
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setchiplane
\end_layout

\end_inset

( bounds b, molecule mol, string aex );
\end_layout

\begin_layout LyX-Code

\family sans
float getchivol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getchivol
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, string aex3, string aex4 );
\end_layout

\begin_layout LyX-Code

\family sans
float getchivolp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getchivolp
\end_layout

\end_inset

( point p1, point p2, point p3, point p4 );
\end_layout

\begin_layout LyX-Code

\family sans
int tsmooth
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tsmooth
\end_layout

\end_inset

( bounds b, float delta );
\end_layout

\begin_layout LyX-Code

\family sans
int geodesics
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
geodesics
\end_layout

\end_inset

( bounds b );
\end_layout

\begin_layout LyX-Code

\family sans
int dg_options
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dg
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

options
\end_layout

\end_inset

( bounds b, string opts );
\end_layout

\begin_layout LyX-Code

\family sans
int embed
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
embed
\end_layout

\end_inset

( bounds b, float xyz[] );
\end_layout

\begin_layout Standard
The call to 
\family sans
newbounds()
\family default
 is necessary to establish a bounds matrix for further work.
 This routine sets lower bounds to van der Waals limits, along with bounds
 derived from the input geometry for atoms bonded to each other, and for
 atoms bonded to a common atoms (i.e., so-called 1-2 and 1-3 interactions.)
 Upper and lower bounds for 1-4 interactions are set to the maximum and
 minimum possibilities (the max ( 
\shape italic
syn
\shape default
 , "van der Waals limits" ) and 
\shape italic
anti
\shape default
 distances).
 
\family sans
newbounds()
\family default
 has a 
\family sans
string
\family default
 as its last parameter.
 This string is used to pass in options that control the details of how
 those routines execute.
 The string can be 
\family sans
NULL
\family default
, 
\family sans
""
\family default
 or contain one or more 
\shape italic
option
\shape default
s surrounded by white space.
 The formats of an option are
\end_layout

\begin_layout LyX-Code

\family sans
-
\family default
\shape italic
name
\family sans
\shape default
=
\family default
\shape italic
value
\shape default
 
\end_layout

\begin_layout LyX-Code

\family sans
-
\family default
\shape italic
name
\shape default
 to select the default value if it exists.
\end_layout

\begin_layout Standard
The options to 
\family sans
newbounds()
\family default
 are listed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:newbounds"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-rbm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of the option is the name of a file containing the bounds matrix
 for this molecule.
 This file would ordinarily be made by the dump-bounds command.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-binary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If this flag is present, bounds read in with the 
\shape italic
-rbm
\shape default
 will expect a binary file created by the 
\family sans
dumpbounds
\family default
 command.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nocov
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If this flag is present, no covalent (bonding) information will be used
 in constructing the bounds matrix.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nchi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The option containing the keyword 
\shape italic
nchi
\shape default
 allocates 
\begin_inset Formula $n$
\end_inset

 extra chiral atoms for each residue of this molecule.
 This allows for additional chirality information to be provided by the
 user.
 The default is 4 extra chiral atoms per residue.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:newbounds"

\end_inset

Options to newbounds.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next five routines use atom expressions 
\family sans
aex1
\family default
 and 
\family sans
aex2
\family default
 to select two sets of atoms.
 Each of these four routines returns the number of bounds set or changed.
 For each pair of atoms (
\begin_inset Formula $a1$
\end_inset

 in 
\family sans
aex1
\family default
 and 
\begin_inset Formula $a2$
\end_inset

 in 
\family sans
aex2
\family default
) 
\family sans
andbounds()
\family default
 sets the lower bound to max ( 
\shape italic
current_lb, lb
\shape default
 ) and the upper bound to the min ( 
\shape italic
current_ub, ub
\shape default
 ).
 If 
\shape italic
ub 
\begin_inset Formula $<$
\end_inset

 current_lb
\shape default
 or if 
\shape italic
lb 
\begin_inset Formula $>$
\end_inset

 current_ub
\shape default
, the bounds for that pair are unchanged.
 The routine 
\family sans
orbounds()
\family default
 works in a similar fashion, except that it uses the less restrictive of
 the two sets of bounds, rather than the more restrictive one.
 The 
\family sans
setbounds()
\family default
 call updates the bounds, overwriting whatever was there.
 
\family sans
showbounds()
\family default
 prints all the bounds between the atoms selected in the first atom expression
 and those selected in the second atom expression.
 The 
\family sans
useboundsfrom()
\family default
 routine sets the the bounds between all the selected atoms in 
\shape italic
mol1
\shape default
 according to the geometry of a reference molecule, 
\shape italic
mol2
\shape default
.
 The bounds are set between every pair of atoms selected in the first atom
 expression, 
\shape italic
aex1
\shape default
 to the distance between the corresponding pair of atoms selected by 
\shape italic
aex2
\shape default
 in the reference molecule.
 In addition, a slack term, 
\shape italic
deviation
\shape default
, is used to allow some variance from the reference geometry by decreasing
 the lower bound and increasing the upper bound between every pair of atoms
 selected.
 The amount of increase or decrease depends on the distance between the
 two atoms.
 Thus, a 
\shape italic
deviation
\shape default
 of 
\begin_inset Formula $0.25$
\end_inset

 will result in the lower bound set between two atoms to be 75% of the actual
 distance separating the corresponding two atoms selected in the reference
 molecule.
 Similarly, the upper bound between two atoms will be set to 125% of the
 actual distance separating the corresponding two atoms selected in the
 reference molecule.
 For instance, the call
\end_layout

\begin_layout LyX-Code

\family sans
useboundsfrom(b, mol1, "1:2:C1',N1", mref, "3:4:C1',N1", 0.10 );
\end_layout

\begin_layout Standard
sets the lower bound between the C1' and N1 atoms in strand 1, residue 2
 of molecule 
\shape italic
mol1
\shape default
 to 90% of the distance between the corresponding pair of atoms in strand
 3, residue 4 of the reference molecule, 
\shape italic
mref
\shape default
.
 Similarly, the upper bound between the C1' and N1 atoms selected in 
\shape italic
mol1
\shape default
 is set to 110% of the distance between the corresponding pair of atoms
 in 
\shape italic
mref
\shape default
.
 A 
\shape italic
deviation
\shape default
 of 
\begin_inset Formula $0.0$
\end_inset

 sets the upper and lower bounds between every pair of atoms selected to
 be the actual distance between the corresponding reference atoms.
 If 
\shape italic
aex1
\shape default
 selects the same atoms as 
\shape italic
aex2
\shape default
, the bounds between those atoms selected will be constrained to the current
 geometry.
 Thus the call,
\end_layout

\begin_layout LyX-Code

\family sans
useboundsfrom(b, mol1, "1:1:", mol1, "1:1", 0.0 );
\end_layout

\begin_layout Standard
essentially constrains the current geometry of all the atoms in strand 1,
 residue 1, by setting the upper and lower bounds to the actual distances
 separating each atom pair.
 
\family sans
useboundsfrom()
\family default
 only checks the number of atoms selected by 
\shape italic
aex1
\shape default
 and compares it to the number of atoms selected by 
\shape italic
aex2
\shape default
.
 If the number of atoms selected by both atom expressions are not equal,
 an error message is output.
 Note, however, that there is no checking on the atom types selected by
 either atom expression.
 Hence, it is important to understand the method in which 
\family sans
nab
\family default
 atom expressions are evaluated.
 For more information, refer to Section 2.6, 
\begin_inset Quotes eld
\end_inset

Atom Names and Atom Expressions
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family sans
useboundsfrom()
\family default
 function can also be used with distance geometry "templates", as discussed
 in the next subsection.
\end_layout

\begin_layout Standard
The routine 
\family sans
setchivol()
\family default
 uses four atom expressions to select exactly four different atoms and sets
 the volume of the chiral (ordered) tetrahedron they describe to 
\family sans
vol
\family default
.
 Setting 
\family sans
vol
\family default
 to 
\family sans
0
\family default
 forces the four atoms to be planar.
 
\family sans
setchivol()
\family default
 returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 
\family sans
setchivol()
\family default
 does not affect any distance bounds in 
\family sans
b
\family default
 and may precede or follow triangle smoothing.
\end_layout

\begin_layout Standard
Similar to 
\family sans
setchivol()
\family default
, 
\family sans
setchiplane()
\family default
 enforces planarity across four or more atoms by setting the chiral volume
 to 
\family sans
0
\family default
 for every quartet of atoms selected by 
\family sans
aex
\family default
.
 
\family sans
setchiplane()
\family default
 returns the number of quartets constrained.
 
\family sans
Note:
\family default
 If the number of chiral constraints set is larger than the default number
 of chiral objects allocated in the call to 
\family sans
newbounds()
\family default
, a chiral table overflow will result.
 Thus, it may be necessary to allocate space for additional chiral objects
 by specifying a larger number for the option 
\shape italic
nchi
\shape default
 in the call to 
\family sans
newbounds()
\family default
.
\end_layout

\begin_layout Standard

\family sans
getchivol()
\family default
 takes as an argument four atom expressions and returns the chiral volume
 of the tetrahedron described by those atoms.
 If more than one atom is selected for a particular point, the atomic coordinate
 is calculated from the average of the atoms selected.
 Similarly, 
\family sans
getchivolp()
\family default
 takes as an argument four parameters of type 
\family sans
point
\family default
 and returns the chiral volume of the tetrahedron described by those points.
\end_layout

\begin_layout Standard
After bounds and chirality have been set in this way, the general approach
 would be to call 
\family sans
tsmooth()
\family default
 to carry out triangle inequality smoothing, followed by 
\family sans
embed()
\family default
 to create a three-dimensional object.
 This might then be refined against the distance bounds by a conjugate-gradient
 minimization routine.
 The 
\family sans
tsmooth()
\family default
 routine takes two arguments: a bounds object, and a tolerance parameter
 
\shape italic
delta
\shape default
, which is the amount by which an upper bound may exceed a lower bound without
 triggering a triangle error.
 For most circumstances, 
\shape italic
delta
\shape default
 would be chosen as a small number, like 0.0005, to allow for modest round-off.
 In some circumstances, however, 
\shape italic
delta
\shape default
 could be larger, to allow some significant inconsistencies in the bounds
 (in the hopes that the problems would be fixed in subsequent refinement
 steps.) If the 
\family sans
tsmooth()
\family default
 routine detects a violation, it will (arbitrarily) adjust the upper bound
 to equal the lower bound.
 Ideally, one should fix the bounds inconsistencies before proceeding, but
 in some cases this fix will allow the refinements to proceed even when
 the underlying cause of the inconsistency is not corrected.
\end_layout

\begin_layout Standard
For larger systems, the 
\family sans
tsmooth()
\family default
 routine becomes quite time-consuming as it scales O( ̂3).
 In this case, a more efficient triangle smoothing routine, 
\family sans
geodesics()
\family default
 is used.
 
\family sans
geodesics()
\family default
 smoothes the bounds matrix via the triangle inequality using a sparse matrix
 version of a shortest path algorithm.
\end_layout

\begin_layout Standard
The 
\family sans
embed
\family default
 routine takes a bounds object as input, and returns a four-dimensional
 array of coordinates; (values of the 4-th coordinate may be nearly zero,
 depending on the value of 
\begin_inset Formula $k4d$
\end_inset

, see below.) Options for how the embed is done are passed in through the
 
\shape italic
dg_options
\shape default
 routine, whose option string has 
\shape italic
name=value
\shape default
 pairs, separated by commas or whitespace.
 Allowed options are listed in the following table.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="3">
<features islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ddm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dump distance matrix to this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rdm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instead of creating a distance matrix, read it from this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dmm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dump the metric matrix to this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rmm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instead of creating a metric matrix, read it from this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gdist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to nonzero value, use a Gaussian distribution for selecting distances;
 this will have a mean at the center of the allowed range, and a standard
 deviation equal to 1/4 of the range.
 If gdist=0, select distances from a uniform distribution in the allowed
 range.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
randpair
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use random pair-wise metrization for this percentage of the distances, i.e.,
 randpair=10.
 would metrize 10% of the distance pairs.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
eamax
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of embed attempts before bailing out.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
seed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial seed for the random number generator.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
pembed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to a nonzero value, use the "proximity embedding" scheme of de Groot
 
\shape italic
et al.
\shape default
, [26] and Agrafiotis [27], rather than metric matrix embedding.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
shuffle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set to 1 to randomize coordinates inside a box of dimension 
\shape italic
rbox
\shape default
 at the beginning of the 
\shape italic
pembed
\shape default
 scheme; if 0, use whatever coordinates are fed to the routine.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rbox
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size, in angstroms, of each side of the cubic into which the coordinates
 are randomly created in the proximity-embed procedure, if 
\shape italic
shuffle
\shape default
 is set.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
riter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of cycles for random-embed procedure.
 Each cycle selects 1000 pairs for adjustment.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
slearn
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Starting value for the learning parameter in proximity embedding; see [27]
 for details.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
kchi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Force constant for enforcement of chirality constraints.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
k4d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Force constant for squeezing out the fourth dimensional coordinate.
 If this is nonzero, a penalty function will be added to the bounds-violation
 energy, which is equal to 0.5 * 
\shape italic
k4d * w * w
\shape default
, where 
\begin_inset Formula $w$
\end_inset

 is the value of the fourth dimensional coordinate.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
sqviol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to nonzero value, use parabolas for the violation energy when upper
 or lower bounds are violated; otherwise use functions based on those in
 the 
\family sans
dgeom
\family default
 program.
 See the code in 
\family sans
embed.c
\family default
 for details.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lbpen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weighting factor for lower-bounds violations, relative to upper-bounds violation
s.
 The default penalizes lower bounds 3.5 times as much as the equivalent upper-bou
nds violations, which is frequently appropriate distance geometry calculations
 on molecules.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntpr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency at which the bounds matrix violations will be printed in subsequent
 refinements.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
pencut
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If pencut 
\begin_inset Formula $>$
\end_inset

= 0.0, individual distance and chirality violations greater than pencut will
 be printed out (along with the total energy) every ntpr steps.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\shape italic
Typical calling sequences.

\shape default
 The following segment shows some ways in which these routines can be put
 together to do some simple embeds: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

bounds b;
\end_layout

\begin_layout Plain Layout

float fret, xyz[ 10000 ];
\end_layout

\begin_layout Plain Layout

int ier;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( argv[2] );
\end_layout

\begin_layout Plain Layout

b = newbounds( m, "" );
\end_layout

\begin_layout Plain Layout

tsmooth( b, 0.0005 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dg_options( b, "gdist=1, ntpr=50, k4d=2.0, randpair=10." );
\end_layout

\begin_layout Plain Layout

embed( b, xyz );
\end_layout

\begin_layout Plain Layout

ier = conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.1, 10., 200 );
\end_layout

\begin_layout Plain Layout

printf( "conjgrad returns %d
\backslash

\backslash
n", ier );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "new.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In lines 6-8, the molecule is created by reading in a pdb file, then bounds
 are created and smoothed for it.
 The embed options (established in line 10) include 10% random pairwise
 metrization, use of Gaussian distance selection, squeezing out the 4-th
 dimension with a force constant of 2.0, and printing every 50 steps.
 The coordinates developed in the 
\shape italic
embed
\shape default
 step (line 11) are passed to a conjugate gradient minimizer (see the descriptio
n below), which will minimize for 200 steps, using the bounds-violation
 routine 
\shape italic
db_viol
\shape default
 as the target function.
 Finally, in lines 15-16, the 
\shape italic
setmol_from_xyzw
\shape default
 routine is used to put the coordinates from the 
\shape italic
xyz
\shape default
 array back into the molecule, and a new pdb file is written.
\end_layout

\begin_layout Standard
More complex and representative examples of distance geometry are given
 in the 
\series bold
Examples
\series default
 chapter below.
\end_layout

\begin_layout Section

\series bold
Distance geometry templates
\end_layout

\begin_layout Standard
The 
\family sans
useboundsfrom()
\family default
 function can be used with structures supplied by the user, or by canonical
 structures supplied with the 
\family sans
nab
\family default
 distribution called "templates".
 These templates include stacking schemes for all standard residues in a
 A-DNA, B-DNA, C-DNA, D-DNA, T-DNA, Z-DNA, A-RNA, or A'-RNA stack.
 Also included are the 28 possible basepairing schemes as described in Saenger.
\begin_inset CommandInset citation
LatexCommand cite
key "Saenger84"
literal "true"

\end_inset

 The templates are in PDB format and are located in 
\family sans
$AMBERHOME/dat/dgdb/basepairs/
\family default
 and 
\family sans
$AMBERHOME/dat/dgdb/stacking/
\family default
.
\end_layout

\begin_layout Standard
A typical use of these templates would be to set the bounds between two
 residues to some percentage of the idealized distance described by the
 template.
 In this case, the template would be the reference molecule ( the second
 molecule passed to the function ).
 A typical call might be:
\end_layout

\begin_layout LyX-Code

\family sans
useboundsfrom(b, m, "1:2,3:??,H?", 
\end_layout

\begin_layout LyX-Code

\family sans
             getpdb( PATH + "gc.bdna.pdb" ), "::??,H?", 0.1 );
\end_layout

\begin_layout Standard
where 
\family sans
PATH
\family default
 is 
\family sans
$AMBERHOME/dat/dgdb/stacking/
\family default
.
 This call sets the bounds of all the base atoms in residues 2 ( GUA ) and
 3 ( CYT ) of strand 1 to be within 10% of the distances found in the template.
\end_layout

\begin_layout Standard
The basepair templates are named so that the first field of the template
 name is the one-character initials of the two individual residues and the
 next field is the Roman numeral corresponding to same bonding scheme described
 by Sanger, p.
 120.
 
\shape italic
Note: since no specific sugar or backbone conformation is assumed in the
 templates, the non-base atoms should not be referenced.

\shape default
 The base atoms of the templates are show in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.ppa"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.ppb"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ppa.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.ppa"

\end_inset

Basepair templates for use with 
\family sans
useboundsfrom(),
\family default
 (aa-gg)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ppb.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.ppb"

\end_inset

Basepair templates for use with 
\family sans
useboundsfrom(),
\family default
 (gg-uu)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The stacking templates are named in the same manner as the basepair templates.
 The first two letters of the template name are the one-character initials
 of the two residues involved in the stacking scheme ( 5' residue, then
 3' residue ) and the second field is the actual helical pattern ( 
\shape italic
note: a-rna represents the helical parameters of a'rna
\shape default
 ).
 The stacking shemes can be found in the 
\emph on
$AMBERHOME/dat/dgdb/stacking
\emph default
 directory.
\end_layout

\begin_layout Section

\series bold
Bounds databases
\end_layout

\begin_layout Standard
In addition to canonical templates, it is also possible to specify bounds
 information from a database of known molecular structures.
 This provides the option to use data obtained from actual structures, rather
 than from an idealized, canonical conformation.
\end_layout

\begin_layout Standard
The function 
\family sans
setboundsfromdb()
\family default
 sets the bounds of all pairs of atoms between the two residues selected
 by 
\family sans
aex1
\family default
 and 
\family sans
aex2
\family default
 to a statistically averaged distance calculated from known structures plus
 or minus a multiple of the standard deviation.
 The statistical information is kept in database files.
 Currently, there are three types of database files - Those containing bounds
 information between Watson-Crick basepairs, those containing bounds information
 between helically stacked residues, and those containing intra-residue
 bounds information for residues in any conformation.
 The standard deviation is multiplied by the parameter 
\shape italic
mul
\shape default
 and subtracted from the average distance to determine the lower bound and
 similarly added to the average distance to determine the upper bound of
 all base-base atom distances.
 Base-backbone bounds, that is, bounds between pairs of atoms in which one
 atom is a base atom and the other atom is a backbone atom, are set to be
 looser than base-base atoms.
 Specifically, the lower bound between a base-backbone atom pair is set
 to the smallest measured distance of all the structures considered in creating
 the database.
 Similarly, the upper bound between a base-backbone atom pair is set to
 the largest measured distance of all the structures considered.
 Base-base, and base-sugar bounds are set in a similar manner.
 This was done to avoid imposing false constraints on the atomic bounds,
 since Watson-Crick basepairing and stacking does not preclude any specific
 backbone and sugar conformation.
 
\family sans
setboundsfromdb()
\family default
 first searches the current directory for 
\shape italic
dbase
\shape default
 before checking the default database location, 
\family sans
$AMBERHOME/dat/dgdb.
\end_layout

\begin_layout Standard
Each entry in the database file has six fields: The atoms whose bounds are
 to be set, the number of separate structures sampled in constructing these
 statistics, the average distance between the two atoms, the standard deviation,
 the minimum measured distance, and the maximum measured distance.
 For example, the database 
\family sans
bdna.basepair.db
\family default
 has the following sample entries:
\end_layout

\begin_layout LyX-Code
A:C2-T:C1' 424 6.167 0.198 5.687 6.673
\end_layout

\begin_layout LyX-Code
A:C2-T:C2 424 3.986 0.175 3.554 4.505
\end_layout

\begin_layout LyX-Code
A:C2-T:C2' 424 7.255 0.304 5.967 7.944
\end_layout

\begin_layout LyX-Code
A:C2-T:C3' 424 8.349 0.216 7.456 8.897
\end_layout

\begin_layout LyX-Code
A:C2-T:C4 424 4.680 0.182 4.122 5.138
\end_layout

\begin_layout LyX-Code
A:C2-T:C4' 424 8.222 0.248 7.493 8.800
\end_layout

\begin_layout LyX-Code
A:C2-T:C5 424 5.924 0.168 5.414 6.413
\end_layout

\begin_layout LyX-Code
A:C2-T:C5' 424 9.385 0.306 8.273 10.104
\end_layout

\begin_layout LyX-Code
A:C2-T:C6 424 6.161 0.163 5.689 6.679
\end_layout

\begin_layout LyX-Code
A:C2-T:C7 424 7.205 0.184 6.547 7.658
\end_layout

\begin_layout Standard
The first column identifies the atoms from the adenosine C2 atom to various
 thymidine atoms in a Watson-Crick basepair.
 The second column indicates that 
\begin_inset Formula $424$
\end_inset

 structures were sampled in determining the next four columns: the average
 distance, the standard deviation, and the minimum and maximum distances.
\end_layout

\begin_layout Standard
The databases were constructing using the coordinates from all the known
 nucleic acid structures from the Nucleic Acid Database (NDB - 
\family sans
http://www.ndbserver.ebi.ac.uk:5700/NDB/
\family default
.
 If one wishes to remake the databases, the coordinates of all the NDB structure
s should be downloaded and kept in the 
\family sans
$AMBERHOME/dat/coords
\family default
 directory.
 The databases are made by issuing the command 
\family sans
$AMBERHOME/dat/dgdb/make_databases
\family default
 
\shape italic
dblist
\shape default
 where 
\shape italic
dblist
\shape default
 is a list of nucleic acid types (i.e., bdna, arna, 
\shape italic
etc.

\shape default
 ).
 If one wants to add new structures to the structure repository at 
\family sans
$AMBERHOME/dat/coords
\family default
, it is necessary to make sure that the first two letters of the pdb file
 identify the nucleic acid type.
 That is, all bdna pdb files must begin with 
\shape italic
bd
\shape default
.
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 functions used to create the databases are located in 
\family sans
$AMBERHOME/dat/dgdb/functions
\family default
.
 The stacking databases were constructed as follows: If two residues stacked
 5' to 3' in a helix have fewer than ten inter-residue atom distances closer
 than 2.0 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 or larger than 9.0 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, and if the normals between the base planes are less than 20.0o, the residues
 were considered stacked.
 The base plane is calculated as the normal to the N1-C4 and midpoint of
 the C2-N3 and N1-C4 vectors.
 The first atom expression given to 
\family sans
setboundsfromdb()
\family default
 specifies the 5' residue and the second atom expression specifies the 3'
 residue.
 The source for this function is 
\family sans
getstackdist.nab
\family default
.
\end_layout

\begin_layout Standard
Similarly, the basepair databases were constructed by measuring the heavy
 atom distances of corresponding residues in a helix to check for hydrogen
 bonding.
 Specifically, if an A-U basepair has an N1-N3 distance of between 2.3 and
 3.2 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 and a N6-O4 distance of between 2.3 and 3.3 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, then the A-U basepair is considered a Waton-Crick basepair and is used
 in the database.
 A C-G basepair is considered Watson-Crick paired if the N3-N1 distance
 is between 2.3 and 3.3 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, the N4-O6 distance is between 2.3 and 3.2 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, and the O2-N2 distance is between 2.3 and 3.2 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The nucleotide databases contain all the distance information between atoms
 in the same residue.
 No residues in the coordinates directory are excluded from this database.
 The intent was to allow the residues of this database to assume all possible
 conformations and ensure that a nucleotide residue would not be biased
 to a particular conformation.
\end_layout

\begin_layout Standard
For the basepair and stacking databases, setting the parameter 
\shape italic
mul
\shape default
 to 
\begin_inset Formula $1.0$
\end_inset

 results in lower bounds being set from the average database distance minus
 one standard deviation, and upper bounds as the average database distance
 plus one standard deviation, between base-base atoms.
 Base-backbone and base-sugar upper and lower bounds are set to the maximum
 and minimum measured database values, respectively.
 
\shape italic
Note, however, that a stacking multiple of 0.0 may not correspond to consistent
 bounds.
 A stacking multiple of 0.0 will probably have conflicting bounds information
 as the bounds information is derived from many different structures.
\end_layout

\begin_layout Standard
The database types are named 
\shape italic
nucleic_acid_type.database_type.
\family sans
\shape default
db
\family default
, and can be found in the 
\emph on
$AMBERHOME/dat/dgdb
\emph default
 directory.
\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:nab-typical"

\end_inset

Typical calling sequences
\end_layout

\begin_layout Standard
The following segment shows some ways in which these routines can be put
 together to do some molecular mechanics and dynamics: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// carry out molecular mechanics minimization and some simple dynamics
\end_layout

\begin_layout Plain Layout

molecule m, mi; 
\end_layout

\begin_layout Plain Layout

int  ier;
\end_layout

\begin_layout Plain Layout

float  m_xyz[ dynamic ], f_xyz[ dynamic ], v[ dynamic ];
\end_layout

\begin_layout Plain Layout

float  dgrad, fret, dummy[2];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mi = bdna( "gcgc" );  
\end_layout

\begin_layout Plain Layout

putpdb( "temp.pdb", mi );
\end_layout

\begin_layout Plain Layout

m = getpdb_prm( "temp.pdb", "leaprc.nucleic.OL15", "", 0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

allocate m_xyz[ 3*m.natoms ];  allocate f_xyz[ 3*m.natoms ];
\end_layout

\begin_layout Plain Layout

allocate v[ 3*m.natoms ];
\end_layout

\begin_layout Plain Layout

setxyz_from_mol( m, NULL, m_xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mm_options( "cut=25.0, ntpr=10, nsnb=999, gamma_ln=5.0" );
\end_layout

\begin_layout Plain Layout

mme_init( m, NULL, "::ZZZ", dummy, NULL );
\end_layout

\begin_layout Plain Layout

fret = mme( m_xyz, f_xyz, 1 );
\end_layout

\begin_layout Plain Layout

printf( "Initial energy is %8.3f
\backslash
n", fret );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dgrad = 0.1;
\end_layout

\begin_layout Plain Layout

ier = conjgrad( m_xyz, 3*m.natoms, fret, mme, dgrad, 10.0, 100 );
\end_layout

\begin_layout Plain Layout

setmol_from_xyz( m, NULL, m_xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "gcgc.min.pdb", m );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mm_options( "tautp=0.4, temp0=100.0, ntpr_md=10, tempi=50." );
\end_layout

\begin_layout Plain Layout

md( 3*m.natoms, 1000, m_xyz, f_xyz, v, mme );
\end_layout

\begin_layout Plain Layout

setmol_from_xyz( m, NULL, m_xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "gcgc.md.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line 7 creates an nab molecule; any nab creation method could be used here.
 Then a temporary pdb file is created, and this is used to generate a NAB
 molecule that can be used for force-field calculations (line 9).
 Lines 11-13 allocate some memory, and fill the coordinate array with the
 molecular position.
 Lines 15-17 initialize the force field routine, and call it once to get
 the initial energy.
 The atom expression "::ZZZ" will match no atoms, so that there will be
 no restraints on the atoms; hence the fourth argument to 
\family sans
mme_init
\family default
 can just be a place-holder, since there are no reference positions for
 this example.
 Minimization takes place at line 21, which will call 
\family sans
mme
\family default
 repeatedly, and which also arranges for its own printout of results.
 Finally, in lines 25-28, a short (1000-step) molecular dynamics run is
 made.
 Note the the initialization routine 
\family sans
mme_init
\family default
 
\shape italic
must
\shape default
 be called before calling the evaluation routines 
\family sans
mme
\family default
 or 
\family sans
md
\family default
.
\end_layout

\begin_layout Standard
Elaboration of the the above scheme is generally straightforward.
 For example, a simulated annealing run in which the target temperature
 is slowly reduced to zero could be written as successive calls to 
\family sans
mm_options
\family default
 (setting the 
\family sans
temp0
\family default
 parameter) and 
\family sans
md
\family default
 (to run a certain number of steps with the new target temperature.) Note
 also that routines other than 
\family sans
mme
\family default
 could be sent to 
\family sans
conjgrad
\family default
 and 
\family sans
md
\family default
: any routine that takes the same three arguments and returns a float function
 value could be used.
 In particular, the routines 
\family sans
db_viol
\family default
 (to get violations of distance bounds from a bounds matrix) or 
\family sans
mme4
\family default
 (to compute molecular mechanics energies in four spatial dimensions) could
 be used here.
 Or, you can write your own 
\family sans
nab
\family default
 routine to do this as well.
 For some examples, see the 
\shape italic
gbrna
\shape default
, 
\shape italic
gbrna_long
\shape default
 and 
\shape italic
rattle_md
\shape default
 programs in the 
\family sans
$AMBERHOME/AmberTools/test/nab
\family default
 directory.
\end_layout

\begin_layout Chapter

\series bold
NAB: Sample programs
\end_layout

\begin_layout Standard
This chapter provides a variety of examples that use the basic NAB functionality
 described in earlier chapters to solve interesting molecular manipulation
 problems.
 Our hope is that the ideas and approaches illustrated here will facilitate
 construction of similar programs to solve other problems.
\end_layout

\begin_layout Section

\series bold
Duplex Creation Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides a variety of functions for creating Watson/Crick duplexes.
 A short description of four of them is given in this section.
 All four of these functions are written in 
\family sans
nab
\family default
 and the details of their implementation is covered in the section 
\series bold
Creating Watson/Crick Duplexes
\series default
 of the 
\series bold
User Manual
\series default
.
 You should also look at the function 
\family sans
fd_helix()
\family default
 to see how to create duplex helices that correspond to fibre-diffraction
 models.
 As with the PERL language, "there is more than one way to do it."
\end_layout

\begin_layout LyX-Code

\family sans
molecule bdna
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bdna
\end_layout

\end_inset

( string seq );
\end_layout

\begin_layout LyX-Code

\family sans
string wc_complement
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

complement
\end_layout

\end_inset

( string seq, string rlib, string rlt );
\end_layout

\begin_layout LyX-Code

\family sans
molecule wc_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix
\end_layout

\end_inset

( string seq, string rlib, string natype, string cseq, string crlib, 
\end_layout

\begin_layout LyX-Code
 
\family sans
   string cnatype, float xoffset, float incl, float twist, float rise, string
 options );
\end_layout

\begin_layout LyX-Code

\family sans
molecule dg_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dg
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix
\end_layout

\end_inset

( string seq, string rlib, string natype,
\end_layout

\begin_layout LyX-Code
 
\family sans
   string cseq, string crlib, string cnatype, float xoffset, float incl,
 float twist, float rise,
\end_layout

\begin_layout LyX-Code
 
\family sans
   string options );
\end_layout

\begin_layout LyX-Code

\family sans
molecule wc_basepair
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

basepair
\end_layout

\end_inset

( residue res, residue cres );
\end_layout

\begin_layout Standard
bdna() converts the character string 
\family sans
seq
\family default
 containing one or more 
\family sans
A
\family default
, 
\family sans
C
\family default
, 
\family sans
G
\family default
 or 
\family sans
T
\family default
s (or their lower case equivalents) into a uniform ideal Watson/Crick B-form
 DNA duplex.
 Each basepair has an X-offset of 2.25 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, an inclination of -4.96 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 and a helical step of 3.38 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 rise and 36.0o twist.
 The first character of 
\family sans
seq
\family default
 is the 5' base of the strand 
\family sans
"sense"
\family default
 of the molecule returned by 
\family sans
bdna()
\family default
.
 The other strand is called 
\family sans
"anti"
\family default
.
 The phosphates of the two 5' bases have been replaced by hydrogens and
 and hydrogens have been added to the two 
\family sans
O3'
\family default
 atoms of the three prime bases.
 
\family sans
bdna()
\family default
 returns 
\family sans
NULL
\family default
 if it can not create the molecule.
\end_layout

\begin_layout Standard

\family sans
wc_complement()
\family default
 returns a 
\family sans
string
\family default
 that is the Watson/Crick complement of its argument 
\family sans
seq
\family default
.
 Each 
\family sans
C
\family default
, 
\family sans
G
\family default
, 
\family sans
T
\family default
 (
\family sans
U
\family default
) in 
\family sans
seq
\family default
 is replaced by 
\family sans
G
\family default
, 
\family sans
C
\family default
 and 
\family sans
A
\family default
.
 The replacements for 
\family sans
A
\family default
 depends if 
\family sans
rlt
\family default
 is DNA or RNA.
 If it is DNA, 
\family sans
A
\family default
 is replaced by 
\family sans
T
\family default
.
 If it is RNA 
\family sans
A
\family default
 is replaced by 
\family sans
U
\family default
.
 
\family sans
wc_complement()
\family default
 considers lower case and upper case letters to be the same and always returns
 upper case letters.
 
\family sans
wc_complement()
\family default
 returns 
\family sans
NULL
\family default
 on error.
 Note that the while the orientations of the argument string and the returned
 string are opposite, their absolute orientations are 
\shape italic
undefined
\shape default
 until they are used to create a molecule.
\end_layout

\begin_layout Standard

\family sans
wc_helix()
\family default
 creates a uniform duplex from its arguments.
 The two strands of the returned 
\family sans
molecule
\family default
 are called 
\family sans
"sense"
\family default
 and 
\family sans
"anti"
\family default
.
 The two sequences, 
\family sans
seq
\family default
 and 
\family sans
cseq
\family default
 must specify Watson/Crick base pairs.
 Note the that must be specified as 
\shape italic
lower-case
\shape default
 strings, such as "ggact".
 The nucleic acid type ( DNA or RNA ) of the sense strand is specified by
 
\family sans
natype
\family default
 and of the complementary strand 
\family sans
cseq
\family default
 by 
\family sans
cnatype
\family default
.
 Two residue libraries—
\family sans
rlib
\family default
 and 
\family sans
crlib
\family default
— permit creation of DNA:RNA heteroduplexes.
 If either 
\family sans
seq
\family default
 or 
\family sans
cseq
\family default
 (but not both) is 
\family sans
NULL
\family default
 only the specified strand of what would have been a uniform duplex is created.
 The 
\family sans
options
\family default
 string contains some combination of the strings "s5", "s3", "a5" and "a3";
 these indicate which (if any) of the ends of the helices should be "capped"
 with hydrogens attached to the O5' atom (in place of a phosphate) if "s5"
 or "a5" is specified, and a proton added to the O3' position if "s3" or
 "a3" is specified.
 A blank string indicates no capping, which would be appropriate if this
 section of helix were to be inserted into a larger molecule.
 The string "s5a5s3a3" would cap the 5' and 3' ends of both the "sense"
 and "anti" strands, leading to a chemically complete molecule.
 
\family sans
wc_helix()
\family default
 returns 
\family sans
NULL
\family default
 on error.
\end_layout

\begin_layout Standard

\family sans
dg_helix()
\family default
 is the functional equivalent of 
\family sans
wc_helix()
\family default
 but with the backbone geometry minimized via a distance constraint error
 function.
 
\family sans
dg_helix()
\family default
 takes the same arguments as 
\family sans
wc_helix()
\family default
.
\end_layout

\begin_layout Standard

\family sans
wc_basepair()
\family default
 assembles two nucleic acid residues (assumed to be in a standard orientation)
 into a two stranded molecule containing one Watson/Crick base pair.
 The two strands of the new molecule are 
\family sans
"sense"
\family default
 and 
\family sans
"anti"
\family default
.
 It returns 
\family sans
NULL
\family default
 on error.
\end_layout

\begin_layout Section

\series bold
nab and Distance Geometry
\end_layout

\begin_layout Standard
Distance geometry is a method which converts a molecule represented as a
 set of interatomic distances and related information into a 3-D structure.
 
\family sans
nab
\family default
 has several builtin functions that are used together to provide metric
 matrix distance geometry.
 
\family sans
nab
\family default
 also provides the 
\family sans
bounds
\family default
 type for holding a molecule's distance geometry information.
 A 
\family sans
bounds
\family default
 object contains the molecule's interatomic distance bounds matrix and a
 list of its chiral centers and their volumes.
 
\family sans
nab
\family default
 uses chiral centers with a volume of 
\family sans
0
\family default
 to enforce planarity.
\end_layout

\begin_layout Standard
Distance geometry has several advantages.
 It is unique in its power to create structures from very incomplete description
s.
 It easily incorporates 
\begin_inset Quotes eld
\end_inset

low resolution structural data
\begin_inset Quotes erd
\end_inset

 such as that derived from chemical probing since these kinds of experiments
 generally return only distance bounds.
 And it also provides an elegant method by which structures may be described
 functionally.
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 distance geometry package is described more fully in the section 
\series bold
NAB Language Reference
\series default
.
 Generally, the function 
\family sans
newbounds()
\family default
 creates and returns a 
\family sans
bounds
\family default
 object corresponding to the molecule 
\family sans
mol
\family default
.
 This object contains two things—a distance bounds matrix containing initial
 upper and lower bounds for every pair of atoms in 
\family sans
mol
\family default
 and a initial list of the molecules chiral centers and their volumes.
 Once a 
\family sans
bounds
\family default
 object has been initialized, the modeller uses functions from the middle
 of the distance geometry function list to tighten, loosen or set other
 distance bounds and chiralities that correspond to experimental measurements
 or parts of the model's hypothesis.
 The four functions 
\family sans
andbounds()
\family default
, 
\family sans
orbounds()
\family default
, 
\family sans
setbounds
\family default
 and 
\family sans
useboundsfrom()
\family default
 work in similar fashion.
 Each uses two atom expressions to select pairs of atoms from 
\family sans
mol
\family default
.
 In 
\family sans
andbounds()
\family default
, the current distance bounds of each pair are compared against 
\family sans
lb
\family default
 and 
\family sans
ub
\family default
 and are replaced by 
\family sans
lb
\family default
, 
\family sans
ub
\family default
 if they represent tighter bounds.
 
\family sans
orbounds()
\family default
 replaces the current bounds of each selected pair, if 
\family sans
lb
\family default
, 
\family sans
ub
\family default
 represent looser bounds.
 
\family sans
setbounds()
\family default
 sets the bounds of all selected pairs to 
\family sans
lb
\family default
, 
\family sans
ub
\family default
.
 
\family sans
useboundsfrom()
\family default
 sets the bounds between each atom selected in the first expression to a
 percentage of the distance between the atoms selected in the second atom
 expression.
 If the two atom expressions select the same atoms from the same molecule,
 the bounds between all the atoms selected will be constrained to the current
 geometry.
 
\family sans
setchivol()
\family default
 takes four atom expressions that must select exactly four atoms and sets
 the volume of the tetrahedron enclosed by those atoms to 
\family sans
vol
\family default
.
 Setting 
\family sans
vol
\family default
 to 
\family sans
0
\family default
 forces those atoms to be planar.
 
\family sans
getchivol()
\family default
 returns the chiral volume of the tetrahedron described by the four points.
\end_layout

\begin_layout Standard
After all experimental and model constraints have been entered into the
 
\family sans
bounds
\family default
 object, the function 
\family sans
tsmooth()
\family default
 applies a process called 
\begin_inset Quotes eld
\end_inset

triangle smoothing
\begin_inset Quotes erd
\end_inset

 to them.
 This tests each triple of distance bounds to see if they can form a triangle.
 If they can not form a triangle then the distance bounds do not even represent
 a Euclidean object let alone a 3-D one.
 If this occurs, 
\family sans
tsmooth()
\family default
 quits and returns a 
\family sans
1
\family default
 indicating failure.
 If all triples can form triangles, 
\family sans
tsmooth()
\family default
 returns a 
\family sans
0
\family default
.
 Triangle smoothing pulls in the large upper bounds.
 After all, the maximum distance between two atoms can not exceed the sum
 of the upper bounds of the shortest path between them.
 Triangle smoothing can also increase lower bounds, but this process is
 much less effective as it requires one or more large lower bounds to begin
 with.
\end_layout

\begin_layout Standard
The function 
\family sans
embed()
\family default
 takes the smoothed bounds and converts them into a 3-D object.
 This process is called 
\begin_inset Quotes eld
\end_inset

embedding
\begin_inset Quotes erd
\end_inset

.
 It does this by choosing a random distance for each pair of atoms within
 the bounds of that pair.
 Sometimes the bounds simply do not represent a 3-D object and 
\family sans
embed()
\family default
 fails, returning the value 
\family sans
1
\family default
.
 This is rare and usually indicates the that the distance bounds matrix
 part of the 
\family sans
bounds
\family default
 object contains errors.
 If the distance set does embed, 
\family sans
conjgrad()
\family default
 can subject newly embedded coordinates to conjugate gradient refinement
 against the distance and chirality information contained in 
\family sans
bounds
\family default
.
 The refined coordinates can replace the current coordinates of the molecule
 in 
\family sans
mol
\family default
.
 
\family sans
embed()
\family default
 returns a 
\family sans
0
\family default
 on success and 
\family sans
conjgrad()
\family default
 returns an exit code explained further in the 
\series bold
Language Reference
\series default
 section of this manual.
 The call to 
\family sans
embed()
\family default
 is usually placed in a loop with each new structure saved after each call
 to see the diversity of the structures the bounds represent.
\end_layout

\begin_layout Standard
In addition to the explicit bounds manipulation functions, 
\family sans
nab
\family default
 provides an implicit way of setting bounds between interacting residues.
 The function 
\family sans
setboundsfromdb()
\family default
 is for use in creating distance and chirality bounds for nucleic acids.
 
\family sans
setboundsfromdb()
\family default
 takes as an argument two atom expressions selecting two residues, the name
 of a database containing bounds information, and a number which dictates
 the tightness of the bounds.
 For instance, if the database 
\shape italic
bdna.stack.db
\shape default
 is specified, 
\family sans
setboundsfromdb()
\family default
 sets the bounds between the two residues to what they would be if they
 were stacked in strand in a typical Watson-Crick B-form duplex.
 Similarly, if the database 
\shape italic
arna.basepair.db
\shape default
 is specified, 
\family sans
setboundsfromdb()
\family default
 sets the bounds between the two residues to what they would be if the two
 residues form a typical Watson-Crick basepair in an A-form helix.
\end_layout

\begin_layout Subsection

\series bold
Refine DNA Backbone Geometry
\end_layout

\begin_layout Standard
As mentioned previously, 
\family sans
wc_helix()
\family default
 performs rigid body transformations on residues and does not correct for
 poor backbone geometry.
 Using distance geometry, several techniques are available to correct the
 backbone geometry.
 In program 7, an 8-basepair dna sequence is created using 
\family sans
wc_helix()
\family default
.
 A new bounds object is created on line 14, which automatically sets all
 the 1-2, 1-3, and 1-4 distance bounds information according the geometry
 of the model.
 Since this molecule was created using 
\family sans
wc_helix()
\family default
, the O3'-P distance between adjacent stacked residues is often not the
 optimal 1.595 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{ }
\end_layout

\end_inset

, and hence, the 1-2, 1-3, and 1-4, distance bounds set by 
\family sans
newbounds()
\family default
 are incorrect.
 We want to preserve the position of the nucleotide bases, however, since
 this is the helix whose backbone we wish to minimize.
 Hence the call to 
\family sans
useboundsfrom()
\family default
 on line 17 which sets the bounds from every atom in each nucleotide base
 to the actual distance to every other atom in every other nucleotide base.
 
\shape italic
In general, the likelihood of a distance geometry refinement to satisfy
 a given bounds criteria is proportional to the number of ( consistent )
 bounds set supporting that criteria
\shape default
.
 In other words, the more bounds that are set supporting a given conformation,
 the greater the chance that conformation will resolve after the refinement.
 An example of this concept is the use of 
\family sans
useboundsfrom()
\family default
 in line 17, which works to preserve our rigid helix conformation of all
 the nucleotide base atoms.
\end_layout

\begin_layout Standard
We can correct the backbone geometry by overwriting the erroneous bounds
 with more appropriate bounds.
 In lines 19-29, all the 1-2, 1-3, and 1-4 bounds involving the O3'-P connection
 between strand 1 residues are set to that which would be appropriate for
 an idealized phosphate linkage.
 Similarly, in lines 31-41, all the 1-2, 1-3, and 1-4 bounds involving the
 O3'-P connection among strand 2 residues are set to an idealized conformation.
 This technique is effective since all the 1-2, 1-3, and 1-4 distance bounds
 created by 
\family sans
newbounds()
\family default
 include those of the idealized nucleotides in the nucleic acid libraries
 
\family sans
dna.amber94.rlb
\family default
, 
\family sans
rna.amber94.rlb
\family default
, 
\shape italic
etc.

\shape default
 contained in 
\family sans
reslib
\family default
.
 Hence, by setting these bounds and refining against the distance energy
 function, we are spreading the 'error' across the backbone, where the 'error'
 is the departure from the idealized sugar conformation and idealized phosphate
 linkage.
\end_layout

\begin_layout Standard
On line 43, we smooth the bounds matrix, and on line 44 we give a substantial
 penalty for deviating from a 3-D refinement by setting k4d=
\begin_inset Formula $4.0$
\end_inset

.
 Notice that there is no need to embed the molecule in this program, as
 the actual coordinates are sufficient for any refinement.

\shape italic
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

 //  Program 7 - refine backbone geometry using distance function
\end_layout

\begin_layout Plain Layout

 molecule m;
\end_layout

\begin_layout Plain Layout

 bounds b;
\end_layout

\begin_layout Plain Layout

 string  seq, cseq;
\end_layout

\begin_layout Plain Layout

 int i;
\end_layout

\begin_layout Plain Layout

 float xyz[ dynamic ], fret;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 seq = "acgtacgt";
\end_layout

\begin_layout Plain Layout

 cseq = wc_complement( "acgtacgt", "", "dna" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 m = wc_helix( seq, "", "dna", cseq, "",
\end_layout

\begin_layout Plain Layout

               "dna", 2.25, -4.96, 36.0, 3.38, "" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 b = newbounds(m, "");
\end_layout

\begin_layout Plain Layout

 allocate xyz[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 useboundsfrom(b, m, "::??,H?[^T']", m, "::??,H?[^T']", 0.0 );
\end_layout

\begin_layout Plain Layout

 for ( i = 1; i < m.nresidues/2 ; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   1.595,1.595);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O5'",i+1), 2.469,2.469);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   2.609,2.609);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O1P",i+1), 2.513,2.513);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O2P",i+1), 2.515,2.515);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C4'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   3.550,4.107);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C2'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   3.550,4.071);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O1P",i+1), 3.050,3.935);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O2P",i+1), 3.050,4.004);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O5'",i+1), 3.050,3.859);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:C5'",i+1), 3.050,3.943);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   1.595,1.595);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O5'",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   2.469,2.469);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   2.609,2.609);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O1P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   2.513,2.513);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O2P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   2.515,2.515);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C4'",i),   3.550,4.107);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C2'",i),   3.550,4.071);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O1P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   3.050,3.935);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O2P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   3.050,4.004);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O5'",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   3.050,3.859);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:C5'",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   3.050,3.943);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

tsmooth( b, 0.0005 );
\end_layout

\begin_layout Plain Layout

dg_options(b, "seed=33333, gdist=0, ntpr=100, k4d=4.0" );
\end_layout

\begin_layout Plain Layout

setxyzw_from_mol( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.1, 10., 500 );
\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "acgtacgt.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The approach of Program 7 is effective but has a disadvantage in that it
 does not scale linearly with the number of atoms in the molecule.
 In particular, 
\family sans
tsmooth()
\family default
 and 
\family sans
conjgrad()
\family default
 require extensive CPU cycles for large numbers of residues.
 For this reason, the function 
\family sans
dg_helix()
\family default
 was created.
 
\family sans
dg_helix()
\family default
 takes uses the same method of Program 7, but employs a 3-basepair helix
 template which traverses the new helix as it is being constructed.
 In this way, the helix is built in a piecewise manner and the maximum number
 of residues considered in each refinement is less than or equal to six.
 This is the preferred method of helix construction for large, idealized
 canonical duplexes.
\end_layout

\begin_layout Subsection

\series bold
RNA Pseudoknots
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pknot.eps
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.pknot1"

\end_inset

Single-stranded RNA 
\emph on
(top)
\emph default
 folded into a pseudoknot 
\emph on
(bottom).

\emph default
 The black and dark grey base pairs can be stacked.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to the standard helix generating functions, 
\family sans
nab
\family default
 provides extensive support for generating initial structures from low structura
l information.
 As an example, we will describe the construction of a model of an RNA pseudokno
t based on a small number of secondary and tertiary structure descriptions.
 Shen and Tinoco (
\shape italic
J.
 Mol.
 Biol.

\shape default
 
\series bold
247,
\series default
 963-978, 1995) used the molecular mechanics program X-PLOR to determine
 the three dimensional structure of a 34 nucleotide RNA sequence that folds
 into a pseudoknot.
 This pseudoknot promotes frame shifting in Mouse Mammary Tumor Virus.
 A pseudoknot is a single stranded nucleic acid molecule that contains two
 improperly nested hairpin loops as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.pknot1"

\end_inset

.
 NMR distance and angle constraints were converted into a three dimensional
 structure using a two stage restrained molecular dynamics protocol.
 Here we show how a three-dimensional model can be constructed using just
 a few key features derived from the NMR investigation.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 8 - create a pseudoknot using distance geometry
\end_layout

\begin_layout Plain Layout

molecule m;  
\end_layout

\begin_layout Plain Layout

float   xyz[ dynamic ],f[ dynamic ],v[ dynamic ];
\end_layout

\begin_layout Plain Layout

bounds  b;
\end_layout

\begin_layout Plain Layout

int     i, seqlen;
\end_layout

\begin_layout Plain Layout

float   fret;
\end_layout

\begin_layout Plain Layout

string  seq, opt;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

seq = "GCGGAAACGCCGCGUAAGCG";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

seqlen = length(seq);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = link_na("1", seq, "", "RNA", "35");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

allocate xyz[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

allocate f[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

allocate v[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

b = newbounds(m, "");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for ( i = 1; i <= seqlen; i = i + 1) {
\end_layout

\begin_layout Plain Layout

        useboundsfrom(b, m, sprintf("1:%d:??,H?[^'T]", i), m,
\end_layout

\begin_layout Plain Layout

        sprintf("1:%d:??,H?[^'T]", i), 0.0 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:1:",  "1:2:",  "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:2:",  "1:3:",  "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:3:",  "1:18:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:18:", "1:19:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:19:", "1:20:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:8:",  "1:9:",  "arna.stack.db",    1.0); 
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:9:",  "1:10:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:10:", "1:11:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:11:", "1:12:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:12:", "1:13:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:1:",  "1:13:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:2:",  "1:12:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:3:",  "1:11:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:8:",  "1:20:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:9:",  "1:19:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:10:", "1:18:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

tsmooth(b, 0.0005);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

opt = "seed=571, gdist=0, ntpr=50, k4d=2.0, randpair=5., sqviol=1";
\end_layout

\begin_layout Plain Layout

dg_options( b, opt );
\end_layout

\begin_layout Plain Layout

embed(b, xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.1, 10., 500 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "rna_pseudoknot.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Program 8 uses distance geometry followed by minimization and simulated
 annealing to create a model of a pseudoknot.
 Distance geometry code begins in line 20 with the call to 
\family sans
newbounds()
\family default
 and ends on line 53 with the call to 
\family sans
embed()
\family default
.
 The structure created with distance geometry is further refined with molecular
 dynamics in lines 58-74.
 Note that very little structural information is given - only connectivity
 and general base-base interactions.
 The stacking and base-pair interactions here are derived from NMR evidence,
 but in other cases might arise from other sorts of experiments, or as a
 model hypothesis to be tested.
\end_layout

\begin_layout Standard
The 20-base RNA sequence is defined on line 9.
 The molecule itself is created with the 
\family sans
link_na()
\family default
 function call which creates an extended conformation of the RNA sequence
 and caps the 5' and 3' ends.
 Lines 15-17 define arrays that will be used in the simulated annealing
 of the structure.
 The bounds object is created in line 19 which automatically sets the 1-2,
 1-3, and 1-4 distance bounds in the molecule.
 The loop in lines 21-24 sets the bounds of each atom in each residue base
 to the actual distance to every other atom in the same base.
 This has the effect of enforcing the planarity of the base by treating
 the base somewhat like a rigid body.
 In lines 26-44, bounds are set according to information stored in a database.
 The 
\family sans
setboundsfromdb()
\family default
 call sets the bounds from all the atoms in the two specified residues to
 a 
\begin_inset Formula $1.0$
\end_inset

 multiple of the standard deviation of the bounds distances in the specified
 database.
 Specifically, line 26 sets the bounds between the base atoms of the first
 and second residues of strand 1 to be within one standard deviation of
 a 
\shape italic
typical
\shape default
 aRNA stacked pair.
 Similarly, line 38 sets the bounds between residues 1 and 13 to be that
 of 
\shape italic
typical
\shape default
 Watson-Crick basepairs.
 For a description of the 
\family sans
setboundsfromdb()
\family default
 function, see Chapter 1.
\end_layout

\begin_layout Standard
Line 46 smooths the bounds matrix, by attempting to adjust any sets of bounds
 that violate the triangle equality.
 Lines 48-49 initialize some distance geometry variables by setting the
 random number generator seed, declaring the type of distance distribution,
 how often to print the energy refinement process, declaring the penalty
 for using a 4th dimension in refinement, and which atoms to use to form
 the initial metric matrix.
 The coordinates are calculated and embedded into a 3D coordinate array,
 
\shape italic
xyz
\shape default
 by the 
\family sans
embed()
\family default
 function call on line 50.
\end_layout

\begin_layout Standard
The coordinates 
\shape italic
xyz
\shape default
 are subject to conjugate gradient refinements in line 52.
 Line 54 replaces the old molecular coordinates with the new refined ones,
 and lastly, on line 55, the molecule is saved as "rna_pseudoknot.pdb".
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename rnaknot.png
	lyxscale 80
	width 60text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.pknot2"

\end_inset

Folded RNA pseudoknot.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The resulting structure of Program 8 is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.pknot2"

\end_inset

.
 This structure had an final total energy of 46 units.
 The helical region, shown as polytubes, shows stacking and wc-pairing interacti
ons and a well-defined right-handed helical twist.
 Of course, good modeling of a "real" pseudoknot would require putting in
 more constraints, but this example should illustrate how to get started
 on problems like this.
\end_layout

\begin_layout Subsection

\series bold
NMR refinement for a protein
\end_layout

\begin_layout Standard
Distance geometry techniques are often used to create starting structures
 in NMR refinement.
 Here, in addition to the covalent connections, one makes use of a set of
 distance and torsional restraints derived from NMR data.
 While NAB is not (yet?) a fully-functional NMR refinement package, it has
 enough capabilities to illustrate the basic ideas, and could be the starting
 point for a flexible procedure.
 Here we give an illustration of how the rough structure of a protein can
 be determined using distance geometry and NMR distance constraints; the
 structures obtained here would then be candidates for further refinement
 in programs like X-plor or Amber.
\end_layout

\begin_layout Standard
The program below illustrates a general procedure for a primarily helical
 DNA binding domain.
 Lines 15-22 just construct the sequence in an extended conformation, such
 that bond lengths and angles are correct, but none of the torsions are
 correct.
 The bond lengths and angles are used by 
\family sans
newbounds()
\family default
 to construct the "covalent" part of the bounds matrix.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

//  Program 8a.
 General driver routine to do distance geometry 
\backslash
fC
\end_layout

\begin_layout Plain Layout

//    on proteins, with DYANA-like distance restraints.
\backslash
fC
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define MAXCOORDS 12000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

atom    a;
\end_layout

\begin_layout Plain Layout

bounds    b;
\end_layout

\begin_layout Plain Layout

int    ier,i, numstrand, ires,jres;
\end_layout

\begin_layout Plain Layout

float    fret, rms, ub;
\end_layout

\begin_layout Plain Layout

float    xyz[ MAXCOORDS ], f[ MAXCOORDS ], v[ MAXCOORDS ];
\end_layout

\begin_layout Plain Layout

file    boundsf;
\end_layout

\begin_layout Plain Layout

string  iresname,jresname,iat,jat,aex1,aex2,aex3,aex4,line,dgopts,seq;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  sequence of the mrf2 protein:
\end_layout

\begin_layout Plain Layout

seq = "RADEQAFLVALYKYMKERKTPIERIPYLGFKQINLWTMFQAAQKLGGYETITARRQWKHIY"
\end_layout

\begin_layout Plain Layout

    + "DELGGNPGSTSAATCTRRHYERLILPYERFIKGEEDKPLPPIKPRK";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  build this sequence in an extended conformation, and construct a bounds
\end_layout

\begin_layout Plain Layout

//     matrix just based on the covalent structure:
\end_layout

\begin_layout Plain Layout

m = linkprot( "A", seq, "" );
\end_layout

\begin_layout Plain Layout

b = newbounds( m, "" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  read in constraints, updating the bounds matrix using "andbounds":
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  distance constraints are basically those from Y.-C.
 Chen, R.H.
  Whitson
\end_layout

\begin_layout Plain Layout

//    Q.
 Liu, K.
 Itakura and Y.
 Chen, "A novel DNA-binding motif shares
\end_layout

\begin_layout Plain Layout

//    structural homology to DNA replication and repair nucleases and
\end_layout

\begin_layout Plain Layout

//    polymerases,"  Nature Sturct.
 Biol.
 5:959-964 (1998).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

boundsf = fopen( "mrf2.7col", "r" );
\end_layout

\begin_layout Plain Layout

while( line = getline( boundsf ) ){
\end_layout

\begin_layout Plain Layout

    sscanf( line, "%d %s %s %d %s %s %lf", ires, iresname, iat,
\end_layout

\begin_layout Plain Layout

        jres, jresname, jat, ub );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//   translations for DYANA-style pseudoatoms:
\end_layout

\begin_layout Plain Layout

    if( iat == "HN" ){ iat = "H"; }
\end_layout

\begin_layout Plain Layout

    if( jat == "HN" ){ jat = "H"; }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( iat == "QA" ){ iat = "CA"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QA" ){ jat = "CA"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QB" ){ iat = "CB"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QB" ){ jat = "CB"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QG" ){ iat = "CG"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QG" ){ jat = "CG"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QD" ){ iat = "CD"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QD" ){ jat = "CD"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QE" ){ iat = "CE"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QE" ){ jat = "CE"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QQG" ){ iat = "CB"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QQG" ){ jat = "CB"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QQD" ){ iat = "CG"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QQD" ){ jat = "CG"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QG1" ){ iat = "CG1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QG1" ){ jat = "CG1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QG2" ){ iat = "CG2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QG2" ){ jat = "CG2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QD1" ){ iat = "CD1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QD1" ){ jat = "CD1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QD2" ){ iat = "ND2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QD2" ){ jat = "ND2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QE2" ){ iat = "NE2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QE2" ){ jat = "NE2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", ires) + ":" + iat;
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", jres) + ":" + jat;
\end_layout

\begin_layout Plain Layout

    andbounds( b, m, aex1, aex2, 0.0, ub );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

fclose( boundsf );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  add in helical chirality constraints to force right-handed helices:
\end_layout

\begin_layout Plain Layout

//    (hardwire in locations 1-16, 36-43, 88-92)
\end_layout

\begin_layout Plain Layout

for( i=1; i<=12; i++){
\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", i ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", i+1 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex3 = ":" + sprintf( "%d", i+2 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex4 = ":" + sprintf( "%d", i+3 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    setchivol( b, m, aex1, aex2, aex3, aex4, 7.0 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

for( i=36; i<=39; i++){
\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", i ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", i+1 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex3 = ":" + sprintf( "%d", i+2 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex4 = ":" + sprintf( "%d", i+3 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    setchivol( b, m, aex1, aex2, aex3, aex4, 7.0 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

for( i=88; i<=89; i++){
\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", i ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", i+1 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex3 = ":" + sprintf( "%d", i+2 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex4 = ":" + sprintf( "%d", i+3 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    setchivol( b, m, aex1, aex2, aex3, aex4, 7.0 );
\end_layout

\begin_layout Plain Layout

}   
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  set up some options for the distance geometry calculation
\end_layout

\begin_layout Plain Layout

//   here use the random embed method: 
\end_layout

\begin_layout Plain Layout

dgopts = "ntpr=10000,rembed=1,rbox=300.,riter=250000,seed=8511135";
\end_layout

\begin_layout Plain Layout

dg_options( b, dgopts );
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  do triangle-smoothing on the bounds matrix, then embed:
\end_layout

\begin_layout Plain Layout

geodesics( b ); embed( b, xyz );
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  now do conjugate-gradient minimization on the resulting structures:
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  first, weight the chirality constraints heavily:
\end_layout

\begin_layout Plain Layout

dg_options( b, "ntpr=20, k4d=5.0, sqviol=0, kchi=50." );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.02, 1000., 300 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  next, squeeze out the fourth dimension, and increase penalties for
\end_layout

\begin_layout Plain Layout

//     distance violations:
\end_layout

\begin_layout Plain Layout

dg_options( b, "k4d=10.0, sqviol=1, kchi=50." );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.02, 100., 400 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  transfer the coordinates from the "xyz" array to the molecule
\end_layout

\begin_layout Plain Layout

//  itself, and print out the violations:
\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

dumpboundsviolations( stdout, b, 0.5 );
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  do a final short molecular-mechanics "clean-up":
\end_layout

\begin_layout Plain Layout

putpdb( m, "temp.pdb" );
\end_layout

\begin_layout Plain Layout

m = getpdb_prm( "temp.pdb", "leaprc.protein.ff14SB", "", 0 );
\end_layout

\begin_layout Plain Layout

setxyz_from_mol( m, NULL, xyz ); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mm_options( "cut=10.0" );
\end_layout

\begin_layout Plain Layout

mme_init( m, NULL, "::ZZZ", xyz, NULL );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 3*m.natoms, fret, mme, 0.02, 100., 200 );
\end_layout

\begin_layout Plain Layout

setmol_from_xyz( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( argv[3] + ".mm.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the covalent bounds are created, the the bounds matrix is modified
 by constraints constructed from an NMR analysis program.
 This particular example uses the format of the DYANA program, but NAB could
 be easily modified to read in other formats as well.
 Here are a few lines from the 
\shape italic
mrf2.7col
\shape default
 file:
\end_layout

\begin_layout LyX-Code
1 ARG+ QB  2 ALA  QB  7.0
\end_layout

\begin_layout LyX-Code
4 GLU- HA 93 LYS+ QB  7.0
\end_layout

\begin_layout LyX-Code
5 GLN  QB  8 LEU  QQD 9.9
\end_layout

\begin_layout LyX-Code
5 GLN  HA  9 VAL  QQG 6.4
\end_layout

\begin_layout LyX-Code
85 ILE HA 92 ILE  QD1 6.0
\end_layout

\begin_layout LyX-Code
5 GLN  HN  1 ARG+ O   2.0
\end_layout

\begin_layout LyX-Code
5 GLN  N   1 ARG+ O   3.0
\end_layout

\begin_layout LyX-Code
6 ALA  HN  2 ALA  O   2.0
\end_layout

\begin_layout LyX-Code
6 ALA  N   2 ALA  O   3.0
\end_layout

\begin_layout Standard
The format should be self-explanatory, with the final number giving the
 upper bound.
 Code in lines 31-69 reads these in, and translates pseudo-atom codes like
 "QQD" into atom names.
 Lines 71-93 add in chirality constraints to ensure right-handed alpha-helices:
 distance constraints alone do not distinguish chirality, so additions like
 this are often necessary.
 The "actual" distance geometry steps take place in line 101, first by triangle-
smoothing the bounds, then by embedding them into a three-dimensional object.
 The structures at this point are actually generally quite bad, so "real-space"
 refinement is carried out in lines 103-112, and a final short molecular
 mechanics minimization in lines 119-126.
\end_layout

\begin_layout Standard
It is important to realize that many of the structures for the above scheme
 will get "stuck", and not lead to good structures for the complex.
 Helical proteins are especially difficult for this sort of distance geometry,
 since helices (or even parts of helices) start out left-handed, and it
 is not always possible to easily convert these to right-handed structures.
 For this particular example, (using different values for the 
\shape italic
seed
\shape default
 in line 97), we find that about 30-40% of the structures are "acceptable",
 in the sense that further refinement in Amber yields good structures.
\end_layout

\begin_layout Section

\series bold
Building Larger Structures
\end_layout

\begin_layout Standard
While the DNA duplex is locally rather stiff, many DNA molecules are sufficientl
y long that they can be bent into a wide variety of both open and closed
 curves.
 Some examples would be simple closed circles, supercoiled closed circles
 that have relaxed into circles with twists and the nucleosome core fragment
 where the duplex itself is wound into a short helix.
 This section shows how 
\family sans
nab
\family default
 can be used to 
\begin_inset Quotes eld
\end_inset

wrap
\begin_inset Quotes erd
\end_inset

 DNA around a curve.
 Three examples are provided: the first produces closed circles with or
 without supercoiling, the second creates a simple model of the nucleosome
 core fragment and the third shows how to wind a duplex around a more arbitrary
 open curve specified as a set of points.
 The examples are fairly general but do require that the curves be relatively
 smooth so that the deformation from a linear duplex at each step is small.
\end_layout

\begin_layout Standard
Before discussing the examples and the general approach they use, it will
 be helpful to define some terminology.
 The helical axis of a base pair is the helical axis defined by an ideal
 B-DNA duplex that contains that base pair.
 The base pair plane is the mean plane of both bases.
 The origin of a base pair is at the intersection the base pair's helical
 axis and its mean plane.
 Finally the rise is the distance between the origins of adjacent base pairs.
\end_layout

\begin_layout Standard
The overall strategy for wrapping DNA around a curve is to create the curve,
 find the points on the curve that contain the base pair origins, place
 the base pairs at these points, oriented so that their helical axes are
 tangent to the curve and finally rotate the base pairs so that they have
 the correct helical twist.
 In all the examples below, the points are chosen so that the rise is constant.
 This is by no means an absolute requirement, but it does simplify the calculati
ons needed to locate base pairs, and is generally true for the gently bending
 curves these examples are designed for.
 In examples 1 and 2, the curve is simple, either a circle or a helix, so
 the points that locate the base pairs are computed directly.
 In addition, the bases are rotated about their original helical axes so
 that they have the correct helical orientation before being placed on the
 curve.
\end_layout

\begin_layout Standard
However, this method is inadequate for the more complicated curves that
 can be handled by example 3.
 Here each base is placed on the curve so that its helical axis is aligned
 correctly, but its helical orientation with respect to the previous base
 is arbitrary.
 It is then rotated about its helical axis so that it has the correct twist
 with respect to the previous base.
\end_layout

\begin_layout Subsection

\series bold
Closed Circular DNA
\end_layout

\begin_layout Standard
This section describes how to use 
\family sans
nab
\family default
 to make closed circular duplex DNA with a uniform rise of 3.38 
\begin_inset Formula $\textrm{Å}$
\end_inset

.
 Since the distance between adjacent base pairs is fixed, the radius of
 the circle that forms the axis of the duplex depends only on the number
 of base pairs and is given by this rule:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
rad
\shape default
=
\shape italic
rise
\shape default
/(2sin(180/
\shape italic
nbp
\shape default
))
\end_layout

\begin_layout Standard
where 
\shape italic
nbp
\shape default
 is the number of base pairs.
 To see why this is so, consider the triangle below formed by the center
 of the circle and the centers of two adjacent base pairs.
 The two long sides are radii of the circle and the third side is the rise.
 Since the the base pairs are uniformly distributed about the circle the
 angle between the two radii is 360/
\shape italic
nbp
\shape default
.
 Now consider the right triangle in the top half of the original triangle.
 The angle at the center is 180/
\shape italic
nbp
\shape default
, the opposite side is 
\shape italic
rise/2
\shape default
 and 
\shape italic
rad
\shape default
 follows from the definition of sin.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename dna.circle.eps
	width 50text%

\end_inset


\end_layout

\begin_layout Standard
In addition to the radius, the helical twist which is a function of the
 amount of supercoiling must also be computed.
 In a closed circular DNA molecule, the last base of the duplex must be
 oriented in such a way that a single helical step will superimpose it on
 the first base.
 In circles based on ideal B-DNA, with 10 bases/turn, this requires that
 the number of base pairs in the duplex be a multiple of 10.
 Supercoiling adds or subtracts one or more whole turns.
 The amount of supercoiling is specified by the 
\begin_inset Formula $\Delta linkingnumber$
\end_inset

 which is the number of extra turns to add or subtract.
 If the original circle had 
\shape italic
nbp
\shape default
/10 turns, the supercoiled circle will have 
\begin_inset Formula $nbp/10+\Delta lk$
\end_inset

 turns.
 As each turn represents 360o of twist and there are 
\shape italic
nbp
\shape default
 base pairs, the twist between base pairs is
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
(
\shape italic
nbp
\shape default
/10+
\begin_inset Formula $\Delta$
\end_inset


\shape italic
lk
\shape default
)
\begin_inset Formula $\times$
\end_inset

360/
\shape italic
nbp
\end_layout

\begin_layout Standard
At this point, we are ready to create models of circular DNA.
 Bases are added to model in three stages.
 Each base pair is created using the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
.
 It is originally in the XY plane with its center at the origin.
 This makes it convenient to create the DNA circle in the XZ plane.
 After the base pair has been created, it is rotated around its own helical
 axis to give it the proper twist, translated along the global X axis to
 the point where its center intersects the circle and finally rotated about
 the Y axis to move it to its final location.
 Since the first base pair would be both twisted about Z and rotated about
 Y 0o, those steps are skipped for base one.
 A detailed description follows the code.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 9 - Create closed circular DNA.
\end_layout

\begin_layout Plain Layout

#define RISE    3.38
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int     b, nbp, dlk;
\end_layout

\begin_layout Plain Layout

float       rad, twist, ttw;
\end_layout

\begin_layout Plain Layout

molecule    m, m1;
\end_layout

\begin_layout Plain Layout

matrix      matdx, mattw, matry;
\end_layout

\begin_layout Plain Layout

string      sbase, abase;
\end_layout

\begin_layout Plain Layout

int     getbase();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( argc != 3 ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr, "usage: %s nbp dlk
\backslash

\backslash
n", argv[ 1 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

nbp = atoi( argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

if( !nbp || nbp % 10 ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr,
\end_layout

\begin_layout Plain Layout

    "%s: Num.
 of base pairs must be multiple of 10
\backslash

\backslash
n",
\end_layout

\begin_layout Plain Layout

        argv[ 1 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dlk = atoi( argv[ 3 ] );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

twist = ( nbp / 10 + dlk ) * 360.0 / nbp;
\end_layout

\begin_layout Plain Layout

rad = 0.5 * RISE / sin( 180.0 / nbp );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

matdx = newtransform( rad, 0.0, 0.0, 0.0, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m, "A" );
\end_layout

\begin_layout Plain Layout

addstrand( m, "B" );
\end_layout

\begin_layout Plain Layout

ttw = 0.0;
\end_layout

\begin_layout Plain Layout

for( b = 1; b <= nbp; b = b + 1 ){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    getbase( b, sbase, abase );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m1 = wc_helix(
\end_layout

\begin_layout Plain Layout

        sbase, "", "dna", abase, "",
\end_layout

\begin_layout Plain Layout

        "dna", 2.25, -4.96, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        mattw = newtransform( 0.,0.,0.,0.,0.,ttw );
\end_layout

\begin_layout Plain Layout

        transformmol( mattw, m1, NULL );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    transformmol( matdx, m1, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        matry = newtransform(
\end_layout

\begin_layout Plain Layout

            0.,0.,0.,0.,-360.*(b-1)/nbp,0.
 );
\end_layout

\begin_layout Plain Layout

        transformmol( matry, m1, NULL );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mergestr( m, "A", "last", m1, "sense", "first" );
\end_layout

\begin_layout Plain Layout

    mergestr( m, "B", "first", m1, "anti", "last" );
\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        connectres( m, "A", b - 1, "O3'", b, "P" );
\end_layout

\begin_layout Plain Layout

        connectres( m, "B", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ttw = ttw + twist;
\end_layout

\begin_layout Plain Layout

    if( ttw >= 360.0 )
\end_layout

\begin_layout Plain Layout

        ttw = ttw - 360.0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

connectres( m, "A", nbp, "O3'", 1, "P" );
\end_layout

\begin_layout Plain Layout

connectres( m, "B", nbp, "O3'", 1, "P" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

putpdb( "circ.pdb", m );
\end_layout

\begin_layout Plain Layout

putbnd( "circ.bnd", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code requires two integer arguments which specify the number of base
 pairs and the
\begin_inset Formula $\Delta linkingnumber$
\end_inset

or the amount of supercoiling.
 Lines 11-24 process the arguments making sure that they conform to the
 model's assumptions.
 In lines 11-14, the code checks that there are exactly three arguments
 (the 
\family sans
nab
\family default
 program's name is argument one), and exits with a error message if the
 number of arguments is different.
 Next lines 16-22 set the number of base pairs (
\family sans
nbp
\family default
) and test to make certain it is a nonzero multiple of 10, again exiting
 with an error message if it is not.
 Finally the 
\begin_inset Formula $\Delta linkingnumber$
\end_inset

(
\family sans
dlk
\family default
) is set in line 24.
 The helical twist and circle radius are computed in lines 26 and 27 in
 accordance with the formulas developed above.
 Line 29 creates a transformation matrix, 
\family sans
matdx
\family default
, that is used to move each base from the global origin along the X-axis
 to the point where its center intersects the circle.
\end_layout

\begin_layout Standard
The circular DNA is built in the molecule variable 
\family sans
m
\family default
, which is initialized and given two strands, 
\family sans
"A"
\family default
 and 
\family sans
"B"
\family default
 in lines 30-32.
 The variable 
\family sans
ttw
\family default
 in line 34 holds the total twist applied to each base pair The molecule
 is created in the loop from lines 35-66.
 The base pair number (
\family sans
b
\family default
) is converted to the appropriate strings specifying the two nucleotides
 in this pair.
 This is done by the function 
\family sans
getbase()
\family default
.
 This source of this function must be provided by the user who is creating
 the circles as only he or she will know the actual DNA sequence of the
 circle.
 Once the two bases are specified they are passed to the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
 which returns a single base pair in the XY plane with its center at the
 origin.
 The helical axis of this base pair is on the Z-axis with the 5'-3' direction
 oriented in the positive Z-direction.
\end_layout

\begin_layout Standard
One or three transformations is required to position this base in its correct
 place in the circle.
 It must be rotated about the Z-axis (its helical axis) so that it is one
 additional unit of twist beyond the previous base.
 This twist is done in lines 43-46.
 Since the first base needs 0o twist, this step is skipped for it.
 In line 48, the base pair is moved in the positive direction along the
 X-axis to place the base pair's origin on the circle.
 Finally, the base pair is rotated about the Y-axis in lines 50-54 to bring
 it to its proper position on the circle.
 Again, since this rotation is 0o for base 1, this step is also skipped
 for the first base.
\end_layout

\begin_layout Standard
In lines 56-57, the newly positioned base pair in 
\family sans
m1
\family default
 is added to the growing molecule in 
\family sans
m
\family default
.
 Note that since the two strands of DNA are antiparallel, the 
\family sans
"sense"
\family default
 strand of 
\family sans
m1
\family default
 is added after the last base of the 
\family sans
"A"
\family default
 strand of 
\family sans
m
\family default
 and the 
\family sans
"anti"
\family default
 strand of 
\family sans
m1
\family default
 is added before the first base of the 
\family sans
"B"
\family default
 strand of 
\family sans
m
\family default
.
 For all but the first base, the newly added residues are bonded to the
 residues they follow (or precede).
 This is done by the two calls to 
\family sans
connectres()
\family default
 in lines 59-60.
 Again, due to the antiparallel nature of DNA, the new residue in the 
\family sans
"A"
\family default
 strand is residue 
\family sans
b
\family default
, but is residue 
\family sans
1
\family default
 in the 
\family sans
"B"
\family default
 strand.
 In line 63-65, the total twist (
\family sans
ttw
\family default
) is updated and adjusted to keep in in the range [0,360).
 After all base pairs have been added the loop exits.
\end_layout

\begin_layout Standard
After the loop exit, since this is a 
\shape italic
closed
\shape default
 circular molecule the first and last bases of each strand must be bonded
 and this is done with the two calls to 
\family sans
connectres()
\family default
 in lines 67-68.
 The last step is to save the molecule's coordinates and connectivity in
 lines 71-72.
 The 
\family sans
nab
\family default
 builtin 
\family sans
putpdb()
\family default
 writes the coordinate information in PDB format to the file 
\family sans
"circ.pdb"
\family default
 and the 
\family sans
nab
\family default
 builtin 
\family sans
putbnd()
\family default
 saves the bonding as pairs of integers, one pair/line in the file 
\family sans
"circ.bnd"
\family default
, where each integer in a pair refers to an 
\family sans
ATOM
\family default
 record in the previously written PDB file.
\end_layout

\begin_layout Subsection

\series bold
Nucleosome Model
\end_layout

\begin_layout Standard
While the DNA duplex is locally rather stiff, many DNA molecules are sufficientl
y long that they can be bent into a wide variety of both open and closed
 curves.
 Some examples would be simple closed circles, supercoiled closed circles
 that have relaxed into circles with twists, and the nucleosome core fragment,
 where the duplex itself is wound into a short helix.
\end_layout

\begin_layout Standard
The overall strategy for wrapping DNA around a curve is to create the curve,
 find the points on the curve that contain the base pair origins, place
 the base pairs at these points, oriented so that their helical axes are
 tangent to the curve, and finally rotate the base pairs so that they have
 the correct helical twist.
 In the example below, the simplifying assumption is made that the rise
 is constant at 3.38 
\begin_inset Formula $\textrm{Å}$
\end_inset

.
\end_layout

\begin_layout Standard
The nucleosome core fragment is composed of duplex DNA wound in a left handed
 helix around a central protein core.
 A typical core fragment has about 145 base pairs of duplex DNA forming
 about 1.75 superhelical turns.
 Measurements of the overall dimensions of the core fragment indicate that
 there is very little space between adjacent wraps of the duplex.
 A side view of a schematic of core particle is shown below.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename nuc.model.eps
	width 70text%

\end_inset


\end_layout

\begin_layout Standard
Computing the points at which to place the base pairs on a helix requires
 us to spiral an inelastic wire (representing the helical axis of the bent
 duplex) around a cylinder (representing the protein core).
 The system is described by four numbers of which only three are independent.
 They are the number of base pairs 
\begin_inset Formula $n$
\end_inset

, the number of turns its makes around the protein core 
\begin_inset Formula $t$
\end_inset

, the 
\begin_inset Quotes eld
\end_inset

winding
\begin_inset Quotes erd
\end_inset

 angle 
\begin_inset Formula $\theta$
\end_inset

 (which controls how quickly the the helix advances along the axis of the
 core) and the helix radius 
\begin_inset Formula $r$
\end_inset

.
 Both the the number of base pairs and the number of turns around the core
 can be measured.
 The leaves two choices for the third parameter.
 Since the relationship of the winding angle to the overall particle geometry
 seems more clear than that of the radius, this code lets the user specify
 the number of turns, the number of base pairs and the winding angle, then
 computes the helical radius and the displacement along the helix axis for
 each base pair:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
d=3.38\sin(\theta);\,\,\,\phi=360t/(n-1)\label{eq.dy}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
r=\frac{3.38(n-1)\cos(\theta)}{2\pi t}\label{eq.rad}
\end{equation}

\end_inset

where 
\begin_inset Formula $d$
\end_inset

 and 
\begin_inset Formula $\phi$
\end_inset

are the displacement along and rotation about the protein core axis for
 each base pair.
\end_layout

\begin_layout Standard
These relationships are easily derived.
 Let the nucleosome core particle be oriented so that its helical axis is
 along the global Y-axis and the lower cap of the protein core is in the
 XZ plane.
 Consider the circle that is the projection of the helical axis of the DNA
 duplex onto the XZ plane.
 As the duplex spirals along the core particle it will go around the circle
 
\begin_inset Formula $t$
\end_inset

 times, for a total rotation of 360
\begin_inset Formula $t$
\end_inset

o.
 The duplex contains 
\begin_inset Formula $(n-1)$
\end_inset

 steps, resulting in 
\begin_inset Formula $360t/(n-1)$
\end_inset

o of rotation between successive base pairs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 10.
  Create simple nucleosome model.
\end_layout

\begin_layout Plain Layout

#define PI  3.141593
\end_layout

\begin_layout Plain Layout

#define RISE    3.38
\end_layout

\begin_layout Plain Layout

#define TWIST   36.0
\end_layout

\begin_layout Plain Layout

int         b, nbp; int getbase();
\end_layout

\begin_layout Plain Layout

float       nt, theta, phi, rad, dy, ttw, len, plen, side;
\end_layout

\begin_layout Plain Layout

molecule    m, m1;
\end_layout

\begin_layout Plain Layout

matrix      matdx, matrx, maty, matry, mattw;
\end_layout

\begin_layout Plain Layout

string      sbase, abase;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

nt = atof( argv[ 2 ] );    // number of turns
\end_layout

\begin_layout Plain Layout

nbp = atoi( argv[ 3 ] );   // number of base pairs
\end_layout

\begin_layout Plain Layout

theta = atof( argv[ 4 ] ); // winding angle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dy = RISE * sin( theta );
\end_layout

\begin_layout Plain Layout

phi = 360.0 * nt / ( nbp-1 );
\end_layout

\begin_layout Plain Layout

rad = (( nbp-1 )*RISE*cos( theta ))/( 2*PI*nt );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

matdx = newtransform( rad, 0.0, 0.0, 0.0, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

matrx = newtransform( 0.0, 0.0, 0.0, -theta, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m, "A" ); addstrand( m, "B" ); 
\end_layout

\begin_layout Plain Layout

ttw = 0.0;
\end_layout

\begin_layout Plain Layout

for( b = 1; b <= nbp; b = b + 1 ){
\end_layout

\begin_layout Plain Layout

    getbase( b, sbase, abase );
\end_layout

\begin_layout Plain Layout

    m1 = wc_helix( sbase, "", "dna", abase, "", "dna",
\end_layout

\begin_layout Plain Layout

        2.25, -4.96, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

    mattw = newtransform( 0., 0., 0., 0., 0., ttw );
\end_layout

\begin_layout Plain Layout

    transformmol( mattw, m1, NULL );
\end_layout

\begin_layout Plain Layout

    transformmol( matrx, m1, NULL );
\end_layout

\begin_layout Plain Layout

    transformmol( matdx, m1, NULL );
\end_layout

\begin_layout Plain Layout

    maty = newtransform( 0.,dy*(b-1),0., 0.,-phi*(b-1),0.);
\end_layout

\begin_layout Plain Layout

    transformmol( maty, m1, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mergestr( m, "A", "last", m1, "sense", "first" );
\end_layout

\begin_layout Plain Layout

    mergestr( m, "B", "first", m1, "anti", "last" );
\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        connectres( m, "A", b - 1, "O3'", b, "P" );
\end_layout

\begin_layout Plain Layout

        connectres( m, "B", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    ttw += TWIST; if( ttw >= 360.0 ) ttw -= 360.0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

putpdb( "nuc.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finding the radius of the superhelix is a little tricky.
 In general a single turn of the helix will not contain an integral number
 of base pairs.
 For example, using typical numbers of 1.75 turns and 145 base pairs requires
 82.9 base pairs to make one turn.
 An approximate solution can be found by considering the ideal superhelix
 that the DNA duplex is wrapped around.
 Let 
\begin_inset Formula $L$
\end_inset

 be the arc length of this helix.
 Then 
\begin_inset Formula $L\cos(\theta)$
\end_inset

 is the arc length of its projection into the XZ plane.
 Since this projection is an overwound circle, 
\begin_inset Formula $L$
\end_inset

 is also equal to 
\begin_inset Formula $2\pi rt$
\end_inset

, where 
\begin_inset Formula $t$
\end_inset

 is the number of turns and 
\begin_inset Formula $r$
\end_inset

 is the unknown radius.
 Now 
\begin_inset Formula $L$
\end_inset

 is not known but is approximately 
\begin_inset Formula $3.38(n-1)$
\end_inset

.
 Substituting and solving for 
\begin_inset Formula $r$
\end_inset

gives Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq.rad"

\end_inset

.
\end_layout

\begin_layout Standard
The resulting 
\family sans
nab
\family default
 code is shown in Program 2.
 This code requires three arguments—the number of turns, the number of base
 pairs and the winding angle.
 In lines 15-17, the helical rise (
\family sans
dy
\family default
), twist (
\family sans
phi
\family default
) and radius (
\family sans
rad
\family default
) are computed according to the formulas developed above.
\end_layout

\begin_layout Standard
Two constant transformation matrices, 
\family sans
matdx
\family default
 and 
\family sans
matrx
\family default
 are created in lines 19-20.
 
\family sans
matdx
\family default
 is used to move the newly created base pair along the X-axis to the circle
 that is the helix's projection onto the XZ plane.
 
\family sans
matrx
\family default
 is used to rotate the new base pair about the X-axis so it will be tangent
 to the local helix of spirally wound duplex.
 The model of the nucleosome will be built in the molecule 
\family sans
m
\family default
 which is created and given two strands 
\family sans
"A"
\family default
 and 
\family sans
"B"
\family default
 in line 23.
 The variable 
\family sans
ttw
\family default
 will hold the total local helical twist for each base pair.
\end_layout

\begin_layout Standard
The molecule is created in the loop in lines 25-43.
 The user specified function 
\family sans
getbase()
\family default
 takes the number of the current base pair (
\family sans
b
\family default
) and returns two strings that specify the actual nucleotides to use at
 this position.
 These two strings are converted into a single base pair using the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
.
 The new base pair is in the XY plane with its origin at the global origin
 and its helical axis along Z oriented so that the 5'-3' direction is positive.
\end_layout

\begin_layout Standard
Each base pair must be rotated about its Z-axis so that when it is added
 to the global helix it has the correct amount of helical twist with respect
 to the previous base.
 This rotation is performed in lines 29-30.
 Once the base pair has the correct helical twist it must rotated about
 the X-axis so that its local origin will be tangent to the global helical
 axes (line 31).
\end_layout

\begin_layout Standard
The properly-oriented base is next moved into place on the global helix
 in two stages in lines 32-34.
 It is first moved along the X-axis (line 32) so it intersects the circle
 in the XZ plane that is projection of the duplex's helical axis.
 Then it is simultaneously rotated about and displaced along the global
 Y-axis to move it to final place in the nucleosome.
 Since both these movements are with respect to the same axis, they can
 be combined into a single transformation.
\end_layout

\begin_layout Standard
The newly positioned base pair in 
\family sans
m1
\family default
 is added to the growing molecule in 
\family sans
m
\family default
 using two calls to the 
\family sans
nab
\family default
 builtin 
\family sans
mergestr()
\family default
.
 Note that since the two strands of a DNA duplex are antiparallel, the base
 of the 
\family sans
"sense"
\family default
 strand of molecule 
\family sans
m1
\family default
 is added 
\emph on
after
\emph default
 the last base of the 
\family sans
"A"
\family default
 strand of molecule 
\family sans
m
\family default
 and the base of the 
\family sans
"anti"
\family default
 strand of molecule 
\family sans
m1
\family default
 is 
\emph on
before
\emph default
 the first base of the 
\family sans
"B"
\family default
 strand of molecule 
\family sans
m
\family default
.
 For all base pairs except the first one, the new base pair must be bonded
 to its predecessor.
 Finally, the total twist (
\family sans
ttw
\family default
) is updated and adjusted to remain in the interval [0,360) in line 42.
 After all base pairs have been created, the loop exits, and the molecule
 is written out.
 The coordinates are saved in PDB format using the 
\family sans
nab
\family default
 builtin 
\family sans
putpdb()
\family default
.
\end_layout

\begin_layout Section

\series bold
Wrapping DNA Around a Path
\end_layout

\begin_layout Standard
This last code develops two 
\family sans
nab
\family default
 programs that are used together to wrap B-DNA around a more general open
 curve specified as a cubic spline through a set of points.
 The first program takes the initial set of points defining the curve and
 interpolates them to produce a new set of points with one point at the
 location of each base pair.
 The new set of points always includes the first point of the original set
 but may or may not include the last point.
 These new points are read by the second program which actually bends the
 DNA.
\end_layout

\begin_layout Standard
The overall strategy used in this example is slightly different from the
 one used in both the circular DNA and nucleosome codes.
 In those codes it was possible to directly compute both the orientation
 and position of each base pair.
 This is not possible in this case.
 Here only the location of the base pair's origin can be computed directly.
 When the base pair is placed at that point its helical axis will be tangent
 to the curve and point in the right direction, but its rotation about this
 axis will be arbitrary.
 It will have to be rotated about its new helical axis to give the proper
 amount of helical twist to stack it properly on the previous base.
 Now if the helical twist of a base pair is determined with respect to the
 previous base pair, either the first base pair is left in an arbitrary
 orientation, or some other way must be devised to define the helical of
 it.
 Since this orientation will depend both on the curve and its ultimate use,
 this code leaves this task to the user with the result that the helical
 orientation of the first base pair is undefined.
\end_layout

\begin_layout Subsection

\series bold
Interpolating the Curve
\end_layout

\begin_layout Standard
This section describes the code that finds the base pair origins along the
 curve.
 This program takes an ordered set of points
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $p$
\end_inset

 1 ,
\begin_inset Formula $p$
\end_inset

 2 ,...,
\begin_inset Formula $pn$
\end_inset


\end_layout

\begin_layout Standard
and interpolates it to produce a new set of points
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
np
\shape default
 1 ,
\shape italic
np
\shape default
 2 ,...,
\shape italic
np
\shape default
 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Standard
such that the distance between each 
\begin_inset Formula $np_{i}$
\end_inset

 and 
\begin_inset Formula $np_{i+1}$
\end_inset

 is constant, in this case equal to 3.38 which is the rise of an ideal B-DNA
 duplex.
 The interpolation begins by setting 
\begin_inset Formula $np_{1}$
\end_inset

 to 
\begin_inset Formula $p_{1}$
\end_inset

 and continues through the 
\begin_inset Formula $p_{i}$
\end_inset

 until a new point 
\begin_inset Formula $np_{m}$
\end_inset

 has been found that is within the constant distance to 
\begin_inset Formula $p_{n}$
\end_inset

 without having gone beyond it.
\end_layout

\begin_layout Standard
The interpolation is done via 
\family sans
spline()
\family default
 [45] and 
\family sans
splint()
\family default
, two routines that perform a cubic spline interpolation on a tabulated
 function
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y_{i}=f(x_{i})
\]

\end_inset

In order for 
\family sans
spline()
\family default
/
\family sans
splint()
\family default
 to work on this problem, two things must be done.
 These functions work on a table of 
\begin_inset Formula $(x_{i},y_{i})$
\end_inset

 pairs, of which we have only the 
\begin_inset Formula $y_{i}$
\end_inset

.
 However, since the only requirement imposed on the 
\begin_inset Formula $x_{i}$
\end_inset

is that they be monotonically increasing we can simply use the sequence
 1 , 2 , ...
 , n for the 
\begin_inset Formula $x_{i}$
\end_inset

, producing the producing the table 
\begin_inset Formula $(i,y_{i})$
\end_inset

.
 The second difficulty is that 
\family sans
spline()
\family default
/
\family sans
splint()
\family default
 interpolate along a one dimensional curve but we need an interpolation
 along a three dimensional curve.
 This is solved by creating three different splines, one for each of the
 three dimensions.
\end_layout

\begin_layout Standard

\family sans
spline()
\family default
/
\family sans
splint()
\family default
 perform the interpolation in two steps.
 The function 
\family sans
spline()
\family default
 is called first with the original table and computes the value of the second
 derivative at each point.
 In order to do this, the values of the second derivative at two points
 must be specified.
 In this code these points are the first and last points of the table, and
 the values chosen are 0 (signified by the unlikely value of 
\family sans
1e30
\family default
 in the calls to 
\family sans
spline()
\family default
).
 After the second derivatives have been computed, the interpolated values
 are computed using one or more calls to 
\family sans
splint()
\family default
.
\end_layout

\begin_layout Standard
What is unusual about this interpolation is that the points at which the
 interpolation is to be performed are unknown.
 Instead, these points are chosen so that the distance between each point
 and its successor is the constant value 
\family sans
RISE
\family default
, set here to 3.38 which is the rise of an ideal B-DNA duplex.
 Thus, we have to search for the points and most of the code is devoted
 to doing this search.
 The details follow the listing.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 11 - Build DNA along a curve
\end_layout

\begin_layout Plain Layout

#define RISE    3.38
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define EPS 1e-3
\end_layout

\begin_layout Plain Layout

#define APPROX(a,b) (fabs((a)-(b))<=EPS)
\end_layout

\begin_layout Plain Layout

#define MAXI    20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define MAXPTS  150
\end_layout

\begin_layout Plain Layout

int npts;
\end_layout

\begin_layout Plain Layout

float   a[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

float   x[ MAXPTS ], y[ MAXPTS ], z[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

float   x2[ MAXPTS ], y2[ MAXPTS ], z2[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

float   tmp[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

string  line;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int i, li, ni;
\end_layout

\begin_layout Plain Layout

float   dx, dy, dz;
\end_layout

\begin_layout Plain Layout

float   la, lx, ly, lz, na, nx, ny, nz;
\end_layout

\begin_layout Plain Layout

float   d, tfrac, frac;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int spline();
\end_layout

\begin_layout Plain Layout

int splint();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( npts = 0; line = getline( stdin ); ){
\end_layout

\begin_layout Plain Layout

    npts = npts + 1;
\end_layout

\begin_layout Plain Layout

    a[ npts ] = npts;
\end_layout

\begin_layout Plain Layout

    sscanf( line, "%lf %lf %lf",
\end_layout

\begin_layout Plain Layout

        x[ npts ], y[ npts ], z[ npts ] );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

spline( a, x, npts, 1e30, 1e30, x2, tmp );
\end_layout

\begin_layout Plain Layout

spline( a, y, npts, 1e30, 1e30, y2, tmp );
\end_layout

\begin_layout Plain Layout

spline( a, z, npts, 1e30, 1e30, z2, tmp );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

li = 1; la = 1.0; lx = x[1]; ly = y[1]; lz = z[1];
\end_layout

\begin_layout Plain Layout

printf( "%8.3f %8.3f %8.3f
\backslash

\backslash
n", lx, ly, lz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

while( li < npts ){
\end_layout

\begin_layout Plain Layout

    ni = li + 1;
\end_layout

\begin_layout Plain Layout

    na = a[ ni ];
\end_layout

\begin_layout Plain Layout

    nx = x[ ni ]; ny = y[ ni ]; nz = z[ ni ];
\end_layout

\begin_layout Plain Layout

    dx = nx - lx; dy = ny - ly; dz = nz - lz;
\end_layout

\begin_layout Plain Layout

    d = sqrt( dx*dx + dy*dy + dz*dz );
\end_layout

\begin_layout Plain Layout

    if( d > RISE ){
\end_layout

\begin_layout Plain Layout

        tfrac = frac = .5;
\end_layout

\begin_layout Plain Layout

        for( i = 1; i <= MAXI; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

            na = la + tfrac * ( a[ni] - la );
\end_layout

\begin_layout Plain Layout

            splint( a, x, x2, npts, na, nx );
\end_layout

\begin_layout Plain Layout

            splint( a, y, y2, npts, na, ny );
\end_layout

\begin_layout Plain Layout

            splint( a, z, z2, npts, na, nz );
\end_layout

\begin_layout Plain Layout

            dx = nx - lx; dy = ny - ly; dz = nz - lz;
\end_layout

\begin_layout Plain Layout

            d = sqrt( dx*dx + dy*dy + dz*dz );
\end_layout

\begin_layout Plain Layout

            frac = 0.5 * frac;
\end_layout

\begin_layout Plain Layout

            if( APPROX( d, RISE ) )
\end_layout

\begin_layout Plain Layout

                break;
\end_layout

\begin_layout Plain Layout

            else if( d > RISE )
\end_layout

\begin_layout Plain Layout

                tfrac = tfrac - frac;
\end_layout

\begin_layout Plain Layout

            else if( d < RISE )
\end_layout

\begin_layout Plain Layout

                tfrac = tfrac + frac;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        printf( "%8.3f %8.3f %8.3f
\backslash
n", nx, ny, nz );
\end_layout

\begin_layout Plain Layout

    }else if( d < RISE ){
\end_layout

\begin_layout Plain Layout

        li = ni;
\end_layout

\begin_layout Plain Layout

        continue;
\end_layout

\begin_layout Plain Layout

    }else if( d == RISE ){
\end_layout

\begin_layout Plain Layout

        printf( "%8.3f %8.3f %8.3f
\backslash
n", nx, ny, nz );
\end_layout

\begin_layout Plain Layout

        li = ni;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    la = na;
\end_layout

\begin_layout Plain Layout

    lx = nx; ly = ny; lz = nz;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Execution begins in line 25 where the points are read from 
\family sans
stdin
\family default
 one point or three numbers/line and stored in the three arrays 
\family sans
x
\family default
, 
\family sans
y
\family default
 and 
\family sans
z
\family default
.
 The independent variable for each spline, stored in the array 
\family sans
a
\family default
 is created at this time holding the numbers 
\family sans
1
\family default
 to 
\family sans
npts
\family default
.
 The second derivatives for the three splines, one each for interpolation
 along the X, Y and Z directions are computed in lines 32-34.
 Each call to 
\family sans
spline()
\family default
 has two arguments set to 
\family sans
1e30
\family default
 which indicates that the second derivative values should be 0 at the first
 and last points of the table.
 The first point of the interpolated set is set to the first point of the
 original set and written to 
\family sans
stdout
\family default
 in lines 36-37.
\end_layout

\begin_layout Standard
The search that finds the new points is lines 39-72.
 To see how it works consider the figure below.
 The dots marked 
\begin_inset Formula $p_{1},p_{2},\ldots,p_{n}$
\end_inset

 correspond to the original points that define the spline.
 The circles marked 
\begin_inset Formula $np_{1},np_{2},np_{3}$
\end_inset

 represent the new points at which base pairs will be placed.
 The curve is a function of the parameter 
\begin_inset Formula $a$
\end_inset

, which as it ranges from 1 to 
\shape italic
npts
\shape default
 sweeps out the curve from 
\begin_inset Formula $(x_{1},y_{1},z_{1})$
\end_inset

 to 
\begin_inset Formula $(x_{npts},y_{npts},z_{npts})$
\end_inset

.
 Since the original points will in general not be the correct distance apart
 we have to find new points by interpolating between the original points.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename curve.eps
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
The search works by first finding a point of the original table that is
 at least 
\family sans
RISE
\family default
 distance from the last point found.
 If the last point of the original table is not far enough from the last
 point found, the search loop exits and the program ends.
 However, if the search does find a point in the original table that is
 at least 
\family sans
RISE
\family default
 distance from the last point found, it starts an interpolation loop in
 lines 47-61 to zero on the best value of 
\begin_inset Formula $a$
\end_inset

 that will produce a new point that is the correct distance from the previous
 point.
 After this point is found, the new point becomes the last point and the
 loop is repeated until the original table is exhausted.
\end_layout

\begin_layout Standard
The main search loop uses 
\family sans
li
\family default
 to hold the index of the point in the original table that is closest to,
 but does not pass, the last point found.
 The loop begins its search for the next point by assuming it will be before
 the next point in the original table (lines 40-42).
 It computes the distance between this point (
\family sans
nx
\family default
,
\family sans
ny
\family default
,
\family sans
nz
\family default
) and the last point (
\family sans
lx
\family default
,
\family sans
ly
\family default
,
\family sans
lz
\family default
) in lines 43-44 and then takes one of three actions depending it the distance
 is greater than 
\family sans
RISE
\family default
 (lines 46-62), less than 
\family sans
RISE
\family default
 (lines 64-65) or equal to 
\family sans
RISE
\family default
 (lines 67-68).
\end_layout

\begin_layout Standard
If this distance is greater than 
\family sans
RISE
\family default
, then the desired point is between the last point found which is the point
 generated by 
\family sans
la
\family default
 and the point corresponding to 
\family sans
a[ni]
\family default
.
 Lines 46-61 perform a bisection of the interval (
\family sans
la
\family default
,
\family sans
a[ni]
\family default
], a process that splits this interval in half, determines which half contains
 the desired point, then splits that half and continues in this fashion
 until the either the distance between the last and new points is close
 enough as determined by the macro 
\family sans
APPROX()
\family default
 or 
\family sans
MAXI
\family default
 subdivisions have been at made, in which case the new point is taken to
 be the point computed after the last subdivision.
 After the bisection the new point is written to 
\family sans
stdout
\family default
 (line 62) and execution skips to line 70-71 where the new values 
\family sans
na
\family default
 and (
\family sans
nx
\family default
,
\family sans
ny
\family default
,
\family sans
nz
\family default
) become the last values 
\family sans
la
\family default
 and (
\family sans
lx
\family default
,
\family sans
ly
\family default
,
\family sans
lz
\family default
) and then back to the top of the loop to continue the interpolation.
 The macro 
\family sans
APPROX()
\family default
 defined in line 4, tests to see if the absolute value of the difference
 between the current distance and 
\family sans
RISE
\family default
 is less than 
\family sans
EPS
\family default
, defined in line 3 as 
\begin_inset Formula $10^{-3}$
\end_inset

.
 This more complicated test is used instead of simply testing for equality
 because floating point arithmetic is inexact, which means that while it
 will get close to the target distance, it may never actually reach it.
\end_layout

\begin_layout Standard
If the distance between the last and candidate points is less than 
\family sans
RISE
\family default
, the desired point lies beyond the point at 
\family sans
a[ni]
\family default
.
 In this case the action is lines 64-65 is performed which advances the
 candidate point to 
\family sans
li+2
\family default
 then goes back to the top of the loop (line 38) and tests to see that this
 index is still in the table and if so, repeats the entire process using
 the point corresponding to 
\family sans
a[li+2]
\family default
.
 If the points are close together, this step may be taken more than once
 to look for the next candidate at 
\family sans
a[li+2]
\family default
, 
\family sans
a[li+3]
\family default
, etc.
 Eventually, it will find a point that is 
\family sans
RISE
\family default
 beyond the last point at which case it interpolates or it runs out points,
 indicating that the next point lies beyond the last point in the table.
 If this happens, the last point found, becomes the last point of the new
 set and the process ends.
\end_layout

\begin_layout Standard
The last case is if the distance between the last point found and the point
 at 
\family sans
a[ni]
\family default
 is exactly equal to 
\family sans
RISE
\family default
.
 If it is, the point at 
\family sans
a[ni]
\family default
 becomes the new point and 
\family sans
li
\family default
 is updated to 
\family sans
ni
\family default
.
 (lines 67-68).
 Then lines 70-71 are executed to update 
\family sans
la
\family default
 and (
\family sans
lx
\family default
,
\family sans
ly
\family default
,
\family sans
lz
\family default
) and then back to the top of the loop to continue the process.
\end_layout

\begin_layout Subsection

\series bold
Driver Code
\end_layout

\begin_layout Standard
This section describes the main routine or driver of the second program
 which is the actual DNA bender.
 This routine reads in the points, then calls 
\family sans
putdna()
\family default
 (described in the next section) to place base pairs at each point.
 The points are either read from 
\family sans
stdin
\family default
 or from the file whose name is the second command line argument.
 The source of the points is determined in lines 8-18, being 
\family sans
stdin
\family default
 if the command line contained a single arguments or in the second argument
 if it was present.
 If the argument count was greater than two, the program prints an error
 message and exits.
 The points are read in the loop in lines 20-26.
 Any line with a 
\family sans
#
\family default
 in column 1 is a comment and is ignored.
 All other lines are assumed to contain three numbers which are extracted
 from the string, 
\family sans
line
\family default
 and stored in the point array 
\family sans
pts
\family default
 by the 
\family sans
nab
\family default
 builtin 
\family sans
sscanf()
\family default
 (lines 23-24).
 The number of points is kept in 
\family sans
npts
\family default
.
 Once all points have been read, the loop exits and the point file is closed
 if it is not 
\family sans
stdin
\family default
.
 Finally, the points are passed to the function 
\family sans
putdna()
\family default
 which will place a base pair at each point and save the coordinates and
 connectivity of the resulting molecule in the pair of files 
\family sans
dna.path.pdb
\family default
 and 
\family sans
dna.path.bnd
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 12 - DNA bender main program
\end_layout

\begin_layout Plain Layout

string      line;
\end_layout

\begin_layout Plain Layout

file        pf; 
\end_layout

\begin_layout Plain Layout

int     npts;
\end_layout

\begin_layout Plain Layout

point       pts[ 5000 ];
\end_layout

\begin_layout Plain Layout

int     putdna();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( argc == 1 ) 
\end_layout

\begin_layout Plain Layout

    pf = stdin;
\end_layout

\begin_layout Plain Layout

else if( argc > 2 ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr, "usage: %s [ path-file ]
\backslash

\backslash
n", 
\end_layout

\begin_layout Plain Layout

        argv[ 1 ], argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}else if( !( pf = fopen( argv[ 2 ], "r" ) ) ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr, "%s: can't open %s
\backslash

\backslash
n", 
\end_layout

\begin_layout Plain Layout

        argv[ 1 ], argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( npts = 0; line = getline( pf ); ){
\end_layout

\begin_layout Plain Layout

    if( substr( line, 1, 1 ) != "#" ){
\end_layout

\begin_layout Plain Layout

        npts = npts + 1;
\end_layout

\begin_layout Plain Layout

        sscanf( line, "%lf %lf %lf",
\end_layout

\begin_layout Plain Layout

            pts[ npts ].x, pts[ npts ].y, pts[ npts ].z );
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( pf != stdin )
\end_layout

\begin_layout Plain Layout

    fclose( pf );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

putdna( "dna.path", pts, npts );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Wrap DNA
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule contains a frame, a movable handle that can be used to position
 the molecule.
 A frame consists of three orthogonal unit vectors and an origin that can
 be placed in an arbitrary position and orientation with respect to its
 associated molecule.
 When the molecule is created its frame is initialized to the unit vectors
 along the global X, Y and Z axes with the origin at (0,0,0).
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides three operations on frames.
 They can be defined by atom expressions or absolute points (
\family sans
setframe()
\family default
 and 
\family sans
setframep()
\family default
), one frame can be aligned or superimposed on another (
\family sans
alignframe()
\family default
) and a frame can be placed at a point on an axis (
\family sans
axis2frame()
\family default
).
 A frame is defined by specifying its origin, two points that define its
 X direction and two points that define its Y direction.
 The Z direction is X
\begin_inset Formula $\times$
\end_inset

Y.
 Since it is convenient to not require the original X and Y be orthogonal,
 both frame creation builtins allow the user to specify which of the original
 X or Y directions is to be the true X or Y direction.
 If X is chosen then Y is recreated from Z
\begin_inset Formula $\times$
\end_inset

X; if Y is chosen then X is recreated from Y
\begin_inset Formula $\times$
\end_inset

Z.
\end_layout

\begin_layout Standard
When the frame of one molecule is aligned on the frame of another, the frame
 of the first molecule is transformed to superimpose it on the frame of
 the second.
 At the same time the coordinates of the first molecule are also transformed
 to maintain their original position and orientation with respect to their
 own frame.
 In this way frames provide a way to precisely position one molecule with
 respect to another.
 The frame of a molecule can also be positioned on an axis defined by two
 points.
 This is done by placing the frame's origin at the first point of the axis
 and aligning the frame's Z-axis to point from the first point of the axis
 to the second.
 After this is done, the orientation of the frame's X and Y vectors about
 this axis is undefined.
\end_layout

\begin_layout Standard
Frames have two other properties that need to be discussed.
 Although the builtin 
\family sans
alignframe()
\family default
 is normally used to position two molecules by superimposing their frames,
 if the second molecule (represented by the second argument to 
\family sans
alignframe()
\family default
) has the special value 
\family sans
NULL
\family default
, the first molecule is positioned so that its frame is superimposed on
 the global X, Y and Z axes with its origin at (0,0,0).
 The second property is that when 
\family sans
nab
\family default
 applies a transformation to a molecule (or just a subset of its atoms),
 only the atomic coordinates are transformed.
 The frame's origin and its orthogonal unit vectors remain untouched.
 While this may at first glance seem odd, it makes possible the following
 three stage process of setting the molecule's frame, aligning that frame
 on the 
\shape italic
global
\shape default
 frame, then transforming the molecule with respect to the global axes and
 origin which provides a convenient way to position and orient a molecule's
 frame at arbitrary points in space.
 With all this in mind, here is the source to 
\family sans
putdna()
\family default
 which bends a B-DNA duplex about an open space curve.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 13 - place base pairs on a curve.
\end_layout

\begin_layout Plain Layout

point       s_ax[ 4 ];
\end_layout

\begin_layout Plain Layout

int     getbase();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int putdna( string mname, point pts[ 1 ], int npts )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    int p;
\end_layout

\begin_layout Plain Layout

    float   tw;
\end_layout

\begin_layout Plain Layout

    residue r;
\end_layout

\begin_layout Plain Layout

    molecule    m, m_path, m_ax, m_bp;
\end_layout

\begin_layout Plain Layout

    point   p1, p2, p3, p4;
\end_layout

\begin_layout Plain Layout

    string  sbase, abase;
\end_layout

\begin_layout Plain Layout

    string  aex;
\end_layout

\begin_layout Plain Layout

    matrix  mat;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m_ax = newmolecule();
\end_layout

\begin_layout Plain Layout

    addstrand( m_ax, "A" );
\end_layout

\begin_layout Plain Layout

    r = getresidue( "AXS", "axes.rlb" );
\end_layout

\begin_layout Plain Layout

    addresidue( m_ax, "A", r );
\end_layout

\begin_layout Plain Layout

    setxyz_from_mol( m_ax, NULL, s_ax );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m_path = newmolecule();
\end_layout

\begin_layout Plain Layout

    addstrand( m_path, "A" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m = newmolecule();
\end_layout

\begin_layout Plain Layout

    addstrand( m, "A" );
\end_layout

\begin_layout Plain Layout

    addstrand( m, "B" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for( p = 1; p < npts; p = p + 1 ){
\end_layout

\begin_layout Plain Layout

        setmol_from_xyz( m_ax, NULL, s_ax );
\end_layout

\begin_layout Plain Layout

        setframe( 1, m_ax,
\end_layout

\begin_layout Plain Layout

            "::ORG", "::ORG", "::SXT", "::ORG", "::CYT" );
\end_layout

\begin_layout Plain Layout

        axis2frame( m_path, pts[ p ], pts[ p + 1 ] );
\end_layout

\begin_layout Plain Layout

        alignframe( m_ax, m_path );
\end_layout

\begin_layout Plain Layout

        mergestr( m_path, "A", "last", m_ax, "A", "first" );
\end_layout

\begin_layout Plain Layout

        if( p > 1 ){
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:CYT",p-1 ), p1 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:ORG",p-1 ), p2 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:ORG",p ), p3 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:CYT",p ), p4 );
\end_layout

\begin_layout Plain Layout

            tw = 36.0 - torsionp( p1, p2, p3, p4 );
\end_layout

\begin_layout Plain Layout

            mat = rot4p( p2, p3, tw );
\end_layout

\begin_layout Plain Layout

            aex = sprintf( ":%d:", p );
\end_layout

\begin_layout Plain Layout

            transformmol( mat, m_path, aex );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:ORG",p ), p1 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:SXT",p ), p2 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:CYT",p ), p3 );
\end_layout

\begin_layout Plain Layout

            setframep( 1, m_path, p1, p1, p2, p1, p3 );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        getbase( p, sbase, abase );
\end_layout

\begin_layout Plain Layout

        m_bp = wc_helix( sbase, "", "dna",
\end_layout

\begin_layout Plain Layout

            abase, "", "dna",
\end_layout

\begin_layout Plain Layout

            2.25, -5.0, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

        alignframe( m_bp, m_path );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "A", "last", m_bp, "sense", "first" );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "B", "first", m_bp, "anti", "last" );
\end_layout

\begin_layout Plain Layout

        if( p >  1 ){
\end_layout

\begin_layout Plain Layout

            connectres( m, "A", p - 1, "O3'", p, "P" );
\end_layout

\begin_layout Plain Layout

            connectres( m, "B", 1, "P", 1, "O3'" );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    putpdb( mname + ".pdb", m );
\end_layout

\begin_layout Plain Layout

    putbnd( mname + ".bnd", m );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
putdna()
\family default
 takes three arguments—
\family sans
name
\family default
, a string that will be used to name the PDB and bond files that hold the
 bent duplex, 
\family sans
pts
\family default
 an array of points containing the origin of each base pair and 
\family sans
npts
\family default
 the number of points in the array.
 
\family sans
putdna()
\family default
 uses four molecules.
 
\family sans
m_ax
\family default
 holds a small artificial molecule containing four atoms that is a proxy
 for the some of the frame's used placing the base pairs.
 The molecule 
\family sans
m_path
\family default
 will eventually hold one copy of 
\family sans
m_ax
\family default
 for each point in the input array.
 The molecule 
\family sans
m_bp
\family default
 holds each base pair after it is created by 
\family sans
wc_helix()
\family default
 and 
\family sans
m
\family default
 will eventually hold the bent dna.
 Once again the function 
\family sans
getbase()
\family default
 (to be defined by the user) provides the mapping between the current point
 (
\family sans
p
\family default
) and the nucleotides required in the base pair at that point.
\end_layout

\begin_layout Standard
Execution of 
\family sans
putdna()
\family default
 begins in line 16 with the creation of 
\family sans
m_ax
\family default
.
 This molecule is given one strand 
\family sans
"A"
\family default
, into which is added one copy of the special residue 
\family sans
AXS
\family default
 from the standard 
\family sans
nab
\family default
 residue library 
\family sans
"axes.rlb"
\family default
 (lines 17-19).
 This residue contains four atoms named 
\family sans
ORG
\family default
, 
\family sans
SXT
\family default
, 
\family sans
CYT
\family default
 and 
\family sans
NZT
\family default
.
 These atoms are placed so that 
\family sans
ORG
\family default
 is at (0,0,0) and 
\family sans
SXT
\family default
, 
\family sans
CYT
\family default
 and 
\family sans
NZT
\family default
 are 1o along the X, Y and Z axes respectively.
 Thus the residue 
\family sans
AXS
\family default
 has the exact geometry as the molecules initial frame—three unit vectors
 along the standard axes centered on the origin.
 The initial coordinates of 
\family sans
m_ax
\family default
 are saved in the 
\family sans
point
\family default
 array 
\family sans
s_ax
\family default
.
 The molecules 
\family sans
m_path
\family default
 and 
\family sans
m
\family default
 are created in lines 22-23 and 25-27 respectively.
\end_layout

\begin_layout Standard
The actual DNA bending occurs in the loop in lines 29-62.
 Each base pair is added in a two stage process that uses 
\family sans
m_ax
\family default
 to properly orient the frame of 
\family sans
m_path
\family default
, so that when the frame of new the base pair in 
\family sans
m_bp
\family default
 is aligned on the frame of 
\family sans
m_path
\family default
, the new base pair will be correctly positioned on the curve.
\end_layout

\begin_layout Standard
Setting up the frame is done is lines 30-49.
 The process begins by restoring the original coordinates of 
\family sans
m_ax
\family default
 (line 30), so that the the atom 
\family sans
ORG
\family default
 is at (0,0,0) and 
\family sans
SXT
\family default
, 
\family sans
CYT
\family default
 and 
\family sans
NZT
\family default
 are each 1o along the global X, Y and Z axes.
 These atoms are then used to redefine the frame of 
\family sans
m_ax
\family default
 (line 32-33) so that it is equal to the three standard unit vectors at
 the global origin.
 Next the frame of 
\family sans
m_path
\family default
 is aligned so that its origin is at 
\family sans
pts[p]
\family default
 and its Z-axis points from 
\family sans
pts[p]
\family default
 to 
\family sans
pts[p+1]
\family default
 (line 34).
 The call to 
\family sans
alignframe()
\family default
 in line 34 transforms 
\family sans
m_ax
\family default
 to align its frame on the frame of 
\family sans
m_path
\family default
, which has the effect of moving 
\family sans
m_ax
\family default
 so that the atom 
\family sans
ORG
\family default
 is at 
\family sans
pts[p]
\family default
 and the 
\family sans
ORG
\family default
—
\family sans
NZT
\family default
 vector points towards 
\family sans
pts[p+1]
\family default
.
 A copy of the newly positioned 
\family sans
m_ax
\family default
 is merged into 
\family sans
m_path
\family default
 in line 35.
 The result of this process is that each time around the loop, 
\family sans
m_path
\family default
 gets a new residue that resembles a coordinate frame located at the point
 the new base pair is to be added.
\end_layout

\begin_layout Standard
When 
\family sans
nab
\family default
 sets a frame from an axis, the orientation of its X and Y vectors is arbitrary.
 While this does not matter for the first base pair for which any orientation
 is acceptable, it does matter for the second and subsequent base pairs
 which must be rotated about their Z axis so that they have the proper helical
 twist with respect to the previous base pair.
 This rotation is done by the code in lines 37-48.
 It does this by considering the torsion angle formed by the fours atoms—
\family sans
CYT
\family default
 and 
\family sans
ORG
\family default
 of the previous 
\family sans
AXS
\family default
 residue and 
\family sans
ORG
\family default
 and 
\family sans
CYT
\family default
 of the current 
\family sans
AXS
\family default
 residue.
 The coordinates of these points are determined in lines 37-40.
 Since this torsion angle is a marker for the helical twist between pairs
 of the bent duplex, it must be 36.0o.
 The amount of rotation required to give it the correct twist is computed
 in line 41.
 A transformation matrix that will rotate the new 
\family sans
AXS
\family default
 residue about the 
\family sans
ORG
\family default
—
\family sans
ORG
\family default
 axis by this amount is created in line 42, the atom expression that names
 the 
\family sans
AXS
\family default
 residue is created in line 43 and the residue rotated in line 44.
 Once the new residue is given the correct twist the frame 
\family sans
m_path
\family default
 is moved to the new residue in lines 45-48.
\end_layout

\begin_layout Standard
The base pair is added in lines 51-60.
 The user defined function 
\family sans
getbase()
\family default
 converts the point number (
\family sans
p
\family default
) into the names of the nucleotides needed for this base pair which is created
 by the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
.
 It is then placed on the curve in the correct orientation by aligning its
 frame on the frame of 
\family sans
m_path
\family default
 that we have just created (line 55).
 The new pair is merged into 
\family sans
m
\family default
 and bonded with the previous base pair if it exists.
 After the loop exits, the bend DNA duplex coordinates are saved as a PDB
 file and the connectivity as a bnd file in the calls to 
\family sans
putpdb()
\family default
 and 
\family sans
putbnd()
\family default
 in lines 64-65, whereupon 
\family sans
putdna()
\family default
 returns to the caller.
\end_layout

\begin_layout Section
Other examples
\end_layout

\begin_layout Standard
There are several additional pedagogical (and useful!) examples in 
\shape italic
$AMBERHOME/examples
\shape default
.
 These can be consulted to gain ideas of how some useful molecular manipulation
 programs can be constructed.
\end_layout

\begin_layout Itemize
The 
\shape italic
peptides
\shape default
 example was created by Paul Beroza to construct peptides with given backbone
 torsion angles.
 The idea is to call 
\family sans
linkprot
\family default
 to create a peptide in an extended conformation, then to set frames and
 do rotations to construct the proper torsions.
 This can be used as just a stand-alone program to perform this task, or
 as a source for ideas for constructing similar functionality in other 
\family sans
nab
\family default
 programs.
\end_layout

\begin_layout Itemize
The 
\shape italic
suppose
\shape default
 example was created by Jarrod Smith to provide a driver to carry out rms-superp
ositions.
 It has a man page that shows how to use it.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "nabc"
options "jacs"

\end_inset


\end_layout

\end_body
\end_document
