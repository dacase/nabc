#define MAXRINGS 1000
#define MAXRINGPOS 10000

int		planep();
float	ax_susc();

string		ringname[ MAXRINGS ], ringaname[ MAXRINGPOS ];
int		ringnum[ MAXRINGS ];
int		ringsize[ MAXRINGS ];
float		ringstr[ MAXRINGS ];
point		ringcen[ MAXRINGS ];
point		ringpos[ MAXRINGPOS ];
float		chi_anis[ MAXRINGS ], chi_iso[ MAXRINGS ];
int		nrings, ring, atring; // indices to get ring info
string		atskip[ 26 ];
point		r1, r2, rn[ MAXRINGS ];
float		s12, r1sq, d1, r2sq, d2;
int		nskip, skip, kp1;
float		shhm, shhm_r;  // partial and total shifts

int		get_ring_info( molecule m, string ringskip[ hashed ], 
             int rinfo, int version2, int verbose, file outf )
{

//============================================================================
//
//   set up arrays to hold ring information:
//
//      ringname[ ring ]    gives the residue name of each aromatic ring
//      ringnum [ ring ]    gives the residue number of each aromatic ring
//      ringstr [ ring ]    gives the intensity
//      ringsize[ ring ]    gives the number of atoms in the ring
//      ringcen [ ring ]    gives the position of the center of each ring
//      ringpos [ atring ]  gives the position of each atom
//      ringaname[ atring ] gives a name for each atom in all rings
//
//      index "ring" goes from 1 to the number of rings
//      index "atring" goes from 1 to the total number of atoms in all rings
//
//============================================================================

string		ringinfo[ hashed ];       // database of ring information
string		ringatoms[ 26 ];          // temporary strorage for ring info
int			i, j, found_ring_atom;
atom		a;
residue		r;
point		rc[ MAXRINGS ];
float		b;
float		size;
file		frinfo;
string		oline, rname;

#include "ringinfo.h"

ring = atring = 0;
for( r in m ) {

	if( r.resname in ringinfo ){
		if( ring > 0 ) atring = atring + ringsize[ ring ];
		assert( atring < MAXRINGPOS );
		ring++;
		assert( ring < MAXRINGS );
		ringname[ ring ] = r.resname;

#		include "get_ring_info.h"

	}

	if( r.resname + "6" in ringinfo ){   // some residues have a second ring
		if( ring > 0 ) atring = atring + ringsize[ ring ];
		assert( atring < MAXRINGPOS );
		ring++;
		assert ( ring < MAXRINGS );
		ringname[ ring ] = r.resname+"6";

#		include "get_ring_info.h"

	}

	if( r.resname == "HEM" ) {
		for( j=1; j<=4; j++ ){
			if( ring > 0 ) atring = atring + ringsize[ ring ];
			assert( atring < MAXRINGPOS );
			ring++;
			assert ( ring < MAXRINGS );
			ringname[ ring ] = "POR" + sprintf( "%d", j );

#			include "get_ring_info.h"

		}
		if( ring > 0 ) atring = atring + ringsize[ ring ];
		assert( atring < MAXRINGPOS );
		ring = ring + 1;
		assert ( ring < MAXRINGS );
		ringname[ ring ] = "PORM";

#		include "get_ring_info.h"

	}

	if( r.resname == "FOL" ) {
		for( j=1; j<=3; j++ ){
			if( ring > 0 ) atring = atring + ringsize[ ring ];
			assert( atring < MAXRINGPOS );
			ring++;
			assert ( ring < MAXRINGS );
			ringname[ ring ] = "FOL" + sprintf( "%d", j );

#			include "get_ring_info.h"

		}
	}
}

nrings = ring;
if( verbose ) fprintf( outf, "found %d rings\n", nrings );

//                      get ring normals:
atring = 0;
if( verbose && nrings>0 ) fprintf( outf,
    "        ring        int.           center             anis.    iso.\n");

for( ring=1; ring<=nrings; ring++ ){

	if( ringname[ring] == "PORM" ){
		planep( ringpos[atring+4], ringpos[atring+8], ringpos[atring+12],
			rn[ ring ], rc[ ring ], b );
	} else {
		planep( ringpos[atring+1], ringpos[atring+3], ringpos[atring+5],
			rn[ ring ], rc[ ring ], b );
	}

	rn[ ring ] = -1.*rn[ ring ];
	if( verbose ) fprintf( outf, "      %4s %2d  %8.3f  %8.3f%8.3f%8.3f %8.3f %8.3f\n", 
		ringname[ring], ringnum[ring], ringstr[ring], rc[ring].x,
		rc[ring].y, rc[ring].z, chi_anis[ring], chi_iso[ring] );
	atring = atring + ringsize[ ring ];

}

return( nrings );
};

float	haigh_mallion( atom a, float sigma[ 3,3 ], int do_CSA, int use_rmd,
    string ringskip[ hashed ], int verbose, file outf, float ringc[ hashed ] )
{
//
//============================================================================
//
//  get Haigh-Mallion ring-current contribution:

	int		i,j,k;
	point	p;
	float	sigma_r[ 3,3 ];

    shhm = 0.;  atring = 0;
	for( i=1; i<=3; i++ ){
		for( j=1; j<=3; j++ ){
			sigma[ i,j ] = 0.0;
		}
	}
    // RNA-specific for now:
    ringc["G6"] = 0.0;
    ringc["G"] = 0.0;
    ringc["A6"] = 0.0;
    ringc["A"] = 0.0;
    ringc["C"] = 0.0;
    ringc["U"] = 0.0;

    for( ring=1; ring<=nrings; ring++ ){

    //  skip contributions to protons belonging to this ring:
    //	  for porphyrin, skip contribs to protons in inner porph ring from
    //	  each of the 4 contributing 5-membered rings and the macrocycle.

        if( a.tresnum == ringnum[ ring ] ){
            nskip = split( ringskip[ringname[ring]], atskip, " " );
            skip = 0;
            for( i=1; i<=nskip; i++ ){
                if( a.atomname == atskip[i] ) skip = 1;
			}
            if( skip ) { atring = atring + ringsize[ring]; continue; }
        }

		if( do_CSA ){

		//
		//  get ring contribution using magnetic dipole approximation:
		//
			p = a.pos;
			shhm += ax_susc( p, ringcen[ ring ], rn[ ring ], chi_iso[ ring ],
				chi_anis[ ring ], sigma_r, 0 );
			fprintf( outf, "%11s %3d %5s %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f\n",
				a.fullname,ringnum[ring],ringname[ring],sigma_r[1,1],
				sigma_r[1,2], sigma_r[2,2],sigma_r[1,3],sigma_r[2,3],
				sigma_r[3,3] );
			for( i=1; i<=3; i++ ){
				for( j=1; j<=3; j++ ){
					sigma[ i,j ] += sigma_r[ i,j ];
				}
			}

		} else if ( use_rmd ){

		//
		//  get ring contribution using magnetic dipole approximation:
		//
			p = a.pos;
			shhm_r = ax_susc( p, ringcen[ ring ], rn[ ring ], chi_iso[ ring ],
				chi_anis[ ring ], sigma_r, 0 );
			if( verbose > 1 ){
				fprintf( outf, "ring: %-4s %3d  %8.4f\n", ringname[ ring ],
					ringnum[ ring ], shhm_r );
			}
        	shhm += shhm_r;

		} else {
		//
		//  Haigh-Mallion approach, gives only isotropic shift:
    	//  loop over pairs of bonded atoms in the ring:
		//
        	shhm_r = 0.;
        	for( k=1; k<=ringsize[ring]; k++ ){

            	kp1 = k+1; if( k == ringsize[ring] ) kp1 = 1;
            	r1 = ringpos[ atring+k ] - a.pos;
            	r2 = ringpos[ atring+kp1 ] - a.pos;
            	s12 = r1 @ ( r2 ^ rn[ring] );
            	r1sq = r1 @ r1;  d1 = sqrt( r1sq );
            	r2sq = r2 @ r2;  d2 = sqrt( r2sq );
            	shhm_r += 0.5*s12* (1./(r1sq*d1) + 1./(r2sq*d2));
        	}
        	shhm_r *= 5.4548*ringstr[ ring ];
			if( verbose > 1 ){
				fprintf( outf, "ring: %-4s %3d  %8.4f\n", ringname[ ring ],
					ringnum[ ring ], shhm_r );
			}
        	shhm += shhm_r;
            ringc[ ringname[ring] ] += shhm_r;
		}

		atring += ringsize[ring];
	}
	return( shhm );

};

int		write_sander_inp( molecule m, float observed[ hashed ],
			string sanderfile, string strtype[1], int no_coil[ hashed ] ){

//
//   prepare input for the SANDER module of AMBER, in order to carry
//     out chemical shift refinement;  the observed shift array comes
//     from the "read_obs_shifts" routine.  Skip protons for which
//     no_coil is set.

string		atomname, resname;
file		sanderf;
int		atnum[ hashed ];
string	attype[ hashed ];
string		fields[ 20 ], key, id;
int		i, nprot, ring, atring, has_prot;
string		five_six;
atom	a;

has_prot = 0;
sanderf = fopen( sanderfile, "w" );
if( sanderf == NULL ){
	fprintf( stderr, "can't open sander shifts file %s\n", sanderfile ); 
	exit( 1 );
}
fprintf( sanderf, " &shf\n" );

//  index atoms with string of the type "resname:tresnum:atname":

for( a in m ){

	id = sprintf( "%s:%d:%s", a.resname, a.tresnum, a.atomname );
	atnum[ id ] = a.tatomnum;
    if (strtype[ a.strandnum ] == "protein") {
        attype[ id ] = "PROT";
        has_prot = 1;
    }
    else if (strtype[ a.strandnum ] == "dna" || strtype[ a.strandnum ] == "rna")
        attype[ id ] = "DRNA";
    else
        attype[ id ] = "UNK ";
	// fprintf( stderr, "atnum[%s] = %d\n", id, a.tatomnum );
		
}

//  output ring information:

atring = 0;
fprintf( sanderf, "  nring = %d,\n", nrings );
for( ring=1; ring <= nrings; ring++ ){

	five_six = " ";
	if( ringname[ ring ] == "TRP" || ringname[ ring ] == "WRP" ||
		ringname[ ring ] == "A" || ringname[ ring ] == "G" ||
		ringname[ ring ] == "DA" || ringname[ ring ] == "DG" )
			five_six = "5";
	if( ringname[ ring ] == "TRP6" || ringname[ ring ] == "WRP6" ||
		ringname[ ring ] == "A6" || ringname[ ring ] == "G6" ||
		ringname[ ring ] == "DA6" || ringname[ ring ] == "DG6" )
			five_six = "6";

	fprintf( sanderf, "  namr(%d) = '%3s%3d %1s', natr(%d)=%d, str(%d)=%8.3f,\n", 
		ring, substr(ringname[ ring ],1,3), ringnum[ ring ], five_six, ring,
		ringsize[ ring ], ring, ringstr[ ring ] );

	for( i=1; i<=ringsize[ring]; i++ ){
		if( ringaname[ atring + i ] in atnum )
			fprintf( sanderf, "  iatr(%d,%d) = %d,\n", i,ring,
               atnum[ ringaname[ atring + i ] ] );
		else
			fprintf( sanderf, "Error: ring atom not found: %s\n", 
				ringaname[ atring + i ] );
	}
	atring = atring + ringsize[ ring ];
}

//  output protons at which shifts are to be calculated:

nprot = 0;
for( key in observed ){
	if( ! ( key in atnum ) ){
		if( key =~ "HIS" ){

		  key = "HID:" + substr(key,5,length(key));
		  if( ! ( key in atnum ) )
			fprintf( stderr, "write_sander Error: %s\n", key ); continue;
		}
		else fprintf( stderr, "write_sander Error: %s\n", key ); continue;
	}
	if( no_coil[ key ] ) continue;
		else nprot++;

//  average methyls:

	split( key, fields, ":" ); resname = fields[ 1 ]; atomname = fields[ 3 ];
    if( resname == "ALA" && atomname =~ "HB3" ||
        atomname =~ "HD[12]3" ||
        resname == "MET" && atomname =~ "HE3" ||
        resname == "DT" && atomname =~ "H73" ||
        resname == "VAL" && atomname =~ "HG13" ||
        atomname =~ "HG23" ||
        atomname =~ "HH33"){
		id = resname + ":" + fields[ 2 ] + ":" + 
			substr( atomname, 1, length( atomname ) - 1 ) + "1";
		fprintf( sanderf, "  iprot(%4d)=%4d, wt(%4d)=-1.0, prottype(%4d)='%s',\n", 
			nprot, atnum[ id ], nprot, nprot, attype[ key ] );
		nprot++;
		id = resname + ":" + fields[ 2 ] + ":" +
			substr( atomname, 1, length( atomname ) - 1 ) + "2";
		fprintf( sanderf, "  iprot(%4d)=%4d, wt(%4d)=-1.0, prottype(%4d)='%s',\n", 
			nprot, atnum[ id ], nprot, nprot, attype[ key ] );
		nprot++;
	}

//   average tyr and phe rings:

	if( (resname == "PHE" || resname == "TYR") && atomname =~ "H[DE]2" ){
		id = resname + ":" + fields[ 2 ] + ":" +
			substr( atomname, 1, length( atomname ) - 1 ) + "1";
		fprintf( sanderf, "  iprot(%4d)=%4d, wt(%4d)=-1.0, prottype(%4d)='%s',\n", 
			nprot, atnum[ id ], nprot, nprot, attype[ key ] );
		nprot++;
	}

	fprintf( sanderf, "  iprot(%4d)=%4d, wt(%4d)= 1.0,  obs(%4d)=%8.3f, prottype(%4d)='%s',\n",
		nprot, atnum[ key ], nprot, nprot, observed[ key ], nprot, attype[ key ] );

}

if (!has_prot)
    fprintf( sanderf, "  nter=0, ");
fprintf( sanderf, "  nprot = %d,\n &end\n", nprot );

return( 0 );
};
