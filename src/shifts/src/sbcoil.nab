int		sbcoil( string strtype[ 1 ], float shifts[ hashed ], 
	int no_coil[ hashed ], string op )
{

//
//   if op is "subtract":
//      subtract random coil shifts from input (observed) values
//   if op is "add":
//      add random coil shifts to input (calculated) values
//
//   if an appropriate random-coil value cannot be found, a "1" is entered
//      into the no_coil[] array.
//
// Random coil values:
//
// 1) PROTEINS
//
//  coil shift reference values
//  values from Table 1 of Merutka, Dyson, Wright pre-print (Sep. 93)
//     for 278K
//
//  histidine HIP value for protonated ring, asp and glu charged
//  residue labelled HIS,HID,HIE will get neutral shifts for his subtracted,
//    --output will be labelled HIS; reference shifts are for the neutral
//      for from the Bundi & Wuthrich paper
//
//   (Note that when two protons that
//   are stereo pairs are reported, the larger value of chemical
//   is listed first; this convention should thus be followed
//   in the observed shift file as well.)
//
//  here are the assumed atom orderings:
//      amide proton temp. coefficient (ppb/K) is in column 2
//
// 2) DNA
//
// sugar:
//       methyl-beta-furanoside of 2'-deoxy-D-erythro-pentose
//       R. U. Lemieux, Carb. Res. 20: 59-72 (1971)
// base: 
//       bases in acidic or basic solution, from Aldrich spectral catalog
//
//
//
//============================================================================
//

string		coil[ hashed ];
string		idp;
string		idpfields[ 4 ], mapfields[ 50 ];
int		nmap, i, found;
float		tempd, tempco;

#include "omap.h"

coil["GLY"] = "-7.3: 8.66 : 4.01 : 4.01 ";
coil["ALA"] = "-8.6: 8.67 : 4.34 : 1.41 ";
coil["VAL"] = "-8.7: 8.51 : 4.13 : 2.12 : 0.97 : 0.95 ";
coil["ILE"] = "-8.7: 8.52 : 4.18 : 1.89 : 1.49 : 1.21 : 0.93 : 0.88";
coil["LEU"] = "-8.6: 8.64 : 4.35 : 1.64 : 1.64 : 1.64 : 0.93 : 0.89";
coil["SER"] = "-7.3: 8.69 : 4.49 : 3.95 : 3.93 :";
coil["THR"] = "-7.7: 8.52 : 4.39 : 4.32 : 1.22";
coil["ASP"] = "-6.7: 8.61 : 4.63 : 2.71 : 2.70";
coil["GLU"] = "-7.3: 8.83 : 4.29 : 2.09 : 1.99 : 2.34 : 2.34";
coil["LYS"] = "-8.2: 8.67 : 4.32 : 1.87 : 1.79 : 1.46 : 1.46 : 1.69 : 1.68 : 2.99 : 2.99 : 7.59";
coil["ARG"] = "-7.5: 8.69 : 4.34 : 1.90 : 1.80 : 1.67 : 1.67 : 3.22 : 3.22 : 7.26 : 6.92 : 6.49";
coil["ASN"] = "-7.3: 8.76 : 4.76 : 2.88 : 2.79 : 7.03 : 7.74 ::";
coil["GLN"] = "-7.3: 8.70 : 4.36 : 2.15 : 2.02 : 2.40 : 2.39 : 6.97 : 7.69 ::";
coil["MET"] = "-8.3: 8.73 : 4.52 : 2.15 : 2.03 : 2.63 : 2.56 : 2.10 ";
coil["CYS"] = "-8.0: 8.75 : 4.58 : 2.97 : 2.97 :";
coil["CYX"] = "-8.0: 8.75 : 4.58 : 2.97 : 2.97 ";
coil["TRP"] = "-8.3: 8.23 : 4.62 : 3.23 : 3.23 :10.20 : 7.22 : 7.59 : 7.44 : 7.19 : 7.13 ";
coil["PHE"] = "-8.8: 8.61 : 4.62 : 3.15 : 3.06 : 7.28 : 7.38 : 7.32 ";
coil["TYR"] = "-9.7: 8.59 : 4.56 : 3.06 : 2.98 : 7.15 : 6.85 :";
coil["HIP"] = "-8.0: 8.79 : 4.77 : 3.33 : 3.19 : 8.59 : 7.31 ";
coil["HIS"] = "0.0: 8.415 : 4.630 : 3.263 : 3.198 : 7.747 : 6.966";
coil["HID"] = "0.0: 8.415 : 4.630 : 3.263 : 3.198 : 7.747 : 6.966";
coil["HIE"] = "0.0: 8.415 : 4.630 : 3.263 : 3.198 : 7.747 : 6.966";
coil["PRO"] = ": 4.44 : 2.28 : 2.02 : 2.030 : 2.030 : 3.68 : 3.65";
coil["NH2"] = "::";
coil["CHX"] = "::";
omap["HEM"] = ":::::::::::::::::::::::::::::";
omap["FOL"] = "::::::::::::::::";

#if 1
#   if 1
//   14 Aug. 14 values (JMS), fitting to BMRB-derived database
coil["DC"] = ":5.795:2.147:2.332:4.682:4.108:3.996:3.952::: 6.117: 7.774";
coil["DT"] = ":5.872:2.183:2.439:4.793:4.149:3.992:4.056:: 7.726: 1.994";
coil["DG"] = ":5.262:2.443:2.485:4.751:4.196:3.981:4.035:::: 8.112";
coil["DA"] = ":5.209:2.393:2.671:4.785:4.208:3.992:3.957: 8.527:::8.541";
#   else
// Original parameters from Dejaegere, Bryce, and Case; 1999
coil["DC"] = ":5.23:2.24:2.17:4.36:4.0:3.6:3.72::: 6.20 : 7.80";
coil["DT"] = ":5.23:2.24:2.17:4.36:4.0:3.6:3.72:: 7.45 : 1.90";
coil["DG"] = ":5.23:2.24:2.17:4.36:4.0:3.6:3.72:::: 7.69";
coil["DA"] = ":5.23:2.24:2.17:4.36:4.0:3.6:3.72: 8.68 :::8.60";
#   endif
#else
//   12sep13 values, starting from nuchemics
coil["DC"] = ":5.55:2.20:2.23:4.62:4.16:3.91:3.91::: 6.09 : 7.69";
coil["DT"] = ":5.50:2.26:2.48:4.76:4.16:3.91:3.91:: 7.65 : 1.98";
coil["DG"] = ":5.09:2.42:2.45:4.68:4.16:3.91:3.91:::: 8.06";
coil["DA"] = ":5.05:2.60:2.49:4.81:4.16:3.91:3.91: 8.70 :::8.65";
#endif

#if 1
// Parametrization of random coil shifts from fitting to a shift database (JMS 4/17/2014)
coil["C"] = ":5.448:4.486::4.454:4.364:4.346:4.162::: 6.020:8.061";
coil["U"] = ":5.532:4.530::4.522:4.416:4.263:4.183:: 5.976:8.163";
coil["G"] = ":5.166:4.758::4.557:4.353:4.222:4.142:::: 8.076";
coil["A"] = ":5.153:4.812::4.616:4.338:4.216:4.117:8.312:8.053:7.079:8.544";
#else
// Original parameters from Dejaegere, Bryce, and Case; 1999
coil["C"] = ":5.23:4.36::4.36:4.0:3.6:3.72::: 6.081:7.926";
coil["U"] = ":5.23:4.36::4.36:4.0:3.6:3.72:: 5.890:7.890";
coil["G"] = ":5.23:4.36::4.36:4.0:3.6:3.72:::: 8.015";
coil["A"] = ":5.23:4.36::4.36:4.0:3.6:3.72: 8.117 :20:20:8.337";
#endif

tempd = (36. - 5.)/1000.;
for( idp in shifts ){

	split( idp, idpfields, ":" );
	if(strtype[ 1 ] == "hetatm" ) continue;
	if( idpfields[1] in omap )
		nmap = split( omap[idpfields[1]], mapfields, " " );
	else {
		fprintf( stderr, "unable to find coil for %s\n", idp ); 
        exit(1);
	}
	found = 0;
	for( i=1; i<= nmap; i=i+1 ) {
		if( mapfields[i] == idpfields[3] ){ found=1; break; }
	}
	if( found ){
		nmap = split( coil[idpfields[1]], mapfields, ":" );
		if( mapfields[i+1] == "" ){
			if( op == "subtract" ){
				fprintf( stderr, "unable to subtract coil for %s", idp );
				fprintf( stderr, "  (blank mapfield)\n" );
			}
			no_coil[ idp ] = 1;
		} else {
			if( idpfields[3] == "H" || idpfields[1] == "NH2" ){
				tempco = atof( mapfields[1] );
				if( op == "subtract" )
					shifts[ idp ] -= atof( mapfields[2] ) + tempco*tempd;
				else if( op == "add" )
					shifts[ idp ] += atof( mapfields[2] ) + tempco*tempd;
			} else {
				if( op == "subtract" )
					shifts[ idp ] -= atof( mapfields[i+1] );
				else if( op == "add" )
					shifts[ idp ] += atof( mapfields[i+1] );
			}
#ifdef DEBUG
			fprintf( stderr, "sbcoil: %s  %8.3f\n", idp, atof( mapfields[i+1] ));
#endif
		}
	} else {
		if( op == "subtract" ){
			fprintf( stderr, "unable to subtract coil for %s", idp );
			fprintf( stderr, "  (atom name not found)\n" );
		}
		no_coil[ idp ] = 1;
	}
	
}
return( 0 );
};
