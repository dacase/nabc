int	MAT_fscan() c;
int	MAT_fprint() c;
string	MAT_getsyminfo() c;
matrix	MAT_concat() c;

int	getpid() c;

file	f;

#define	MAXIMATS	1000
matrix	imats1[ MAXIMATS ];
int	n_imats1;
string	s_imats1;
matrix	imats2[ MAXIMATS ];
int	n_imats2;
string	s_imats2;

int	m;

matrix	omats[ dynamic ];
int	n_omats;

if( argc != 3 ){
	fprintf( stderr, "usage: %s mf-1 mf-2\n", argv[ 1 ] );
	exit( 1 );
}

if( ( f = fopen( argv[ 2 ], "r" ) ) == NULL ){
	fprintf( stderr, "%s: can't read mf-1 %s\n", 
		argv[ 1 ], argv[ 2 ] );
	exit( 1 );
}
n_imats1 = MAT_fscan( f, MAXIMATS, imats1 );
s_imats1 = MAT_getsyminfo();
fclose( f );

if( ( f = fopen( argv[ 3 ], "r" ) ) == NULL ){
	fprintf( stderr, "%s: can't read mf-1 %s\n", 
		argv[ 1 ], argv[ 3 ] );
	exit( 1 );
}
n_imats2 = MAT_fscan( f, MAXIMATS, imats2 );
s_imats2 = MAT_getsyminfo();
fclose( f );

if( n_imats1 > n_imats2 )
	n_omats = n_imats1;
else
	n_omats = n_imats2;
allocate omats[ n_omats ];

printf( "#S{ multiply %d\n", getpid() );
printf( "%s", s_imats1 );
printf( "%s", s_imats2 );
printf( "#S}\n" );

if( n_imats1 == n_imats2 ){
	for( m = 1; m <= n_imats1; m++ )
		omats[ m ] = MAT_concat( imats1[ m ], imats2[ m ] );	
}else if( n_imats1 < n_imats2 ){
	for( m = 1; m <= n_imats1; m++ )
		omats[ m ] = MAT_concat( imats1[ m ], imats2[ m ] );
	for( m = n_imats1 + 1; m <= n_imats2; m++ )
		omats[ m ] = MAT_concat( imats1[ n_imats1 ], imats2[ m ] );
}else{
	for( m = 1; m <= n_imats2; m++ )
		omats[ m ] = MAT_concat( imats1[ m ], imats2[ m ] );
	for( m = n_imats2 + 1; m <= n_imats1; m++ )
		omats[ m ] = MAT_concat( imats1[ m ], imats2[ n_imats2 ] );
}

MAT_fprint( stdout, n_omats, omats );

deallocate omats;
