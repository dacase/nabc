#!/bin/bash

printf "configure script for nabc\n\n"

# Store the command
command=`echo "$0 $*"`

# set up defaults:
nabhome=`pwd`
verbose="@"
enablempi=
requested_help="no"
bintraj=""
netcdflibf=""
openblas="no"

compiler="gnu"
cc="gcc -Wno-unused-result"
cxx="g++"
mpicc="mpicc"
fc="gfortran"
cstdflags=""
optflags="-g -Ofast -mtune=native"

fc="gfortran"
flibs_arch="-lgfortran -w"
flibs_la=""
flibs_fftw="-lfftw3"
mpif90="mpif90"

openmp='no'
ompflag=""
ldflags=""

mkl="no"
openblas="no"

installtype="serial"
inc="-I$nabhome/include"

flibs_arch="-lgfortran -w"

#  process command-line flags:
for var in "$@"; do
    case "$var" in
        -h|-H|--h|--he|--hel|--help|-help)
            requested_help="yes";;
        -fullhelp|--full|--fullhelp|--full-h|--full-he|--full-hel|--full-help)
            requested_help="yes";;
        --verbose)
            verbose="";;
        --openmp)
            ompflag='-fopenmp -DOPENMP';
            openmp="yes";;
        --netcdf)
            netcdflibf=""   # TODO: point to some environment variable
            bintraj="-DBINTRAJ";;
        --mkl)
            mkl="yes";;
        --openblas)
            openblas="yes";;
        --static)
            ldflags="-static";;
        --intel)
            compiler="intel"
            cc="icc"
            cxx="icpc"
            fc="ifort"
            cstdflags="-std=c99"
            gccsys="-gcc-sys "
            optflags="-g -O3"
            flibs_arch="-lifport -lifcore -lsvml";;
        --clang)
            compiler="clang"
            clangf="-DCLANG"
            cc="clang"
            cxx="clang++"
            fc="flang"
            optflags="-g -O3";;
        --mpi)
            mpi="yes"
            mpiflag="-DMPI"
            installtype="parallel"
            sfx=".MPI";;
        *)
            echo "Option $var not recognized"
            exit 1
    esac
done

if [ "$requested_help" = "yes" ] ; then
	printf " --verbose      give build details, otherwise be more silent\n"
	printf " --netcdf       enable NetCDF support (not yet working)\n"
	printf " --intel        use Intel compiler; default is gcc\n"
	printf " --clang        use clang compiler; default is gcc\n"
	printf " --mpi          prepare for mpi build (not yet working)\n"
	printf " --openmp       prepare for OMP build\n"
	printf " --mkl          use MKL routines from \$MKLROOT\n"
	printf " --openblas     use BLAS routines from \$GOTO\n"
	printf " --static       use static linking\n"
    exit 0
fi

#  extra logic related to command-line arguments: generally, things
#      that need to be decided only after all arguments have been processed

if [ "$compiler" == "intel" -a "$openmp" == "yes" ]; then
  ompflag="-qopenmp -DOPENMP"
fi
if [ "$mpi" == "yes" ]; then
  fc="$mpif90"
  cc="$mpicc"
fi

#------------------------------------------------------------------------------
#  Make some needed directories:
#------------------------------------------------------------------------------
if [ ! -d bin ]; then
    mkdir bin
fi
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d include ]; then
    mkdir include
fi
cp src/include/CompatibilityMacros.h include

#------------------------------------------------------------------------------
#  Initialize variables that are architecture specific:
#------------------------------------------------------------------------------
processor=`uname -m`
if [ "$processor" = "em64t" -o "$processor" = "x86_64" ] ; then
    x86_64='yes'
else
    x86_64='no'
fi

# Determine linker type. Currently only matters for MKL
ld_version=`ld -v 2>&1 | awk '{print $1}'`
case "$ld_version" in
    *GNU*)
        gnuld='yes';;
    *)
        gnuld='no' ;;
esac

OS=`uname -s`
if [ "$OS" = "Darwin" ]; then
   is_mac='yes'
   shared_suffix=.dylib
   make_shared=-dynamiclib
   lm=
else
   is_mac='no'
   shared_suffix=.so
   make_shared=-shared
   lm=-lm
fi

#--------------------------------------------------------------------------
#  Configure the MKL or GOTO etc libraries for BLAS/LAPACK.
#--------------------------------------------------------------------------

# Determine MKL home directory
mklroot=''
if [ ! -z "$MKLROOT" ] ; then
    mklroot=$MKLROOT
elif [ ! -z "$MKL_HOME" ] ; then
    mklroot=$MKL_HOME
fi

if [ -z "$mklroot" -o "$mkl" == "no" ] ; then

   if [ ! -z "$GOTO" -a "$openblas" == "yes" ]; then
      echo "using OpenBLAS in $GOTO for BLAS/LAPACK"
      flibs_la="$GOTO -lpthread"
   else
      # use the compiled versions;
      printf "current code requires either --mkl or --openblas to be set\n"
      exit 1
      #flibs_la="-llapack -lblas"
      #lapack=liblapack
      #blas=libblas
   fi

else

   echo "Using MKL in $mklroot for BLAS/LAPACK"
   inc="-I$mklroot/include $inc"
   lapack=skip
   blas=skip

  # Determine how we are linking MKL
  if  [ "$compiler" = 'gnu' -o "$compiler" = 'clang' ] ; then
    link_type='line'
  else
    link_type='mkl'   #assuming Intel
  fi

  # We generally link to the sequential version of MKL since typically
  # one runs an MPI thread for each core.  However, if openmp is
  # specified, for example to turn on SMP diagonalizers for QMMM,
  # then we link to the threaded version of MKL and inside the code
  # the number of threads for vector functions etc will be set to 1.

  # Always link static version of MKL - just easier from an end
  # user perspective.

  if [ "$link_type" = 'line' ] ; then

    # ----- Link line advisor style. ------

    mkll="$mklroot/lib/32"
    mklinterfacelayer='libmkl_intel.a'
    if [ "$is_mac" = 'yes' ] ; then
      mkll="$mklroot/lib"
      if [ "$x86_64" = 'yes' ]; then
        mklinterfacelayer='libmkl_intel_lp64.a'
      fi
    elif [ "$x86_64" = 'yes' ]; then
      if [ -d "$mklroot/lib/em64t" ]; then
        mkll="$mklroot/lib/em64t"
        mkl_procstring="em64t"
      else
        mkll="$mklroot/lib/intel64"
        mkl_procstring="intel64"
      fi
      # lp64 is 32 bit integers on 64 bit platforms
      mklinterfacelayer='libmkl_intel_lp64.a'
    fi

    # Determing threading interface if necessary
    mklthread="$mkll/libmkl_sequential.a"
    mklomp=''
    if [ "$openmp" = 'yes' ] ; then
      if [ "$compiler" = 'intel' ] ; then
        mklthread="$mkll/libmkl_intel_thread.a"
        mklomp='-liomp5'
      elif [ "$compiler" = 'pgi' ] ; then
        mklthread="$mkll/libmkl_pgi_thread.a"
        mklomp='-pgf90libs -mp'
      else
        mklthread="$mkll/libmkl_gnu_thread.a"
        mklomp='-lgomp'
      fi
      if [ "$is_mac" = 'yes' -a "$compiler" != 'intel' ] ; then
        echo "Warning: OpenMP MKL not supported on OSX without Intel compilers. Using sequential."
        mklthread="$mkll/libmkl_sequential.a"
        mklomp=''
      fi
    fi

    # Set link flags
    if [ "$gnuld" = 'yes' ]; then
      echo "GNU linker assumed."
      flibs_la="-Wl,--start-group $mkll/$mklinterfacelayer $mklthread $mkll/libmkl_core.a -Wl,--end-group $mklomp -lpthread"
    else
      echo "Non-GNU linker assumed."
      flibs_la="-L$mkll $mkll/$mklinterfacelayer $mklthread $mkll/libmkl_core.a $mklomp -lpthread"
    fi
    # GNU compilers with MKL requires -ldl
    if [ "$compiler" = 'gnu' -o "$compiler" = 'clang' ]; then
      flibs_la="$flibs_la -ldl"
    fi

  else
    # ----- Use simple flag for Intel compilers ------------
    flibs_la='-qmkl'
  fi
fi

#--------------------------------------------------------------------------
#  create the config.h file
#--------------------------------------------------------------------------

cat <<EOF > config.h

#  nab configuration file.
#  Created on `date` via $command

CC=$cc
CXX=$cxx
FC=$fc
FLIBS_ARCH=$flibs_arch
LDFLAGS=$ldflags

###############################################################################

# (1)  Location of the installation

BASEDIR=$nabhome
BINDIR=\$(BASEDIR)/bin
LIBDIR=\$(BASEDIR)/lib
INCDIR=\$(BASEDIR)/include
DATDIR=\$(BASEDIR)/dat
LOGDIR=\$(BASEDIR)/logs

###############################################################################

#  (2) Flags that depend on OS type

SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared
LM=$lm

###############################################################################

#  (3) allow for the use of netcdf

NETCDFLIBF=$netcdflibf

###############################################################################

#  (4)  C compiler

CFLAGS=$bintraj $inc $ompflag $cstdflags
CNOOPTFLAGS=-g -O0
COPTFLAGS=$optflags

###############################################################################

#  (5)  other flags:

FLIBS= -lsff -lnabc -lcifparse $flibs_la
AR=    ar rv
RANLIB=ranlib
MV=mv
CP=cp
MAKE=make --no-print-directory
SFX=$sfx
VB=$verbose
INSTALLTYPE=$installtype

EOF

printf "Configure complete\n"
printf "\nThe next step is to type 'make clean && make install'\n\n"

exit 0
