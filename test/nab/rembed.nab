#define NTRIAL 1

molecule	m;
bounds		b;
float		nxyz[ dynamic ], pxyz[ dynamic ];
int			i;
string		opt, cpos, opos, npos, hpos, capos, ca1pos;
float		xc,yc,zc,rg;


m = linkprot( "", "AAAAAAAAAAAAAAAAAAAA", "" );

allocate nxyz[ 4*m.natoms ];
allocate pxyz[ 3*m.natoms ];

b = newbounds(m, "" );
//  add trans peptide chirality volumes:
#if 0
for( i=1; i<m.nresidues; i=i+1 ){
	capos = sprintf( ":%d:CA",  i );
	cpos = sprintf( ":%d:C",  i );
	opos = sprintf( ":%d:O",  i );
	npos = sprintf( ":%d:N",  i+1 );
	hpos = sprintf( ":%d:H",  i+1 );
	ca1pos = sprintf( ":%d:CA",  i+1 );
	setchivol( b, m, capos, cpos, opos, npos, 0.0 );
	setchivol( b, m, cpos, opos, npos, hpos, 0.0 );
	setchivol( b, m, cpos, npos, hpos, ca1pos, 0.0 );
}
#endif

tsmooth( b, 0.0005 );

opt = "kchi=0.0,ntpr=2000,pembed=1,rbox=40.,riter=40000,seed=-77653";
dg_options( b, opt );


	embed( b, nxyz );
	for (i=0; i<m.natoms; i++ ){ 
		pxyz[3*i+1] = nxyz[4*i+1]; 
		pxyz[3*i+2] = nxyz[4*i+2]; 
		pxyz[3*i+3] = nxyz[4*i+3]; 
	}

	// compute radius of gyration:

	rg = xc = yc = zc = 0.0;
	for( i=0; i<m.natoms; i=i+1 ){
		xc = xc + pxyz[  3*i + 1 ];
		yc = yc + pxyz[  3*i + 2 ];
		zc = xc + pxyz[  3*i + 3 ];
	}
	xc = xc/m.natoms;
	yc = yc/m.natoms;
	zc = zc/m.natoms;

	for( i=0; i<m.natoms; i=i+1 ){
		rg = rg + (pxyz[3*i+1] - xc)*(pxyz[3*i+1] - xc) +
				(pxyz[3*i+2] - yc)*(pxyz[3*i+2] - yc) +
				(pxyz[3*i+3] - zc)*(pxyz[3*i+3] - zc);
	}
	rg = sqrt( rg/m.natoms );
	printf( "radius of gyration: %8.3f\n", rg );
//	setmol_from_xyzw( m, NULL, nxyz );
//	putpdb( "rembed.pdb", m, "-brook" );
